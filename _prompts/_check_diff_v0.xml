<purpose>
    Review the provided code diffs and automatically correct any issues to enhance code quality and
    adhere to best practices.
</purpose>

<instructions>
    <instruction> Analyze the code differences in the <code-diffs> section. </instruction>
    <instruction>
        Identify errors, bugs, or deviations from best practices.
    </instruction>
    <instruction>
        Provide corrected code snippets for each issue found.
    </instruction>
    <instruction>
        Only include the corrected parts of the code in your response.
    </instruction>
</instructions>

<code-diffs>
    diff --git a/.gitignore b/.gitignore
index 8ccf471..ab7db31 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,7 +1,7 @@
 # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 
 # dependencies
-/node_modules
+node_modules/
 /.pnp
 .pnp.js
 .yarn/install-state.gz
@@ -43,4 +43,6 @@ package-lock.json
 
 **/*.swp
 
-.gitarchive
\ No newline at end of file
+.gitarchive
+
+_*
diff --git a/app/api/auth/[...nextauth]/route.ts b/app/api/auth/[...nextauth]/route.ts
index 4c2fd55..ea7e0b8 100644
--- a/app/api/auth/[...nextauth]/route.ts
+++ b/app/api/auth/[...nextauth]/route.ts
@@ -1,9 +1,8 @@
-import NextAuth from "next-auth"
-import GoogleProvider from "next-auth/providers/google"
-import GitHubProvider from "next-auth/providers/github"
-import { PrismaAdapter } from "@next-auth/prisma-adapter"
-import { PrismaClient } from "@prisma/client"
-import { AuthOptions } from "next-auth"
+import NextAuth, { AuthOptions } from 'next-auth'
+import GoogleProvider from 'next-auth/providers/google'
+import GitHubProvider from 'next-auth/providers/github'
+import { PrismaAdapter } from '@next-auth/prisma-adapter'
+import { PrismaClient } from '@prisma/client'
 
 const prisma = new PrismaClient()
 
@@ -25,15 +24,15 @@ export const authOptions: AuthOptions = {
   callbacks: {
     async session({ session, token }) {
       if (session.user) {
-        session.user.id = token.sub;
+        session.user.id = token.sub as string
       }
-      return session;
+      return session
     },
     async jwt({ token, user }) {
       if (user) {
-        token.id = user.id;
+        token.id = user.id
       }
-      return token;
+      return token
     },
     async redirect({ url, baseUrl }) {
       if (url === '/signin') {
@@ -48,12 +47,12 @@ export const authOptions: AuthOptions = {
         data: {
           userId: user.id,
         },
-      });
+      })
     },
   },
   secret: process.env.NEXTAUTH_SECRET,
   session: {
-    strategy: "jwt",
+    strategy: 'jwt',
   },
   jwt: {
     secret: process.env.NEXTAUTH_SECRET,
@@ -63,4 +62,4 @@ export const authOptions: AuthOptions = {
 
 const handler = NextAuth(authOptions)
 
-export { handler as GET, handler as POST }
\ No newline at end of file
+export { handler as GET, handler as POST }
diff --git a/app/api/cards/route.ts b/app/api/cards/route.ts
index 637620a..8d2687a 100644
--- a/app/api/cards/route.ts
+++ b/app/api/cards/route.ts
@@ -1,32 +1,32 @@
-import { NextResponse } from 'next/server';
-import { PrismaClient } from "@prisma/client"
-import { getServerSession } from "next-auth/next";
-import { authOptions } from "../auth/[...nextauth]/route";
+import { NextResponse } from 'next/server'
+import { PrismaClient } from '@prisma/client'
+import { getServerSession } from 'next-auth/next'
+import { authOptions } from '../auth/[...nextauth]/route'
 
 export async function POST(req: Request) {
-    const session = await getServerSession(authOptions);
-    if (!session || !session.user) {
-        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
-    }
+  const session = await getServerSession(authOptions)
+  if (!session || !session.user) {
+    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
+  }
 
-    const { type, cards } = await req.json();
-    const prisma = new PrismaClient()
+  const { type, cards } = await req.json()
+  const prisma = new PrismaClient()
 
-    try {
-        const savedCards = await prisma.flashcard.createMany({
-            data: cards.map((card: any) => ({
-                type,
-                question: card.question,
-                answer: card.answer,
-                example: card.example,
-                explanation: card.explanation,
-                userId: session.user.id,
-            })),
-        });
+  try {
+    const savedCards = await prisma.flashcard.createMany({
+      data: cards.map((card: any) => ({
+        type,
+        question: card.question,
+        answer: card.answer,
+        example: card.example,
+        explanation: card.explanation,
+        userId: session.user.id,
+      })),
+    })
 
-        return NextResponse.json({ count: savedCards.count });
-    } catch (error) {
-        console.error('Error saving cards:', error);
-        return NextResponse.json({ error: `Failed to save cards (${cards.length})` }, { status: 500 });
-    }
-}
\ No newline at end of file
+    return NextResponse.json({ count: savedCards.count })
+  } catch (error) {
+    console.error('Error saving cards:', error)
+    return NextResponse.json({ error: `Failed to save cards (${cards.length})` }, { status: 500 })
+  }
+}
diff --git a/app/api/generate/route.ts b/app/api/generate/route.ts
index c47dab7..568302f 100644
--- a/app/api/generate/route.ts
+++ b/app/api/generate/route.ts
@@ -1,5 +1,12 @@
 import { NextRequest, NextResponse } from 'next/server';
 import Anthropic from '@anthropic-ai/sdk';
+import rateLimit from 'express-rate-limit';
+
+const limiter = rateLimit({
+    windowMs: 15 * 60 * 1000, // 15 minutes
+    max: 100, // limit each IP to 100 requests per windowMs
+    message: 'Too many requests from this IP, please try again after 15 minutes',
+});
 
 export async function POST(req: NextRequest) {
     console.log('API called');
@@ -21,9 +28,10 @@ export async function POST(req: NextRequest) {
             messages: [{ role: 'user', content: prompt }],
         });
 
+        console.log('Content generated successfully');
         return NextResponse.json({ content: response.content[0].text });
     } catch (error) {
         console.error('Error calling Anthropic API:', error);
-        return NextResponse.json({ message: 'Error generating content' }, { status: 500 });
+        return NextResponse.json({ message: 'Error generating content', details: error.message }, { status: 500 });
     }
-}
\ No newline at end of file
+}
diff --git a/app/api/route.ts b/app/api/route.ts
new file mode 100644
index 0000000..b3902a5
--- /dev/null
+++ b/app/api/route.ts
@@ -0,0 +1,5 @@
+import { NextResponse } from 'next/server';
+
+export async function GET() {
+  return NextResponse.json({ message: 'API is working!' });
+}
diff --git a/app/dashboard/page.tsx b/app/dashboard/page.tsx
index 29ddccd..ddde657 100644
--- a/app/dashboard/page.tsx
+++ b/app/dashboard/page.tsx
@@ -1,24 +1,36 @@
 'use client'
 
-import { useState, useEffect } from 'react'
+import { useState, useEffect, useMemo, useCallback } from 'react'
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
 import { Button } from "@/components/ui/button"
 import { Progress } from "@/components/ui/progress"
 import { Calendar } from "@/components/ui/calendar"
-import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from "recharts"
-import { motion } from "framer-motion"
+import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip as RechartsTooltip, PieChart, Pie, Cell, LineChart, Line } from "recharts"
+import { motion, AnimatePresence } from "framer-motion"
 import confetti from 'canvas-confetti'
-import { Flame, Brain, Zap, Trophy, TrendingUp, Quote, Calendar as CalendarIcon } from 'lucide-react'
+import { Flame, Brain, Zap, Trophy, TrendingUp, Quote, Calendar as CalendarIcon, Info, ChevronLeft, ChevronRight, Clock, PieChart as PieChartIcon, Target, Award, Sparkles, BookOpen, Lightbulb } from 'lucide-react'
 import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
+import { format, subMonths, addMonths, isSameMonth, isSameYear, startOfYear, endOfYear, addDays } from 'date-fns'
+import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
+import { Badge } from "@/components/ui/badge"
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
+import { Slider } from "@/components/ui/slider"
 
-// Example data for illustration (expanded for a full year)
-const activityData = Array.from({ length: 365 }, (_, i) => {
-    const date = new Date(2023, 0, i + 1)
-    return {
-        date: date.toISOString().split('T')[0],
-        count: Math.floor(Math.random() * 10)
-    }
-})
+// Utility functions
+const generateActivityData = () => {
+    const startDate = startOfYear(new Date())
+    const endDate = endOfYear(new Date())
+    const days = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 3600 * 24))
+
+    return Array.from({ length: days }, (_, i) => {
+        const date = addDays(startDate, i)
+        return {
+            date: format(date, 'yyyy-MM-dd'),
+            count: Math.floor(Math.random() * 10)
+        }
+    })
+}
 
 const weeklyProgress = [
     { name: 'Mon', cards: 12 },
@@ -30,12 +42,153 @@ const weeklyProgress = [
     { name: 'Sun', cards: 22 },
 ]
 
+const studyTimeData = [
+    { name: 'Morning', value: 30 },
+    { name: 'Afternoon', value: 45 },
+    { name: 'Evening', value: 25 },
+]
+
+const retentionData = [
+    { day: 1, retention: 95 },
+    { day: 7, retention: 80 },
+    { day: 30, retention: 70 },
+    { day: 90, retention: 60 },
+]
+
+const COLORS = ['#0088FE', '#00C49F', '#FFBB28']
+
+// Component for stat cards
+const StatCard = ({ title, icon: Icon, value, subtext, color, onClick }) => (
+    <Card className="overflow-hidden">
+        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
+            <CardTitle className="text-sm font-medium">{title}</CardTitle>
+            <Icon className={`h-4 w-4 text-${color}-500`} aria-hidden="true" />
+        </CardHeader>
+        <CardContent>
+            <div className="flex items-center justify-between">
+                <motion.div
+                    className={`text-3xl font-bold text-${color}-500`}
+                    initial={{ scale: 0 }}
+                    animate={{ scale: 1 }}
+                    transition={{ type: "spring", stiffness: 260, damping: 20 }}
+                >
+                    {value}
+                </motion.div>
+                {onClick && (
+                    <Button size="sm" onClick={onClick}>
+                        +1 (Demo)
+                    </Button>
+                )}
+            </div>
+            <p className="text-xs text-muted-foreground">{subtext}</p>
+        </CardContent>
+    </Card>
+)
+
+// Daily Challenge component
+const DailyChallenge = ({ onComplete }) => {
+    const [completed, setCompleted] = useState(false)
+
+    const handleComplete = useCallback(() => {
+        setCompleted(true)
+        onComplete()
+    }, [onComplete])
+
+    return (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Sparkles className="h-5 w-5 text-yellow-500" />
+                    Daily Challenge
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <p className="mb-4">Review 20 cards in under 10 minutes</p>
+                {!completed ? (
+                    <Button onClick={handleComplete}>Complete Challenge</Button>
+                ) : (
+                    <Badge variant="success">Completed</Badge>
+                )}
+            </CardContent>
+        </Card>
+    )
+}
+
+// Learning Path Progress component
+const LearningPathProgress = () => {
+    const [currentLevel, setCurrentLevel] = useState(3)
+    const totalLevels = 10
+
+    return (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <TrendingUp className="h-5 w-5 text-blue-500" />
+                    Learning Path Progress
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="space-y-2">
+                    <div className="flex justify-between">
+                        <span>Level {currentLevel}</span>
+                        <span>{currentLevel}/{totalLevels}</span>
+                    </div>
+                    <Progress value={(currentLevel / totalLevels) * 100} className="w-full" />
+                </div>
+            </CardContent>
+        </Card>
+    )
+}
+
+// Study Reminder component
+const StudyReminder = () => {
+    const [reminderTime, setReminderTime] = useState(20)
+
+    const handleSetReminder = useCallback(() => {
+        // Implement reminder logic here
+        alert(`Reminder set for ${reminderTime}:00`)
+    }, [reminderTime])
+
+    return (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Clock className="h-5 w-5 text-indigo-500" />
+                    Study Reminder
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="space-y-4">
+                    <p>Set a daily reminder to study</p>
+                    <div className="flex items-center space-x-2">
+                        <Slider
+                            value={[reminderTime]}
+                            onValueChange={(value) => setReminderTime(value[0])}
+                            max={23}
+                            step={1}
+                        />
+                        <span>{reminderTime}:00</span>
+                    </div>
+                    <Button onClick={handleSetReminder}>Set Reminder</Button>
+                </div>
+            </CardContent>
+        </Card>
+    )
+}
+
+// Main UserDashboard component
 export default function UserDashboard() {
     const [progress, setProgress] = useState(0)
     const [streakDays, setStreakDays] = useState(0)
     const [heatmapView, setHeatmapView] = useState('month')
+    const [currentMonth, setCurrentMonth] = useState(new Date())
+    const [activeTab, setActiveTab] = useState('progress')
+    const [showAchievement, setShowAchievement] = useState(false)
+    const [xp, setXp] = useState(0)
     const userName = "Alice" // Replace with actual user name
 
+    const activityData = useMemo(() => generateActivityData(), [])
+
     useEffect(() => {
         const timer = setTimeout(() => setProgress(78), 500)
         return () => clearTimeout(timer)
@@ -49,166 +202,286 @@ export default function UserDashboard() {
                 spread: 70,
                 origin: { y: 0.6 }
             })
+            setShowAchievement(true)
         }
     }, [streakDays])
 
-    const getHeatmapData = () => {
+    const getHeatmapData = useCallback(() => {
         const today = new Date()
         const oneYearAgo = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate())
-        return activityData.filter(d => new Date(d.date) >= oneYearAgo && new Date(d.date) <= today)
-    }
+        return activityData.filter(d => {
+            const date = new Date(d.date)
+            return date >= oneYearAgo && date <= today &&
+                (heatmapView === 'year' || (heatmapView === 'month' && isSameMonth(date, currentMonth) && isSameYear(date, currentMonth)))
+        })
+    }, [activityData, heatmapView, currentMonth])
 
-    return (
-        <div className="container mx-auto p-4 space-y-6">
+    const handlePrevMonth = useCallback(() => {
+        setCurrentMonth(prevMonth => subMonths(prevMonth, 1))
+    }, [])
+
+    const handleNextMonth = useCallback(() => {
+        setCurrentMonth(prevMonth => addMonths(prevMonth, 1))
+    }, [])
+
+    const handleStreakIncrement = useCallback(() => {
+        setStreakDays(s => s + 1)
+    }, [])
+
+    const handleChallengeComplete = useCallback(() => {
+        setXp(prevXp => prevXp + 50)
+        confetti({
+            particleCount: 50,
+            spread: 60,
+            origin: { y: 0.8 }
+        })
+    }, [])
+
+    const renderHeaderSection = () => (
+        <motion.div
+            className="flex items-center justify-between"
+            initial={{ opacity: 0, y: -20 }}
+            animate={{ opacity: 1, y: 0 }}
+            transition={{ duration: 0.5 }}
+        >
             <h1 className="text-3xl font-bold flex items-center gap-2">
-                <Brain className="w-8 h-8 text-primary" />
+                <Brain className="w-8 h-8 text-primary" aria-hidden="true" />
                 Welcome back, {userName}!
             </h1>
+            <div className="flex items-center gap-4">
+                <Badge variant="outline" className="px-3 py-1">
+                    <Target className="w-4 h-4 mr-2" />
+                    Level 5 Learner
+                </Badge>
+                <Badge variant="secondary" className="px-3 py-1">
+                    <Sparkles className="w-4 h-4 mr-2" />
+                    {xp} XP
+                </Badge>
+                <Avatar>
+                    <AvatarImage src="/placeholder.svg?height=40&width=40" alt={userName} />
+                    <AvatarFallback>{userName.charAt(0)}</AvatarFallback>
+                </Avatar>
+            </div>
+        </motion.div>
+    )
 
-            <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
-                <Card>
-                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
-                        <CardTitle className="text-sm font-medium">Weekly Goal</CardTitle>
-                        <Trophy className="h-4 w-4 text-muted-foreground" />
-                    </CardHeader>
-                    <CardContent>
-                        <div className="space-y-2">
-                            <Progress value={progress} className="w-full" />
-                            <div className="flex items-center justify-between">
-                                <p className="text-2xl font-bold">{progress}%</p>
-                                <p className="text-xs text-muted-foreground">78 of 100 cards</p>
-                            </div>
-                        </div>
-                    </CardContent>
-                </Card>
-
-                <Card>
-                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
-                        <CardTitle className="text-sm font-medium">Streak</CardTitle>
-                        <Flame className="h-4 w-4 text-orange-500" />
-                    </CardHeader>
-                    <CardContent>
+    const renderAchievementNotification = () => (
+        <AnimatePresence>
+            {showAchievement && (
+                <motion.div
+                    initial={{ opacity: 0, y: -50 }}
+                    animate={{ opacity: 1, y: 0 }}
+                    exit={{ opacity: 0, y: -50 }}
+                    className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded"
+                    role="alert"
+                >
+                    <div className="flex items-center">
+                        <Award className="h-6 w-6 mr-2" />
+                        <p className="font-bold">Achievement Unlocked: 5-Day Streak!</p>
+                    </div>
+                    <p className="text-sm">Keep up the great work! You're on fire!</p>
+                    <button
+                        onClick={() => setShowAchievement(false)}
+                        className="absolute top-0 right-0 mt-2 mr-2 text-green-700 hover:text-green-900"
+                    >
+                        &times;
+                    </button>
+                </motion.div>
+            )}
+        </AnimatePresence>
+    )
+
+    const renderStatCards = () => (
+        <motion.div
+            className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4"
+            initial={{ opacity: 0 }}
+            animate={{ opacity: 1 }}
+            transition={{ duration: 0.5, delay: 0.2 }}
+        >
+            <Card>
+                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
+                    <CardTitle className="text-sm font-medium">Weekly Goal</CardTitle>
+                    <Trophy className="h-4 w-4 text-muted-foreground" aria-hidden="true" />
+                </CardHeader>
+                <CardContent>
+                    <div className="space-y-2">
+                        <Progress value={progress} className="w-full" />
                         <div className="flex items-center justify-between">
-                            <motion.div
-                                className="text-3xl font-bold text-orange-500"
-                                initial={{ scale: 0 }}
-                                animate={{ scale: 1 }}
-                                transition={{ type: "spring", stiffness: 260, damping: 20 }}
-                            >
-                                {streakDays} days
-                            </motion.div>
-                            <Button size="sm" onClick={() => setStreakDays(s => s + 1)}>+1 (Demo)</Button>
+                            <p className="text-2xl font-bold">{progress}%</p>
+                            <p className="text-xs text-muted-foreground">78 of 100 cards</p>
                         </div>
-                    </CardContent>
-                </Card>
-
-                <Card>
-                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
-                        <CardTitle className="text-sm font-medium">Cards Created</CardTitle>
-                        <Brain className="h-4 w-4 text-purple-500" />
-                    </CardHeader>
-                    <CardContent>
-                        <motion.div
-                            className="text-3xl font-bold text-purple-500"
-                            initial={{ opacity: 0, y: 20 }}
-                            animate={{ opacity: 1, y: 0 }}
-                            transition={{ duration: 0.5 }}
-                        >
-                            142
-                        </motion.div>
-                        <p className="text-xs text-muted-foreground">total cards</p>
-                    </CardContent>
-                </Card>
-
-                <Card>
-                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
-                        <CardTitle className="text-sm font-medium">Learning Speed</CardTitle>
-                        <Zap className="h-4 w-4 text-yellow-500" />
-                    </CardHeader>
-                    <CardContent>
-                        <div className="text-3xl font-bold text-yellow-500">Fast</div>
-                        <p className="text-xs text-muted-foreground">10 cards/day avg</p>
-                    </CardContent>
-                </Card>
-            </div>
+                    </div>
+                </CardContent>
+            </Card>
+
+            <StatCard
+                title="Streak"
+                icon={Flame}
+                value={`${streakDays} days`}
+                color="orange"
+                onClick={handleStreakIncrement}
+            />
+
+            <StatCard
+                title="Cards Created"
+                icon={Brain}
+                value="142"
+                subtext="total cards"
+                color="purple"
+            />
 
-            <div className="grid gap-4 md:grid-cols-2">
-                <Card className="col-span-1">
-                    <CardHeader className="flex flex-row items-center justify-between space-y-0">
-                        <CardTitle>Weekly Progress</CardTitle>
-                        <TrendingUp className="h-4 w-4 text-muted-foreground" />
-                    </CardHeader>
-                    <CardContent className="h-[200px]">
-                        <ResponsiveContainer width="100%" height="100%">
-                            <BarChart data={weeklyProgress}>
-                                <XAxis dataKey="name" />
-                                <YAxis />
-                                <Bar
-                                    dataKey="cards"
-                                    fill="#3b82f6"
-                                    radius={[4, 4, 0, 0]}
-                                    label={{ position: 'top', fill: '#6b7280', fontSize: 12 }}
-                                />
-                            </BarChart>
-                        </ResponsiveContainer>
-                    </CardContent>
-                </Card>
-
-                <Card>
-                    <CardHeader className="flex flex-row items-center justify-between space-y-0">
-                        <CardTitle className="flex items-center gap-2">
-                            <Quote className="h-4 w-4" />
-                            Daily Inspiration
-                        </CardTitle>
-                    </CardHeader>
-                    <CardContent>
-                        <motion.p
-                            className="text-lg font-semibold text-center"
+            <StatCard
+                title="Learning Speed"
+                icon={Zap}
+                value="Fast"
+                subtext="10 cards/day avg"
+                color="yellow"
+            />
+        </motion.div>
+    )
+
+    const renderLearningAnalytics = () => (
+        <Card className="md:col-span-2">
+            <CardHeader>
+                <CardTitle>Learning Analytics</CardTitle>
+            </CardHeader>
+            <CardContent>
+                <Tabs value={activeTab} onValueChange={setActiveTab}>
+                    <TabsList>
+                        <TabsTrigger value="progress">Weekly Progress</TabsTrigger>
+                        <TabsTrigger value="time">Study Time</TabsTrigger>
+                        <TabsTrigger value="retention">Retention</TabsTrigger>
+                    </TabsList>
+                    <TabsContent value="progress">
+                        <div className="h-[300px]">
+                            <ResponsiveContainer width="100%" height="100%">
+                                <BarChart data={weeklyProgress}>
+                                    <XAxis dataKey="name" />
+                                    <YAxis />
+                                    <RechartsTooltip />
+                                    <Bar
+                                        dataKey="cards"
+                                        fill="#3b82f6"
+                                        radius={[4, 4, 0, 0]}
+                                        label={{ position: 'top', fill: '#6b7280', fontSize: 12 }}
+                                    />
+                                </BarChart>
+                            </ResponsiveContainer>
+                        </div>
+                    </TabsContent>
+                    <TabsContent value="time">
+                        <div className="h-[300px]">
+                            <ResponsiveContainer width="100%" height="100%">
+                                <PieChart>
+                                    <Pie
+                                        data={studyTimeData}
+                                        cx="50%"
+                                        cy="50%"
+                                        labelLine={false}
+                                        outerRadius={80}
+                                        fill="#8884d8"
+                                        dataKey="value"
+                                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
+                                    >
+                                        {studyTimeData.map((entry, index) => (
+                                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
+                                        ))}
+                                    </Pie>
+                                    <RechartsTooltip />
+                                </PieChart>
+                            </ResponsiveContainer>
+                        </div>
+                    </TabsContent>
+                    <TabsContent value="retention">
+                        <div className="h-[300px]">
+                            <ResponsiveContainer width="100%" height="100%">
+                                <LineChart data={retentionData}>
+                                    <XAxis dataKey="day" />
+                                    <YAxis />
+                                    <RechartsTooltip />
+                                    <Line type="monotone" dataKey="retention" stroke="#8884d8" />
+                                </LineChart>
+                            </ResponsiveContainer>
+                        </div>
+                    </TabsContent>
+                </Tabs>
+            </CardContent>
+        </Card>
+    )
+
+    const renderActivityHeatmap = () => (
+        <Card className="md:col-span-2">
+            <CardHeader>
+                <div className="flex items-center justify-between">
+                    <CardTitle className="flex items-center gap-2">
+                        <CalendarIcon className="h-4 w-4" aria-hidden="true" />
+                        Activity Heatmap
+                    </CardTitle>
+                    <div className="flex items-center gap-2">
+                        <Select value={heatmapView} onValueChange={setHeatmapView}>
+                            <SelectTrigger className="w-[180px]">
+                                <SelectValue placeholder="Select view" />
+                            </SelectTrigger>
+                            <SelectContent>
+                                <SelectItem value="month">Month View</SelectItem>
+                                <SelectItem value="year">Year View</SelectItem>
+                            </SelectContent>
+                        </Select>
+                        <TooltipProvider>
+                            <Tooltip>
+                                <TooltipTrigger asChild>
+                                    <Button variant="ghost" size="icon" aria-label="Heatmap Info">
+                                        <Info className="h-4 w-4" />
+                                    </Button>
+                                </TooltipTrigger>
+                                <TooltipContent>
+                                    <p>Colors indicate activity level:</p>
+                                    <ul className="list-disc list-inside">
+                                        <li>Green: High (8-10 cards)</li>
+                                        <li>Yellow: Medium (4-7 cards)</li>
+                                        <li>Orange: Low (1-3 cards)</li>
+                                    </ul>
+                                </TooltipContent>
+                            </Tooltip>
+                        </TooltipProvider>
+                    </div>
+                </div>
+            </CardHeader>
+            <CardContent>
+                <div className="h-[240px] overflow-y-auto">
+                    <div className="flex items-center justify-between mb-4">
+                        <Button onClick={handlePrevMonth} variant="outline" size="icon" aria-label="Previous month">
+                            <ChevronLeft className="h-4 w-4" />
+                        </Button>
+                        <h2 className="text-lg font-semibold">{format(currentMonth, 'MMMM yyyy')}</h2>
+                        <Button onClick={handleNextMonth} variant="outline" size="icon" aria-label="Next month">
+                            <ChevronRight className="h-4 w-4" />
+                        </Button>
+                    </div>
+                    <AnimatePresence mode="wait">
+                        <motion.div
+                            key={currentMonth.toISOString()}
                             initial={{ opacity: 0 }}
                             animate={{ opacity: 1 }}
-                            transition={{ delay: 0.5 }}
+                            exit={{ opacity: 0 }}
+                            transition={{ duration: 0.3 }}
                         >
-                            "The capacity to learn is a gift; the ability to learn is a skill; the willingness to learn is a choice." - Brian Herbert
-                        </motion.p>
-                    </CardContent>
-                </Card>
-
-                <Card className="col-span-1 md:col-span-2">
-                    <CardHeader>
-                        <div className="flex items-center justify-between">
-                            <CardTitle className="flex items-center gap-2">
-                                <CalendarIcon className="h-4 w-4" />
-                                Activity Heatmap
-                            </CardTitle>
-                            <Select value={heatmapView} onValueChange={setHeatmapView}>
-                                <SelectTrigger className="w-[180px]">
-                                    <SelectValue placeholder="Select view" />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="month">Month View</SelectItem>
-                                    <SelectItem value="year">Year View (Coming Soon)</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </div>
-                    </CardHeader>
-                    <CardContent>
-                        <div className="h-[240px] overflow-y-auto">
                             <Calendar
                                 mode="multiple"
                                 selected={getHeatmapData().map(d => new Date(d.date))}
-                                numberOfMonths={1}
+                                month={currentMonth}
                                 className="rounded-md border"
                                 modifiers={{
                                     high: (date) => {
-                                        const activity = activityData.find(d => d.date === date.toISOString().split('T')[0])
+                                        const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'))
                                         return activity ? activity.count > 7 : false
                                     },
                                     medium: (date) => {
-                                        const activity = activityData.find(d => d.date === date.toISOString().split('T')[0])
+                                        const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'))
                                         return activity ? activity.count > 3 && activity.count <= 7 : false
                                     },
                                     low: (date) => {
-                                        const activity = activityData.find(d => d.date === date.toISOString().split('T')[0])
+                                        const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'))
                                         return activity ? activity.count > 0 && activity.count <= 3 : false
                                     },
                                 }}
@@ -218,10 +491,99 @@ export default function UserDashboard() {
                                     low: { backgroundColor: 'rgba(249, 115, 22, 0.9)' },
                                 }}
                             />
-                        </div>
-                    </CardContent>
-                </Card>
-            </div>
+                        </motion.div>
+                    </AnimatePresence>
+                </div>
+            </CardContent>
+        </Card>
+    )
+
+    const renderDailyInspiration = () => (
+        <Card>
+            <CardHeader className="flex flex-row items-center justify-between space-y-0">
+                <CardTitle className="flex items-center gap-2">
+                    <Quote className="h-4 w-4" aria-hidden="true" />
+                    Daily Inspiration
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <motion.p
+                    className="text-lg font-semibold text-center"
+                    initial={{ opacity: 0 }}
+                    animate={{ opacity: 1 }}
+                    transition={{ delay: 0.5 }}
+                >
+                    "The capacity to learn is a gift; the ability to learn is a skill; the willingness to learn is a choice." - Brian Herbert
+                </motion.p>
+            </CardContent>
+        </Card>
+    )
+
+    const renderUpcomingReviews = () => (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <BookOpen className="h-5 w-5 text-green-500" />
+                    Upcoming Reviews
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <ul className="space-y-2">
+                    {[...Array(5)].map((_, index) => (
+                        <li key={index} className="flex items-center justify-between">
+                            <span>{format(addDays(new Date(), index + 1), 'MMM dd')}</span>
+                            <Badge>{Math.floor(Math.random() * 20) + 5} cards</Badge>
+                        </li>
+                    ))}
+                </ul>
+            </CardContent>
+        </Card>
+    )
+
+    const renderStudyTips = () => (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Lightbulb className="h-5 w-5 text-yellow-500" />
+                    Study Tips
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <ul className="list-disc list-inside space-y-2 text-sm">
+                    <li>Review cards regularly to reinforce learning</li>
+                    <li>Use mnemonics for difficult concepts</li>
+                    <li>Take short breaks to improve focus</li>
+                    <li>Explain concepts to others to solidify understanding</li>
+                </ul>
+            </CardContent>
+        </Card>
+    )
+
+    return (
+        <div className="container mx-auto p-4 space-y-6">
+            {renderHeaderSection()}
+            {renderAchievementNotification()}
+            {renderStatCards()}
+
+            <motion.div
+                className="grid gap-4 md:grid-cols-3"
+                initial={{ opacity: 0 }}
+                animate={{ opacity: 1 }}
+                transition={{ duration: 0.5, delay: 0.4 }}
+            >
+                {renderLearningAnalytics()}
+
+                <div className="space-y-4">
+                    <DailyChallenge onComplete={handleChallengeComplete} />
+                    <LearningPathProgress />
+                    <StudyReminder />
+                </div>
+
+                {renderDailyInspiration()}
+                {renderUpcomingReviews()}
+                {renderStudyTips()}
+                {renderActivityHeatmap()}
+            </motion.div>
         </div>
     )
 }
\ No newline at end of file
diff --git a/app/hooks/useDarkMode.ts b/app/hooks/useDarkMode.ts
new file mode 100644
index 0000000..71041d0
--- /dev/null
+++ b/app/hooks/useDarkMode.ts
@@ -0,0 +1,29 @@
+'use client';
+import { useState, useEffect } from 'react';
+
+export function useDarkMode() {
+  const [theme, setTheme] = useState<'light' | 'dark'>('light');
+
+  useEffect(() => {
+    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
+    if (savedTheme) {
+      setTheme(savedTheme);
+      document.documentElement.classList.add(savedTheme);
+    } else {
+      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
+      const defaultTheme = prefersDark ? 'dark' : 'light';
+      setTheme(defaultTheme);
+      document.documentElement.classList.add(defaultTheme);
+    }
+  }, []);
+
+  const toggleTheme = () => {
+    const newTheme: 'light' | 'dark' = theme === 'light' ? 'dark' : 'light';
+    document.documentElement.classList.remove(theme);
+    document.documentElement.classList.add(newTheme);
+    setTheme(newTheme);
+    localStorage.setItem('theme', newTheme);
+  };
+
+  return { theme, toggleTheme };
+}
diff --git a/app/layout.tsx b/app/layout.tsx
index d2cca0a..deab3cc 100644
--- a/app/layout.tsx
+++ b/app/layout.tsx
@@ -1,47 +1,41 @@
-import type { Metadata } from "next";
-import localFont from "next/font/local";
-import { Toaster } from "@/components/ui/toaster"
-import { Providers } from "@/components/Providers"
-import ClientRootLayout from "@/components/ClientRootLayout"
-
-import "./globals.css";
+import type { Metadata } from 'next'
+import localFont from 'next/font/local'
+import Layout from '@/components/ui/Layout'
+import { Toaster } from '@/components/ui/toaster'
+import { Providers } from '@/components/ui/Providers'
+import '@/styles/globals.css'
 
 const geistSans = localFont({
-  src: "./fonts/GeistVF.woff",
-  variable: "--font-geist-sans",
-  weight: "100 900",
-});
+  src: '../public/fonts/GeistVF.woff',
+  variable: '--font-geist-sans',
+  weight: '100 900',
+})
+
 const geistMono = localFont({
-  src: "./fonts/GeistMonoVF.woff",
-  variable: "--font-geist-mono",
-  weight: "100 900",
-});
+  src: '../public/fonts/GeistMonoVF.woff',
+  variable: '--font-geist-mono',
+  weight: '100 900',
+})
 
 export const metadata: Metadata = {
-  title: "Recall AI",
-  description: "Learn as you read",
+  title: 'Recall AI',
+  description: 'Learn as you read',
   icons: {
     icon: '/icon.svg',
   },
-};
+}
 
-export default function RootLayout({
-  children,
-}: Readonly<{
-  children: React.ReactNode;
-}>) {
+export default function RootLayout({ children }: { children: React.ReactNode }) {
   return (
     <html lang="en">
-      <body
-        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
-      >
+      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
         <Providers>
-          <ClientRootLayout>
+          <Layout>
             {children}
-          </ClientRootLayout>
-          <Toaster />
+            <Toaster />
+          </Layout>
         </Providers>
       </body>
     </html>
-  );
-}
\ No newline at end of file
+  )
+}
diff --git a/app/leaderboard/page.tsx b/app/leaderboard/page.tsx
new file mode 100644
index 0000000..0528255
--- /dev/null
+++ b/app/leaderboard/page.tsx
@@ -0,0 +1,480 @@
+'use client'
+
+import { useState, useEffect } from 'react'
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
+import { Badge } from "@/components/ui/badge"
+import { Button } from "@/components/ui/button"
+import { Progress } from "@/components/ui/progress"
+import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
+import { Input } from "@/components/ui/input"
+import { motion, AnimatePresence } from "framer-motion"
+import confetti from 'canvas-confetti'
+import { Trophy, Medal, Star, Zap, Target, Sparkles, BookOpen, Brain, Flame, Gift, TrendingUp, Users, Award, Crown, Rocket, ArrowUp, ArrowDown, Swords, Lightbulb, Hexagon, ChevronUp, ChevronDown, Search } from 'lucide-react'
+
+// Mock data for learners (expanded with more fields)
+const learnersData = [
+    { id: 1, name: "Alice", avatar: "/placeholder.svg?height=40&width=40", xp: 1200, streak: 15, cardsLearned: 450, level: 8, badges: ["Polyglot", "Night Owl"], lastActive: "2 hours ago", rank: 1, rankChange: 0, powerups: ["Double XP", "Streak Shield"] },
+    { id: 2, name: "Bob", avatar: "/placeholder.svg?height=40&width=40", xp: 980, streak: 7, cardsLearned: 320, level: 6, badges: ["Early Bird"], lastActive: "1 day ago", rank: 2, rankChange: 1, powerups: ["Streak Freeze"] },
+    { id: 3, name: "Charlie", avatar: "/placeholder.svg?height=40&width=40", xp: 1500, streak: 21, cardsLearned: 600, level: 10, badges: ["Polyglot", "Streak Master"], lastActive: "5 minutes ago", rank: 3, rankChange: -1, powerups: ["XP Boost", "Infinite Lives"] },
+    { id: 4, name: "Diana", avatar: "/placeholder.svg?height=40&width=40", xp: 800, streak: 5, cardsLearned: 250, level: 5, badges: [], lastActive: "3 hours ago", rank: 4, rankChange: 0, powerups: [] },
+    { id: 5, name: "Ethan", avatar: "/placeholder.svg?height=40&width=40", xp: 1100, streak: 12, cardsLearned: 400, level: 7, badges: ["Quiz Ace"], lastActive: "1 hour ago", rank: 5, rankChange: 2, powerups: ["Time Warp"] },
+]
+
+const achievements = [
+    { name: "Consistent Learner", icon: Flame, description: "Maintain a 7-day streak", progress: 85 },
+    { name: "Knowledge Explorer", icon: BookOpen, description: "Learn 100 new cards", progress: 60 },
+    { name: "XP Milestone", icon: Zap, description: "Reach 1000 XP", progress: 100 },
+    { name: "Level Up", icon: Target, description: "Reach level 5", progress: 100 },
+    { name: "Dedication", icon: Medal, description: "Study for 30 days in total", progress: 40 },
+]
+
+export default function Component() {
+    const [learners, setLearners] = useState(learnersData)
+    const [sortBy, setSortBy] = useState('xp')
+    const [timeFrame, setTimeFrame] = useState('all')
+    const [showConfetti, setShowConfetti] = useState(false)
+    const [selectedLearner, setSelectedLearner] = useState(null)
+    const [userRank, setUserRank] = useState(3) // Assuming the current user is Charlie
+    const [showDuelModal, setShowDuelModal] = useState(false)
+    const [duelOpponent, setDuelOpponent] = useState(null)
+    const [expandedLearner, setExpandedLearner] = useState(null)
+    const [searchQuery, setSearchQuery] = useState('')
+
+    useEffect(() => {
+        const sortedLearners = [...learners].sort((a, b) => b[sortBy] - a[sortBy])
+        setLearners(sortedLearners)
+    }, [sortBy])
+
+    useEffect(() => {
+        if (showConfetti) {
+            confetti({
+                particleCount: 100,
+                spread: 70,
+                origin: { y: 0.6 }
+            })
+            setTimeout(() => setShowConfetti(false), 3000)
+        }
+    }, [showConfetti])
+
+    const filteredLearners = learners.filter(learner =>
+        learner.name.toLowerCase().includes(searchQuery.toLowerCase())
+    )
+
+    const renderLeaderboardHeader = () => (
+        <div className="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
+            <h1 className="text-3xl font-bold">Learning Arena</h1>
+            <div className="flex flex-col md:flex-row gap-4 w-full md:w-auto">
+                <div className="relative w-full md:w-64">
+                    <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 text-muted-foreground" />
+                    <Input
+                        type="text"
+                        placeholder="Search users..."
+                        value={searchQuery}
+                        onChange={(e) => setSearchQuery(e.target.value)}
+                        className="pl-8"
+                    />
+                </div>
+                <Select value={sortBy} onValueChange={setSortBy}>
+                    <SelectTrigger className="w-full md:w-[180px]">
+                        <SelectValue placeholder="Sort by" />
+                    </SelectTrigger>
+                    <SelectContent>
+                        <SelectItem value="xp">XP</SelectItem>
+                        <SelectItem value="streak">Streak</SelectItem>
+                        <SelectItem value="cardsLearned">Cards Learned</SelectItem>
+                        <SelectItem value="level">Level</SelectItem>
+                    </SelectContent>
+                </Select>
+                <Select value={timeFrame} onValueChange={setTimeFrame}>
+                    <SelectTrigger className="w-full md:w-[180px]">
+                        <SelectValue placeholder="Time frame" />
+                    </SelectTrigger>
+                    <SelectContent>
+                        <SelectItem value="all">All Time</SelectItem>
+                        <SelectItem value="month">This Month</SelectItem>
+                        <SelectItem value="week">This Week</SelectItem>
+                    </SelectContent>
+                </Select>
+            </div>
+        </div>
+    )
+
+    const renderLeaderboard = () => (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Trophy className="h-6 w-6 text-yellow-500" />
+                    Top Learners
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <AnimatePresence>
+                    {filteredLearners.map((learner, index) => (
+                        <motion.div
+                            key={learner.id}
+                            initial={{ opacity: 0, y: 20 }}
+                            animate={{ opacity: 1, y: 0 }}
+                            exit={{ opacity: 0, y: -20 }}
+                            transition={{ duration: 0.3, delay: index * 0.1 }}
+                            className={`flex flex-col p-4 border-b last:border-b-0 hover:bg-muted/50 cursor-pointer ${learner.rank === userRank ? 'bg-primary/10' : ''}`}
+                            onClick={() => setExpandedLearner(expandedLearner === learner.id ? null : learner.id)}
+                        >
+                            <div className="flex items-center justify-between">
+                                <div className="flex items-center gap-4">
+                                    <span className="text-2xl font-bold text-muted-foreground w-8">
+                                        {index === 0 && <Crown className="h-6 w-6 text-yellow-500" />}
+                                        {index === 1 && <Crown className="h-6 w-6 text-gray-400" />}
+                                        {index === 2 && <Crown className="h-6 w-6 text-amber-600" />}
+                                        {index > 2 && learner.rank}
+                                    </span>
+                                    <Avatar>
+                                        <AvatarImage src={learner.avatar} alt={learner.name} />
+                                        <AvatarFallback>{learner.name[0]}</AvatarFallback>
+                                    </Avatar>
+                                    <div>
+                                        <p className="font-semibold">{learner.name}</p>
+                                        <p className="text-sm text-muted-foreground">Level {learner.level}</p>
+                                    </div>
+                                </div>
+                                <div className="flex items-center gap-4">
+                                    <Badge variant="secondary" className="flex items-center gap-1">
+                                        <Zap className="h-4 w-4" />
+                                        {learner.xp} XP
+                                    </Badge>
+                                    <Badge variant="outline" className="flex items-center gap-1">
+                                        <Flame className="h-4 w-4" />
+                                        {learner.streak} day streak
+                                    </Badge>
+                                    <Badge variant="outline" className="flex items-center gap-1">
+                                        <BookOpen className="h-4 w-4" />
+                                        {learner.cardsLearned} cards
+                                    </Badge>
+                                    {learner.rankChange !== 0 && (
+                                        <Badge variant={learner.rankChange > 0 ? "success" : "destructive"} className="flex items-center gap-1">
+                                            {learner.rankChange > 0 ? <ArrowUp className="h-4 w-4" /> : <ArrowDown className="h-4 w-4" />}
+                                            {Math.abs(learner.rankChange)}
+                                        </Badge>
+                                    )}
+                                    <Button
+                                        variant="outline"
+                                        size="sm"
+                                        onClick={(e) => {
+                                            e.stopPropagation()
+                                            setDuelOpponent(learner)
+                                            setShowDuelModal(true)
+                                        }}
+                                    >
+                                        <Swords className="h-4 w-4 mr-2" />
+                                        Duel
+                                    </Button>
+                                    {expandedLearner === learner.id ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
+                                </div>
+                            </div>
+                            {expandedLearner === learner.id && (
+                                <motion.div
+                                    initial={{ opacity: 0, height: 0 }}
+                                    animate={{ opacity: 1, height: 'auto' }}
+                                    exit={{ opacity: 0, height: 0 }}
+                                    transition={{ duration: 0.3 }}
+                                    className="mt-4 space-y-4"
+                                >
+                                    <div className="grid grid-cols-3 gap-4">
+                                        <Card>
+                                            <CardContent className="flex flex-col items-center justify-center p-4">
+                                                <Zap className="h-8 w-8 text-yellow-500 mb-2" />
+                                                <h3 className="text-xl font-bold">{learner.xp}</h3>
+                                                <p className="text-sm text-muted-foreground">Total XP</p>
+                                            </CardContent>
+                                        </Card>
+                                        <Card>
+                                            <CardContent className="flex flex-col items-center justify-center p-4">
+                                                <Flame className="h-8 w-8 text-orange-500 mb-2" />
+                                                <h3 className="text-xl font-bold">{learner.streak}</h3>
+                                                <p className="text-sm text-muted-foreground">Day Streak</p>
+                                            </CardContent>
+                                        </Card>
+                                        <Card>
+                                            <CardContent className="flex flex-col items-center justify-center p-4">
+                                                <BookOpen className="h-8 w-8 text-green-500 mb-2" />
+                                                <h3 className="text-xl font-bold">{learner.cardsLearned}</h3>
+                                                <p className="text-sm text-muted-foreground">Cards Learned</p>
+                                            </CardContent>
+                                        </Card>
+                                    </div>
+                                    <div>
+                                        <h3 className="text-lg font-semibold mb-2">Badges</h3>
+                                        <div className="flex flex-wrap gap-2">
+                                            {learner.badges.map((badge, index) => (
+                                                <Badge key={index} variant="secondary" className="flex items-center gap-1">
+                                                    <Award className="h-4 w-4" />
+                                                    {badge}
+                                                </Badge>
+                                            ))}
+                                        </div>
+                                    </div>
+                                    <div>
+                                        <h3 className="text-lg font-semibold mb-2">Active Power-ups</h3>
+                                        <div className="flex flex-wrap gap-2">
+                                            {learner.powerups.map((powerup, index) => (
+                                                <Badge key={index} variant="outline" className="flex items-center gap-1">
+                                                    <Hexagon className="h-4 w-4" />
+                                                    {powerup}
+                                                </Badge>
+                                            ))}
+                                        </div>
+                                    </div>
+                                </motion.div>
+                            )}
+                        </motion.div>
+                    ))}
+                </AnimatePresence>
+            </CardContent>
+        </Card>
+    )
+
+    const renderAchievements = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Star className="h-6 w-6 text-yellow-500" />
+                    Recent Achievements
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
+                    {achievements.map((achievement, index) => (
+                        <Card key={index} className="bg-muted">
+                            <CardContent className="flex flex-col gap-4 p-4">
+                                <div className="flex items-center gap-4">
+                                    <achievement.icon className="h-8 w-8 text-primary" />
+                                    <div>
+                                        <h3 className="font-semibold">{achievement.name}</h3>
+                                        <p className="text-sm text-muted-foreground">{achievement.description}</p>
+                                    </div>
+                                </div>
+                                <Progress value={achievement.progress} className="w-full h-2" />
+                                <p className="text-sm text-right">{achievement.progress}% complete</p>
+                            </CardContent>
+                        </Card>
+                    ))}
+                </div>
+            </CardContent>
+        </Card>
+    )
+
+    const renderCommunityStats = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Brain className="h-6 w-6 text-blue-500" />
+                    Community Stats
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+                    <Card>
+                        <CardContent className="flex flex-col items-center justify-center p-6">
+                            <Zap className="h-12 w-12 text-yellow-500 mb-2" />
+                            <h3 className="text-2xl font-bold">54,321</h3>
+                            <p className="text-muted-foreground">Total XP Earned</p>
+                        </CardContent>
+                    </Card>
+                    <Card>
+                        <CardContent className="flex flex-col items-center justify-center p-6">
+                            <BookOpen className="h-12 w-12 text-green-500 mb-2" />
+                            <h3 className="text-2xl font-bold">12,345</h3>
+                            <p className="text-muted-foreground">Cards Learned Today</p>
+                        </CardContent>
+                    </Card>
+                    <Card>
+                        <CardContent className="flex flex-col items-center justify-center p-6">
+                            <Flame className="h-12 w-12 text-orange-500 mb-2" />
+                            <h3 className="text-2xl font-bold">789</h3>
+                            <p className="text-muted-foreground">Active Streaks</p>
+                        </CardContent>
+                    </Card>
+                </div>
+            </CardContent>
+        </Card>
+    )
+
+    const renderCommunityChallenge = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Target className="h-6 w-6 text-red-500" />
+                    Community Challenge
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <h3 className="text-xl font-semibold mb-2">Learn 100,000 Cards This Week</h3>
+                <p className="text-muted-foreground mb-4">Join forces with other learners to reach our community goal!</p>
+                <div className="space-y-2">
+                    <div className="flex justify-between text-sm">
+                        <span>Progress: 73,450 / 100,000</span>
+                        <span>73%</span>
+                    </div>
+                    <Progress value={73} className="w-full h-2" />
+                </div>
+                <Button className="mt-4" onClick={() => setShowConfetti(true)}>
+                    Contribute Now
+                </Button>
+            </CardContent>
+        </Card>
+    )
+
+    const renderDailyChallenge = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Gift className="h-6 w-6 text-purple-500" />
+                    Daily Challenge
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <h3 className="text-xl font-semibold mb-2">Learn 50 New Words</h3>
+                <p className="text-muted-foreground mb-4">Complete today's challenge to earn bonus XP and a special badge!</p>
+                <div className="space-y-2">
+                    <div className="flex justify-between text-sm">
+                        <span>Progress: 32 / 50</span>
+                        <span>64%</span>
+                    </div>
+                    <Progress value={64} className="w-full h-2" />
+                </div>
+                <Button className="mt-4" variant="outline">
+                    Start Learning
+                </Button>
+            </CardContent>
+        </Card>
+    )
+
+    const renderTrendingTopics = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <TrendingUp className="h-6 w-6 text-green-500" />
+                    Trending Topics
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
+                    {['Spanish Verbs', 'JavaScript Basics', 'World Capitals', 'Chemistry Elements', 'Art History'].map((topic, index) => (
+                        <Button key={index} variant="outline" className="justify-start">
+                            <Sparkles className="h-4 w-4 mr-2" />
+                            {topic}
+                        </Button>
+                    ))}
+                </div>
+            </CardContent>
+        </Card>
+    )
+
+    const renderUserProgress = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Rocket className="h-6 w-6 text-blue-500" />
+                    Your Progress
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="flex items-center justify-between mb-4">
+                    <div>
+                        <h3 className="text-xl font-semibold">Current Rank: {userRank}</h3>
+                        <p className="text-muted-foreground">Keep going! You're doing great!</p>
+                    </div>
+                    <Button variant="outline">View Detailed Stats</Button>
+                </div>
+                <div className="space-y-4">
+                    <div>
+                        <div className="flex justify-between text-sm mb-1">
+                            <span>XP to next level</span>
+                            <span>750 / 1000</span>
+                        </div>
+                        <Progress value={75} className="w-full h-2" />
+                    </div>
+                    <div>
+                        <div className="flex justify-between text-sm mb-1">
+                            <span>Daily goal progress</span>
+                            <span>4 / 5 sessions</span>
+                        </div>
+                        <Progress value={80} className="w-full h-2" />
+                    </div>
+                </div>
+            </CardContent>
+        </Card>
+    )
+
+    const renderDuelModal = () => (
+        showDuelModal && duelOpponent && (
+            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
+                <Card className="w-96">
+                    <CardHeader>
+                        <CardTitle className="flex items-center gap-2">
+                            <Swords className="h-6 w-6 text-red-500" />
+                            Learning Duel
+                        </CardTitle>
+                    </CardHeader>
+                    <CardContent>
+                        <p className="mb-4">Challenge {duelOpponent.name} to a learning duel!</p>
+                        <div className="flex justify-between items-center mb-4">
+                            <Avatar>
+                                <AvatarImage src="/placeholder.svg?height=40&width=40" alt="Your Avatar" />
+                                <AvatarFallback>You</AvatarFallback>
+                            </Avatar>
+                            <Swords className="h-8 w-8 text-red-500" />
+                            <Avatar>
+                                <AvatarImage src={duelOpponent.avatar} alt={duelOpponent.name} />
+                                <AvatarFallback>{duelOpponent.name[0]}</AvatarFallback>
+                            </Avatar>
+                        </div>
+                        <div className="space-y-2">
+                            <Button className="w-full" onClick={() => setShowDuelModal(false)}>
+                                Start Duel
+                            </Button>
+                            <Button className="w-full" variant="outline" onClick={() => setShowDuelModal(false)}>
+                                Cancel
+                            </Button>
+                        </div>
+                    </CardContent>
+                </Card>
+            </div>
+        )
+    )
+
+    return (
+        <div className="container mx-auto p-4 space-y-6">
+            {renderLeaderboardHeader()}
+            <Tabs defaultValue="leaderboard">
+                <TabsList className="mb-4">
+                    <TabsTrigger value="leaderboard">Leaderboard</TabsTrigger>
+                    <TabsTrigger value="achievements">Achievements</TabsTrigger>
+                    <TabsTrigger value="community">Community</TabsTrigger>
+                    <TabsTrigger value="challenges">Challenges</TabsTrigger>
+                    <TabsTrigger value="progress">Your Progress</TabsTrigger>
+                </TabsList>
+                <TabsContent value="leaderboard">
+                    {renderLeaderboard()}
+                </TabsContent>
+                <TabsContent value="achievements">
+                    {renderAchievements()}
+                </TabsContent>
+                <TabsContent value="community">
+                    {renderCommunityStats()}
+                    {renderCommunityChallenge()}
+                    {renderTrendingTopics()}
+                </TabsContent>
+                <TabsContent value="challenges">
+                    {renderDailyChallenge()}
+                    {renderCommunityChallenge()}
+                </TabsContent>
+                <TabsContent value="progress">
+                    {renderUserProgress()}
+                </TabsContent>
+            </Tabs>
+            {renderDuelModal()}
+        </div>
+    )
+}
\ No newline at end of file
diff --git a/app/manager/page.tsx b/app/manager/page.tsx
index b696b25..3923657 100644
--- a/app/manager/page.tsx
+++ b/app/manager/page.tsx
@@ -1,389 +1,654 @@
-'use client'
-
-import { useState, useEffect, useRef } from 'react'
-import { Button } from "@/components/ui/button"
-import { Input } from "@/components/ui/input"
-import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
-import { Card, CardContent } from "@/components/ui/card"
-import { Progress } from "@/components/ui/progress"
-import { Switch } from "@/components/ui/switch"
-import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
-import { Badge } from "@/components/ui/badge"
-import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
-import { Label } from "@/components/ui/label"
-import { Textarea } from "@/components/ui/textarea"
-import { Checkbox } from "@/components/ui/checkbox"
-import { Search, Plus, Edit2, Trash2, Star, Volume2, Settings, Download, Upload, Filter } from 'lucide-react'
-import { useToast } from "@/components/ui/use-toast"
-import { initialFlashcards, STATUSES, FONT_SIZES } from './constants'
-import {
-    addCategory, toggleCategory, changeCardCategory, deleteCard,
-    updateCardStatus, saveCard, exportToCSV, importFromCSV,
-    pronounceWord, toggleCardSelection, handleBulkAction, selectAllCards
-} from './utils'
-
-export default function FlashcardManager() {
-    const [flashcards, setFlashcards] = useState(initialFlashcards)
-    const [searchTerm, setSearchTerm] = useState('')
-    const [selectedCategories, setSelectedCategories] = useState(['All'])
-    const [selectedStatus, setSelectedStatus] = useState('All')
-    const [viewMode, setViewMode] = useState('grid')
-    const [newCategory, setNewCategory] = useState('')
-    const [darkMode, setDarkMode] = useState(false)
-    const [editingCard, setEditingCard] = useState(null)
-    const [isAddingCard, setIsAddingCard] = useState(false)
-    const [isSettingsOpen, setIsSettingsOpen] = useState(false)
-    const [fontSize, setFontSize] = useState('medium')
-    const [reviewInterval, setReviewInterval] = useState(7)
-    const [selectedCards, setSelectedCards] = useState([])
-    const [isFilterOpen, setIsFilterOpen] = useState(false)
-    const { toast } = useToast()
-    const fileInputRef = useRef(null)
-
-    const categories = ['All', ...new Set(flashcards.map(card => card.category))]
-
-    const filteredFlashcards = flashcards.filter(card =>
-        card.word.toLowerCase().includes(searchTerm.toLowerCase()) &&
-        (selectedCategories.includes('All') || selectedCategories.includes(card.category)) &&
-        (selectedStatus === 'All' || card.status === selectedStatus)
-    )
-
-    const stats = {
-        total: flashcards.length,
-        new: flashcards.filter(card => card.status === 'New').length,
-        learning: flashcards.filter(card => card.status === 'Learning').length,
-        mastered: flashcards.filter(card => card.status === 'Mastered').length,
-    }
+import React, { useState, useEffect, useMemo, useCallback } from 'react';
+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
+import { Button } from '@/components/ui/button';
+import { Progress } from '@/components/ui/progress';
+import { Calendar } from '@/components/ui/calendar';
+import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip as RechartsTooltip, PieChart, Pie, Cell, LineChart, Line } from 'recharts';
+import { motion, AnimatePresence } from 'framer-motion';
+import confetti from 'canvas-confetti';
+import { Flame, Brain, Zap, Trophy, TrendingUp, Quote, Calendar as CalendarIcon, Info, ChevronLeft, ChevronRight, Clock, Target, Award, Sparkles, BookOpen, Lightbulb, Hexagon, ChevronUp, ChevronDown, Swords } from 'lucide-react';
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
+import { format, subMonths, addMonths, isSameMonth, isSameYear, startOfYear, endOfYear, addDays } from 'date-fns';
+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
+import { Badge } from '@/components/ui/badge';
+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
+import { Slider } from '@/components/ui/slider';
+import { Switch } from '@/components/ui/switch';
+import { Label } from '@/components/ui/label';
+import { useToast } from "@/components/ui/use-toast";
 
-    useEffect(() => {
-        document.body.classList.toggle('dark', darkMode)
-    }, [darkMode])
+// Utility functions
+const generateActivityData = () => {
+    const startDate = startOfYear(new Date());
+    const endDate = endOfYear(new Date());
+    const days = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 3600 * 24));
+    return Array.from({ length: days }, (_, i) => {
+        const date = addDays(startDate, i);
+        return { date: format(date, 'yyyy-MM-dd'), count: Math.floor(Math.random() * 10) };
+    });
+};
 
-    return (
-        <div className={`flex h-screen ${darkMode ? 'dark bg-gray-900 text-white' : 'bg-gray-100'}`}>
-            {/* Main Content */}
-            <div className="flex-1 p-8 overflow-auto">
-                <h1 className="text-3xl font-bold mb-6">Flashcard Manager</h1>
-
-                {/* Navigation and Filtering */}
-                <div className="flex items-center space-x-4 mb-6">
-                    <div className="relative flex-1">
-                        <Input
-                            type="text"
-                            placeholder="Search flashcards..."
-                            value={searchTerm}
-                            onChange={(e) => setSearchTerm(e.target.value)}
-                            className={`pl-10 ${darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}`}
-                        />
-                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
-                    </div>
-                    <Select value={selectedStatus} onValueChange={setSelectedStatus}>
-                        <SelectTrigger className={`w-[180px] ${darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}`}>
-                            <SelectValue placeholder="Select status" />
-                        </SelectTrigger>
-                        <SelectContent className={darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}>
-                            {STATUSES.map(status => (
-                                <SelectItem key={status} value={status}>{status}</SelectItem>
-                            ))}
-                        </SelectContent>
-                    </Select>
-                    <Button variant="outline" size="icon" onClick={() => exportToCSV(flashcards)} className={darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}>
-                        <Download size={20} />
-                    </Button>
-                    <Button variant="outline" size="icon" onClick={() => fileInputRef.current.click()} className={darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}>
-                        <Upload size={20} />
-                    </Button>
-                    <input
-                        type="file"
-                        ref={fileInputRef}
-                        onChange={(e) => importFromCSV(e, setFlashcards)}
-                        style={{ display: 'none' }}
-                        accept=".csv"
-                    />
-                    <Button variant="outline" size="icon" onClick={() => setIsSettingsOpen(true)} className={darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}>
-                        <Settings size={20} />
+const weeklyProgress = [
+    { name: 'Mon', cards: 12 },
+    { name: 'Tue', cards: 18 },
+    { name: 'Wed', cards: 15 },
+    { name: 'Thu', cards: 25 },
+    { name: 'Fri', cards: 20 },
+    { name: 'Sat', cards: 30 },
+    { name: 'Sun', cards: 22 },
+];
+
+const studyTimeData = [
+    { name: 'Morning', value: 30 },
+    { name: 'Afternoon', value: 45 },
+    { name: 'Evening', value: 25 },
+];
+
+const retentionData = [
+    { day: 1, retention: 95 },
+    { day: 7, retention: 80 },
+    { day: 30, retention: 70 },
+    { day: 90, retention: 60 },
+];
+
+const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];
+
+// Component for stat cards
+const StatCard = ({ title, icon: Icon, value, subtext, color, onClick }) => (
+    <Card className="overflow-hidden">
+        <CardHeader className="flex flex-row items-center justify-between pb-2">
+            <CardTitle className="text-sm font-medium">{title}</CardTitle>
+            <Icon className={`h-4 w-4 text-${color}-500`} aria-hidden="true" />
+        </CardHeader>
+        <CardContent>
+            <div className="flex items-center justify-between">
+                <motion.div
+                    className={`text-3xl font-bold text-${color}-500`}
+                    initial={{ scale: 0 }}
+                    animate={{ scale: 1 }}
+                    transition={{ type: 'spring', stiffness: 260, damping: 20 }}
+                >
+                    {value}
+                </motion.div>
+                {onClick && (
+                    <Button size="sm" onClick={onClick}>
+                        +1 (Demo)
                     </Button>
-                    <Button variant="outline" size="icon" onClick={() => setIsFilterOpen(true)} className={darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}>
-                        <Filter size={20} />
+                )}
+            </div>
+            <p className="text-xs text-muted-foreground">{subtext}</p>
+        </CardContent>
+    </Card>
+);
+
+// Daily Challenge component
+const DailyChallenge = ({ onComplete }) => {
+    const [completed, setCompleted] = useState(false);
+
+    const handleComplete = useCallback(() => {
+        setCompleted(true);
+        onComplete();
+    }, [onComplete]);
+
+    return (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Sparkles className="h-5 w-5 text-yellow-500" /> Daily Challenge
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <p className="mb-4">Review 20 cards in under 10 minutes</p>
+                {!completed ? (
+                    <Button onClick={handleComplete} className="w-full">
+                        Complete Challenge
                     </Button>
-                </div>
+                ) : (
+                    <Badge variant="success">Completed</Badge>
+                )}
+            </CardContent>
+        </Card>
+    );
+};
 
-                {/* Bulk Actions */}
-                <div className="mb-4 flex items-center space-x-2">
-                    <Checkbox
-                        checked={selectedCards.length === filteredFlashcards.length}
-                        onCheckedChange={() => selectAllCards(filteredFlashcards, selectedCards, setSelectedCards)}
-                        className={darkMode ? 'border-gray-600' : ''}
-                    />
-                    <span>Select All</span>
-                    {selectedCards.length > 0 && (
-                        <>
-                            <span>{selectedCards.length} cards selected</span>
-                            <Button onClick={() => handleBulkAction('delete', selectedCards, flashcards, setFlashcards, setSelectedCards)} variant="destructive">Delete Selected</Button>
-                            <Button onClick={() => handleBulkAction('export', selectedCards, flashcards, setFlashcards, setSelectedCards)}>Export Selected</Button>
-                        </>
-                    )}
+// Learning Path Progress component
+const LearningPathProgress = () => {
+    const [currentLevel, setCurrentLevel] = useState(3);
+    const totalLevels = 10;
+
+    return (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <TrendingUp className="h-5 w-5 text-green-500" /> Learning Path Progress
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="space-y-2">
+                    <div className="flex justify-between">
+                        <span>Level {currentLevel}</span>
+                        <span>{currentLevel}/{totalLevels}</span>
+                    </div>
+                    <Progress value={(currentLevel / totalLevels) * 100} className="w-full" />
                 </div>
+            </CardContent>
+        </Card>
+    );
+};
 
-                {/* Flashcard Display */}
-                <Tabs value={viewMode} onValueChange={setViewMode} className="mb-6">
-                    <TabsList className={darkMode ? 'bg-gray-800' : ''}>
-                        <TabsTrigger value="grid" className={darkMode ? 'data-[state=active]:bg-gray-700' : ''}>Grid View</TabsTrigger>
-                        <TabsTrigger value="list" className={darkMode ? 'data-[state=active]:bg-gray-700' : ''}>List View</TabsTrigger>
-                    </TabsList>
-                </Tabs>
+// Study Reminder component
+const StudyReminder = () => {
+    const [reminderTime, setReminderTime] = useState(20);
+    const { toast } = useToast();
 
-                <div className={`grid gap-4 ${viewMode === 'grid' ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' : 'grid-cols-1'}`}>
-                    {filteredFlashcards.map((card) => (
-                        <Card key={card.id} className={`flex flex-col ${darkMode ? 'bg-gray-800 border-gray-700' : ''} ${selectedCards.includes(card.id) ? 'ring-2 ring-primary' : ''}`}>
-                            <CardContent className="flex-1 p-4">
-                                <div className="flex justify-between items-start mb-2">
-                                    <div className="flex items-center">
-                                        <Checkbox
-                                            checked={selectedCards.includes(card.id)}
-                                            onCheckedChange={() => toggleCardSelection(card.id, selectedCards, setSelectedCards)}
-                                            className={`mr-2 ${darkMode ? 'border-gray-600' : ''}`}
-                                        />
-                                        <h3 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>{card.word}</h3>
-                                    </div>
-                                    <div className="flex space-x-1">
-                                        <Button variant="ghost" size="icon">
-                                            <Star size={16} className={darkMode ? 'text-yellow-400' : 'text-yellow-500'} />
-                                        </Button>
-                                        <Button variant="ghost" size="icon" onClick={() => pronounceWord(card.word)}>
-                                            <Volume2 size={16} className={darkMode ? 'text-blue-400' : 'text-blue-500'} />
-                                        </Button>
-                                    </div>
-                                </div>
-                                <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'} mb-2`}>{card.translation}</p>
-                                <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-2`}>Category: {card.category}</p>
-                                <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-2`}>Last Reviewed: {card.lastReviewed || 'Never'}</p>
-                                <div className="flex justify-between items-center">
-                                    <Select value={card.status} onValueChange={(value) => updateCardStatus(card.id, value, setFlashcards)}>
-                                        <SelectTrigger className={`w-[120px] ${darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}`}>
-                                            <SelectValue placeholder="Status" />
-                                        </SelectTrigger>
-                                        <SelectContent className={darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
-                                            {STATUSES.filter(status => status !== 'All').map(status => (
-                                                <SelectItem key={status} value={status}>{status}</SelectItem>
-                                            ))}
-                                        </SelectContent>
-                                    </Select>
-                                    <div className="flex space-x-1">
-                                        <Button variant="ghost" size="icon" onClick={() => setEditingCard(card)}>
-                                            <Edit2 size={16} className={darkMode ? 'text-gray-300' : 'text-gray-600'} />
-                                        </Button>
-                                        <Button variant="ghost" size="icon" onClick={() => deleteCard(card.id, setFlashcards)}>
-                                            <Trash2 size={16} className={darkMode ? 'text-red-400' : 'text-red-500'} />
-                                        </Button>
-                                    </div>
-                                </div>
-                            </CardContent>
-                        </Card>
-                    ))}
+    const handleSetReminder = useCallback(() => {
+        toast({
+            title: "Reminder Set",
+            description: `Your study reminder is set for ${reminderTime}:00.`,
+        });
+    }, [reminderTime, toast]);
+
+    return (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Clock className="h-5 w-5 text-indigo-500" /> Study Reminder
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="space-y-4">
+                    <div className="flex items-center space-x-4">
+                        <Switch
+                            id="reminder-toggle"
+                            checked={reminderTime > 0}
+                            onCheckedChange={() => setReminderTime(prev => (prev > 0 ? 0 : 20))}
+                        />
+                        <Label htmlFor="reminder-toggle" className="text-lg text-gray-700">Toggle Reminder</Label>
+                    </div>
+                    <div className="flex items-center space-x-2">
+                        <Slider
+                            value={[reminderTime]}
+                            onValueChange={(value) => setReminderTime(value[0])}
+                            max={23}
+                            step={1}
+                        />
+                        <span>{reminderTime}:00</span>
+                    </div>
+                    <Button onClick={handleSetReminder}>Set Reminder</Button>
                 </div>
+            </CardContent>
+        </Card>
+    );
+};
+
+// Main UserDashboard component
+export default function UserDashboard() {
+    const [progress, setProgress] = useState(0);
+    const [streakDays, setStreakDays] = useState(0);
+    const [heatmapView, setHeatmapView] = useState('month');
+    const [currentMonth, setCurrentMonth] = useState(new Date());
+    const [activeTab, setActiveTab] = useState('progress');
+    const [showAchievement, setShowAchievement] = useState(false);
+    const [xp, setXp] = useState(0);
+    const [showDuelModal, setShowDuelModal] = useState(false);
+    const [duelOpponent, setDuelOpponent] = useState(null);
+    const userName = 'Alice'; // Replace with actual user name
+    const activityData = useMemo(() => generateActivityData(), []);
+    const { toast } = useToast();
 
-                {/* Add New Flashcard Button */}
-                <Button className={`fixed bottom-8 right-8 rounded-full shadow-lg ${darkMode ? 'bg-blue-600 hover:bg-blue-700' : ''}`} onClick={() => setIsAddingCard(true)}>
-                    <Plus size={24} className="mr-2" />
-                    Add New Flashcard
-                </Button>
+    useEffect(() => {
+        const timer = setTimeout(() => setProgress(78), 500);
+        return () => clearTimeout(timer);
+    }, []);
+
+    useEffect(() => {
+        setStreakDays(5);
+
+        if (streakDays === 5) {
+            confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } });
+            setShowAchievement(true);
+        }
+    }, [streakDays]);
+
+    const getHeatmapData = useCallback(() => {
+        const today = new Date();
+        const oneYearAgo = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate());
+        return activityData.filter(d => {
+            const date = new Date(d.date);
+            return date >= oneYearAgo && date <= today &&
+                (heatmapView === 'year' || (heatmapView === 'month' && isSameMonth(date, currentMonth) && isSameYear(date, currentMonth)));
+        });
+    }, [activityData, heatmapView, currentMonth]);
+
+    const handlePrevMonth = useCallback(() => {
+        setCurrentMonth(prevMonth => subMonths(prevMonth, 1));
+    }, []);
+
+    const handleNextMonth = useCallback(() => {
+        setCurrentMonth(prevMonth => addMonths(prevMonth, 1));
+    }, []);
+
+    const handleStreakIncrement = useCallback(() => {
+        setStreakDays(s => s + 1);
+        toast({
+            title: "Streak Increased!",
+            description: `You're on a ${streakDays + 1} day streak. Keep it up!`,
+        });
+    }, [streakDays, toast]);
+
+    const handleChallengeComplete = useCallback(() => {
+        setXp(prevXp => prevXp + 50);
+        confetti({ particleCount: 50, spread: 60, origin: { y: 0.8 } });
+        toast({
+            title: "Challenge Completed!",
+            description: "You've earned 50 XP. Great job!",
+        });
+    }, [toast]);
+
+    const renderHeaderSection = () => (
+        <motion.div
+            className="flex items-center justify-between"
+            initial={{ opacity: 0, y: -20 }}
+            animate={{ opacity: 1, y: 0 }}
+            transition={{ duration: 0.5 }}
+        >
+            <h1 className="text-3xl font-bold flex items-center gap-2">
+                <Brain className="w-8 h-8 text-primary" aria-hidden="true" /> Welcome back, {userName}!
+            </h1>
+            <div className="flex items-center gap-4">
+                <Badge variant="outline" className="px-3 py-1">
+                    <Target className="w-4 h-4 mr-2" /> Level 5 Learner
+                </Badge>
+                <Badge variant="secondary" className="px-3 py-1">
+                    <Sparkles className="w-4 h-4 mr-2" /> {xp} XP
+                </Badge>
+                <Avatar>
+                    <AvatarImage src="/placeholder.svg?height=40&width=40" alt={userName} />
+                    <AvatarFallback>{userName.charAt(0)}</AvatarFallback>
+                </Avatar>
             </div>
+        </motion.div>
+    );
 
-            {/* Right Sidebar */}
-            <div className={`w-80 ${darkMode ? 'bg-gray-800 border-l border-gray-700' : 'bg-white'} p-4 shadow-md overflow-y-auto`}>
-                <h2 className="text-xl font-bold mb-4">Deck Statistics</h2>
-                <div className="grid grid-cols-2 gap-4 mb-6">
-                    <div className={`${darkMode ? 'bg-gray-700' : 'bg-gray-100'} p-3 rounded`}>
-                        <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Total Cards</p>
-                        <p className="text-2xl font-bold">{stats.total}</p>
+    const renderAchievementNotification = () => (
+        <AnimatePresence mode="wait">
+            {showAchievement && (
+                <motion.div
+                    initial={{ opacity: 0, y: -50 }}
+                    animate={{ opacity: 1, y: 0 }}
+                    exit={{ opacity: 0, y: -50 }}
+                    className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded"
+                    role="alert"
+                >
+                    <div className="flex items-center">
+                        <Award className="h-6 w-6 text-yellow-500" />
+                        <p className="font-semibold">Achievement Unlocked: 5-Day Streak!</p>
                     </div>
-                    <div className={`${darkMode ? 'bg-blue-900' : 'bg-blue-100'} p-3 rounded`}>
-                        <p className={`text-sm ${darkMode ? 'text-blue-300' : 'text-blue-600'}`}>New</p>
-                        <p className="text-2xl font-bold">{stats.new}</p>
+                    <p className="text-sm">Keep up the great work! You're on fire!</p>
+                    <button
+                        onClick={() => setShowAchievement(false)}
+                        className="absolute top-0 right-0 mt-2 mr-2 text-green-700 hover:text-green-900"
+                    >
+                        &times;
+                    </button>
+                </motion.div>
+            )}
+        </AnimatePresence>
+    );
+
+    const renderStatCards = () => (
+        <motion.div
+            className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4"
+            initial={{ opacity: 0 }}
+            animate={{ opacity: 1 }}
+            transition={{ duration: 0.5, delay: 0.2 }}
+        >
+            <Card>
+                <CardHeader className="flex flex-row items-center justify-between pb-2">
+                    <CardTitle className="text-sm font-medium">Weekly Goal</CardTitle>
+                    <Trophy className="h-4 w-4 text-yellow-500" aria-hidden="true" />
+                </CardHeader>
+                <CardContent>
+                    <div className="space-y-2">
+                        <Progress value={progress} className="w-full" />
+                        <div className="flex items-center justify-between">
+                            <p className="text-2xl font-bold">{progress}%</p>
+                            <p className="text-xs text-muted-foreground">78 of 100 cards</p>
+                        </div>
                     </div>
-                    <div className={`${darkMode ? 'bg-yellow-900' : 'bg-yellow-100'} p-3 rounded`}>
-                        <p className={`text-sm ${darkMode ? 'text-yellow-300' : 'text-yellow-600'}`}>Learning</p>
-                        <p className="text-2xl font-bold">{stats.learning}</p>
+                </CardContent>
+            </Card>
+            <StatCard
+                title="Streak"
+                icon={Flame}
+                value={`${streakDays} days`}
+                color="orange"
+                onClick={handleStreakIncrement}
+            />
+            <StatCard
+                title="Cards Created"
+                icon={Brain}
+                value="142"
+                subtext="total cards"
+                color="purple"
+            />
+            <StatCard
+                title="Learning Speed"
+                icon={Zap}
+                value="Fast"
+                subtext="10 cards/day avg"
+                color="yellow"
+            />
+        </motion.div>
+    );
+
+
+    const renderLearningAnalytics = () => (
+        <Card className="md:col-span-2">
+            <CardHeader>
+                <CardTitle>Learning Analytics</CardTitle>
+            </CardHeader>
+            <CardContent>
+                <Tabs value={activeTab} onValueChange={setActiveTab}>
+                    <TabsList>
+                        <TabsTrigger value="progress">Weekly Progress</TabsTrigger>
+                        <TabsTrigger value="time">Study Time</TabsTrigger>
+                        <TabsTrigger value="retention">Retention</TabsTrigger>
+                    </TabsList>
+                    <TabsContent value="progress">
+                        <div className="h-[300px]">
+                            <ResponsiveContainer width="100%" height="100%">
+                                <BarChart data={weeklyProgress}>
+                                    <XAxis dataKey="name" />
+                                    <YAxis />
+                                    <RechartsTooltip />
+                                    <Bar dataKey="cards" fill="#3b82f6" radius={[4, 4, 0, 0]} label={{ position: 'top', fill: '#6b7280', fontSize: 12 }} />
+                                </BarChart>
+                            </ResponsiveContainer>
+                        </div>
+                    </TabsContent>
+                    <TabsContent value="time">
+                        <div className="h-[300px]">
+                            <ResponsiveContainer width="100%" height="100%">
+                                <PieChart>
+                                    <Pie
+                                        data={studyTimeData}
+                                        cx="50%"
+                                        cy="50%"
+                                        labelLine={false}
+                                        outerRadius={80}
+                                        fill="#8884d8"
+                                        dataKey="value"
+                                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
+                                    >
+                                        {studyTimeData.map((entry, index) => (
+                                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
+                                        ))}
+                                    </Pie>
+                                    <RechartsTooltip />
+                                </PieChart>
+                            </ResponsiveContainer>
+                        </div>
+                    </TabsContent>
+                    <TabsContent value="retention">
+                        <div className="h-[300px]">
+                            <ResponsiveContainer width="100%" height="100%">
+                                <LineChart data={retentionData}>
+                                    <XAxis dataKey="day" />
+                                    <YAxis />
+                                    <RechartsTooltip />
+                                    <Line type="monotone" dataKey="retention" stroke="#8884d8" />
+                                </LineChart>
+                            </ResponsiveContainer>
+                        </div>
+                    </TabsContent>
+                </Tabs>
+            </CardContent>
+        </Card>
+    );
+
+    const renderActivityHeatmap = () => (
+        <Card className="md:col-span-2">
+            <CardHeader>
+                <div className="flex items-center justify-between">
+                    <CardTitle className="flex items-center gap-2">
+                        <CalendarIcon className="h-6 w-6" aria-hidden="true" /> Activity Heatmap
+                    </CardTitle>
+                    <div className="flex items-center gap-2">
+                        <Select value={heatmapView} onValueChange={setHeatmapView}>
+                            <SelectTrigger className="w-[180px]">
+                                <SelectValue placeholder="Select view" />
+                            </SelectTrigger>
+                            <SelectContent>
+                                <SelectItem value="month">Month View</SelectItem>
+                                <SelectItem value="year">Year View</SelectItem>
+                            </SelectContent>
+                        </Select>
+                        <TooltipProvider>
+                            <Tooltip>
+                                <TooltipTrigger asChild>
+                                    <Button variant="ghost" size="icon" aria-label="Heatmap Info">
+                                        <Info className="h-4 w-4" />
+                                    </Button>
+                                </TooltipTrigger>
+                                <TooltipContent>
+                                    <p>Colors indicate activity level:</p>
+                                    <ul className="list-disc list-inside">
+                                        <li>Green: High (8-10 cards)</li>
+                                        <li>Yellow: Medium (4-7 cards)</li>
+                                        <li>Orange: Low (1-3 cards)</li>
+                                    </ul>
+                                </TooltipContent>
+                            </Tooltip>
+                        </TooltipProvider>
                     </div>
-                    <div className={`${darkMode ? 'bg-green-900' : 'bg-green-100'} p-3 rounded`}>
-                        <p className={`text-sm ${darkMode ? 'text-green-300' : 'text-green-600'}`}>Mastered</p>
-                        <p className="text-2xl font-bold">{stats.mastered}</p>
+                </div>
+            </CardHeader>
+            <CardContent>
+                <div className="h-[240px] overflow-y-auto">
+                    <div className="flex items-center justify-between mb-4">
+                        <Button onClick={handlePrevMonth} variant="outline" size="icon" aria-label="Previous month">
+                            <ChevronLeft className="h-4 w-4" />
+                        </Button>
+                        <h2 className="text-lg font-semibold">{format(currentMonth, 'MMMM yyyy')}</h2>
+                        <Button onClick={handleNextMonth} variant="outline" size="icon" aria-label="Next month">
+                            <ChevronRight className="h-4 w-4" />
+                        </Button>
                     </div>
+                    <AnimatePresence mode="wait">
+                        <motion.div
+                            key={currentMonth.toISOString()}
+                            initial={{ opacity: 0 }}
+                            animate={{ opacity: 1 }}
+                            exit={{ opacity: 0 }}
+                            transition={{ duration: 0.3 }}
+                        >
+                            <Calendar
+                                mode="multiple"
+                                selected={getHeatmapData().map(d => new Date(d.date))}
+                                month={currentMonth}
+                                className="rounded-md border"
+                                modifiers={{
+                                    high: (date) => {
+                                        const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));
+                                        return activity ? activity.count > 7 : false;
+                                    },
+                                    medium: (date) => {
+                                        const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));
+                                        return activity ? activity.count > 3 && activity.count <= 7 : false;
+                                    },
+                                    low: (date) => {
+                                        const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));
+                                        return activity ? activity.count > 0 && activity.count <= 3 : false;
+                                    },
+                                }}
+                                modifiersStyles={{
+                                    high: { backgroundColor: 'rgba(34, 197, 94, 0.9)' },
+                                    medium: { backgroundColor: 'rgba(234, 179, 8, 0.9)' },
+                                    low: { backgroundColor: 'rgba(249, 115, 22, 0.9)' },
+                                }}
+                            />
+                        </motion.div>
+                    </AnimatePresence>
                 </div>
+            </CardContent>
+        </Card>
+    );
 
-                <h3 className="font-semibold mb-2">Progress</h3>
-                <Progress value={(stats.mastered / stats.total) * 100} className={`mb-4 ${darkMode ? 'bg-gray-700' : ''}`} />
-                <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'} mb-6`}>{Math.round((stats.mastered / stats.total) * 100)}% of flashcards mastered</p>
-
-                <h3 className="font-semibold mb-2">Categories</h3>
-                <div className="space-y-2 mb-4">
-                    {categories.map(category => (
-                        <Badge
-                            key={category}
-                            variant={selectedCategories.includes(category) ? "default" : "outline"}
-                            className={`cursor-pointer mr-2 mb-2 ${darkMode ? 'hover:bg-gray-700 text-white' : 'hover:bg-gray-100'}`}
-                            onClick={() => toggleCategory(category, selectedCategories, setSelectedCategories)}
-                        >
-                            {category}
-                        </Badge>
+    const renderDailyInspiration = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Quote className="h-6 w-6 text-purple-500" /> Daily Inspiration
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <motion.p
+                    className="text-lg font-semibold text-center"
+                    initial={{ opacity: 0 }}
+                    animate={{ opacity: 1 }}
+                    transition={{ delay: 0.5 }}
+                >
+                    "The capacity to learn is a gift; the ability to learn is a skill; the willingness to learn is a choice." - Brian Herbert
+                </motion.p>
+            </CardContent>
+        </Card>
+    );
+
+    const renderUpcomingReviews = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <BookOpen className="h-5 w-5 text-green-500" /> Upcoming Reviews
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <ul className="space-y-2">
+                    {Array.from({ length: 5 }, (_, index) => (
+                        <li key={index} className="flex items-center justify-between">
+                            <span>{format(addDays(new Date(), index + 1), 'MMM dd')}</span>
+                            <Badge>{Math.floor(Math.random() * 20) + 5} cards</Badge>
+                        </li>
                     ))}
-                </div>
-                <div className="flex space-x-2">
-                    <Input
-                        type="text"
-                        placeholder="New category"
-                        value={newCategory}
-                        onChange={(e) => setNewCategory(e.target.value)}
-                        className={darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}
-                    />
-                    <Button onClick={() => addCategory(newCategory, categories, setFlashcards)}>Add</Button>
-                </div>
-            </div>
+                </ul>
+            </CardContent>
+        </Card>
+    );
 
-            {/* Edit/Add Card Dialog */}
-            <Dialog open={editingCard !== null || isAddingCard} onOpenChange={() => { setEditingCard(null); setIsAddingCard(false); }}>
-                <DialogContent className={darkMode ? 'bg-gray-800 text-white' : ''}>
-                    <DialogHeader>
-                        <DialogTitle>{isAddingCard ? 'Add New Flashcard' : 'Edit Flashcard'}</DialogTitle>
-                    </DialogHeader>
-                    <form onSubmit={(e) => {
-                        e.preventDefault();
-                        const formData = new FormData(e.target);
-                        const card = Object.fromEntries(formData.entries());
-                        saveCard(card, isAddingCard, setFlashcards, setIsAddingCard, setEditingCard);
-                    }}>
-                        <div className="grid gap-4 py-4">
-                            <div className="grid grid-cols-4 items-center gap-4">
-                                <Label htmlFor="word" className="text-right">
-                                    Word
-                                </Label>
-                                <Input id="word" name="word" defaultValue={editingCard?.word || ''} className={`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`} />
-                            </div>
-                            <div className="grid grid-cols-4 items-center gap-4">
-                                <Label htmlFor="translation" className="text-right">
-                                    Translation
-                                </Label>
-                                <Input id="translation" name="translation" defaultValue={editingCard?.translation || ''} className={`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`} />
-                            </div>
-                            <div className="grid grid-cols-4 items-center gap-4">
-                                <Label htmlFor="category" className="text-right">
-                                    Category
-                                </Label>
-                                <Select defaultValue={editingCard?.category || categories[1]} name="category">
-                                    <SelectTrigger className={`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>
-                                        <SelectValue placeholder="Select category" />
-                                    </SelectTrigger>
-                                    <SelectContent className={darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
-                                        {categories.filter(cat => cat !== 'All').map(category => (
-                                            <SelectItem key={category} value={category}>{category}</SelectItem>
-                                        ))}
-                                    </SelectContent>
-                                </Select>
-                            </div>
-                            <div className="grid grid-cols-4 items-center gap-4">
-                                <Label htmlFor="status" className="text-right">
-                                    Status
-                                </Label>
-                                <Select defaultValue={editingCard?.status || 'New'} name="status">
-                                    <SelectTrigger className={`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>
-                                        <SelectValue placeholder="Select status" />
-                                    </SelectTrigger>
-                                    <SelectContent className={darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
-                                        {STATUSES.filter(status => status !== 'All').map(status => (
-                                            <SelectItem key={status} value={status}>{status}</SelectItem>
-                                        ))}
-                                    </SelectContent>
-                                </Select>
-                            </div>
-                            <div className="grid grid-cols-4 items-center gap-4">
-                                <Label htmlFor="notes" className="text-right">
-                                    Notes
-                                </Label>
-                                <Textarea id="notes" name="notes" defaultValue={editingCard?.notes || ''} className={`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`} />
-                            </div>
-                        </div>
-                        <DialogTrigger asChild>
-                            <Button type="submit" className={darkMode ? 'bg-blue-600 hover:bg-blue-700' : ''}>{isAddingCard ? 'Add Card' : 'Save Changes'}</Button>
-                        </DialogTrigger>
-                    </form>
-                </DialogContent>
-            </Dialog>
-
-            {/* Settings Dialog */}
-            <Dialog open={isSettingsOpen} onOpenChange={setIsSettingsOpen}>
-                <DialogContent className={darkMode ? 'bg-gray-800 text-white' : ''}>
-                    <DialogHeader>
-                        <DialogTitle>Settings</DialogTitle>
-                    </DialogHeader>
-                    <div className="py-4">
-                        <div className="flex items-center justify-between mb-4">
-                            <span className="text-sm">Dark Mode</span>
-                            <Switch checked={darkMode} onCheckedChange={setDarkMode} />
+    const renderStudyTips = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Lightbulb className="h-5 w-5 text-yellow-500" /> Study Tips
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <ul className="list-disc list-inside space-y-2 text-sm">
+                    <li>Review cards regularly to reinforce learning</li>
+                    <li>Use mnemonics for difficult concepts</li>
+                    <li>Take short breaks to improve focus</li>
+                    <li>Explain concepts to others to solidify understanding</li>
+                </ul>
+            </CardContent>
+        </Card>
+    );
+
+    const renderUserProgress = () => (
+        <Card className="mt-8">
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    <Hexagon className="h-6 w-6 text-blue-500" /> Your Progress
+                </CardTitle>
+            </CardHeader>
+            <CardContent>
+                <div className="flex justify-between items-center space-x-6">
+                    <div>
+                        <h3 className="text-xl font-semibold">Current Rank: Gold</h3>
+                        <p className="text-muted-foreground">Keep going! You're doing great!</p>
+                    </div>
+                    <Button variant="outline">View Detailed Stats</Button>
+                </div>
+                <div className="space-y-4 mt-4">
+                    <div>
+                        <div className="flex justify-between text-sm mb-1">
+                            <span>XP to next level</span>
+                            <span>750 / 1000</span>
                         </div>
-                        <div className="flex items-center justify-between mb-4">
-                            <span className="text-sm">Font Size</span>
-                            <Select value={fontSize} onValueChange={setFontSize}>
-                                <SelectTrigger className={`w-[120px] ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>
-                                    <SelectValue placeholder="Font size" />
-                                </SelectTrigger>
-                                <SelectContent className={darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
-                                    {FONT_SIZES.map(size => (
-                                        <SelectItem key={size} value={size}>{size}</SelectItem>
-                                    ))}
-                                </SelectContent>
-                            </Select>
+                        <Progress value={75} className="w-full h-2" />
+                    </div>
+                    <div>
+                        <div className="flex justify-between text-sm mb-1">
+                            <span>Daily goal progress</span>
+                            <span>4 / 5 sessions</span>
                         </div>
+                        <Progress value={80} className="w-full h-2" />
+                    </div>
+                </div>
+            </CardContent>
+        </Card>
+    );
+
+    const renderDuelModal = () => (
+        showDuelModal && duelOpponent && (
+            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
+                <Card className="w-96">
+                    <CardHeader>
+                        <CardTitle className="flex items-center gap-2">
+                            <Swords className="h-6 w-6 text-red-500" /> Learning Duel
+                        </CardTitle>
+                    </CardHeader>
+                    <CardContent>
+                        <p className="mb-4">Challenge {duelOpponent.name} to a learning duel!</p>
                         <div className="flex items-center justify-between mb-4">
-                            <span className="text-sm">Review Interval (days)</span>
-                            <Input
-                                type="number"
-                                value={reviewInterval}
-                                onChange={(e) => setReviewInterval(e.target.value)}
-                                className={`w-20 text-right ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}
-                                min="1"
-                                max="30"
-                            />
+                            <Avatar>
+                                <AvatarImage src="/placeholder.svg?height=40&width=40" alt="Your Avatar" />
+                                <AvatarFallback>You</AvatarFallback>
+                            </Avatar>
+                            <Swords className="h-8 w-8 text-red-500" />
+                            <Avatar>
+                                <AvatarImage src={duelOpponent.avatar} alt={duelOpponent.name} />
+                                <AvatarFallback>{duelOpponent.name.charAt(0)}</AvatarFallback>
+                            </Avatar>
                         </div>
-                    </div>
-                </DialogContent>
-            </Dialog>
-
-            {/* Filter Dialog */}
-            <Dialog open={isFilterOpen} onOpenChange={setIsFilterOpen}>
-                <DialogContent className={darkMode ? 'bg-gray-800 text-white' : ''}>
-                    <DialogHeader>
-                        <DialogTitle>Filter Flashcards</DialogTitle>
-                    </DialogHeader>
-                    <div className="py-4">
-                        <h3 className="font-semibold mb-2">Categories</h3>
-                        <div className="space-y-2 mb-4">
-                            {categories.map(category => (
-                                <div key={category} className="flex items-center">
-                                    <Checkbox
-                                        id={`category-${category}`}
-                                        checked={selectedCategories.includes(category)}
-                                        onCheckedChange={() => toggleCategory(category, selectedCategories, setSelectedCategories)}
-                                        className={`mr-2 ${darkMode ? 'border-gray-600' : ''}`}
-                                    />
-                                    <Label htmlFor={`category-${category}`}>{category}</Label>
-                                </div>
-                            ))}
+                        <div className="space-y-2">
+                            <Button className="w-full" onClick={() => setShowDuelModal(false)}>
+                                Start Duel
+                            </Button>
+                            <Button className="w-full" variant="outline" onClick={() => setShowDuelModal(false)}>
+                                Cancel
+                            </Button>
                         </div>
-                        <h3 className="font-semibold mb-2">Status</h3>
-                        <Select value={selectedStatus} onValueChange={setSelectedStatus}>
-                            <SelectTrigger className={`w-full ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>
-                                <SelectValue placeholder="Select status" />
-                            </SelectTrigger>
-                            <SelectContent className={darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
-                                {STATUSES.map(status => (
-                                    <SelectItem key={status} value={status}>{status}</SelectItem>
-                                ))}
-                            </SelectContent>
-                        </Select>
-                    </div>
-                </DialogContent>
-            </Dialog>
+                    </CardContent>
+                </Card>
+            </div>
+        )
+    );
+
+    return (
+        <div className="container mx-auto p-4 space-y-6">
+            {renderHeaderSection()}
+            {renderAchievementNotification()}
+            {renderStatCards()}
+            <motion.div
+                className="grid gap-4 md:grid-cols-3"
+                initial={{ opacity: 0 }}
+                animate={{ opacity: 1 }}
+                transition={{ duration: 0.5, delay: 0.4 }}
+            >
+                {renderLearningAnalytics()}
+                <div className="space-y-4">
+                    <DailyChallenge onComplete={handleChallengeComplete} />
+                    <LearningPathProgress />
+                    <StudyReminder />
+                </div>
+            </motion.div>
+            {renderActivityHeatmap()}
+            {renderDailyInspiration()}
+            {renderUpcomingReviews()}
+            {renderStudyTips()}
+            {renderUserProgress()}
+            {renderDuelModal()}
         </div>
-    )
+    );
 }
\ No newline at end of file
diff --git a/app/providers/Providers.tsx b/app/providers/Providers.tsx
new file mode 100644
index 0000000..b6be07e
--- /dev/null
+++ b/app/providers/Providers.tsx
@@ -0,0 +1,13 @@
+
+'use client'
+import { SessionProvider } from 'next-auth/react'
+import { Provider } from 'react-redux'
+import { store } from '@/app/store'
+
+export function Providers({ children }: { children: React.ReactNode }) {
+  return (
+    <SessionProvider>
+      <Provider store={store}>{children}</Provider>
+    </SessionProvider>
+  )
+}
diff --git a/app/slices/fileSlice.ts b/app/slices/fileSlice.ts
index 246eb68..b6d3023 100644
--- a/app/slices/fileSlice.ts
+++ b/app/slices/fileSlice.ts
@@ -1,30 +1,32 @@
 import { createSlice, PayloadAction } from '@reduxjs/toolkit';
-
+                         
+interface RecentFile {
+  name: string;
+  progress: number;
+}
+                         
 interface FileState {
-    currentFile: File | null;
-    recentFiles: Array<{ name: string; progress: number }>;
+  currentFile: File | null;
+  recentFiles: RecentFile[];
 }
-
+                         
 const initialState: FileState = {
-    currentFile: null,
-    recentFiles: [],
+  currentFile: null,
+  recentFiles: [],
 };
-
+                         
 const fileSlice = createSlice({
-    name: 'file',
-    initialState,
-    reducers: {
-        setCurrentFile: (state, action: PayloadAction<File | null>) => {
-            state.currentFile = action.payload;
-        },
-        addRecentFile: (state, action: PayloadAction<{ name: string; progress: number }>) => {
-            state.recentFiles = [
-                action.payload,
-                ...state.recentFiles.filter(f => f.name !== action.payload.name).slice(0, 4)
-            ];
-        },
+  name: 'file',
+  initialState,
+  reducers: {
+    setCurrentFile: (state, action: PayloadAction<File | null>) => {
+      state.currentFile = action.payload;
+    },
+    addRecentFile: (state, action: PayloadAction<RecentFile>) => {
+      state.recentFiles = [action.payload, ...state.recentFiles.filter(f => f.name !== action.payload.name)].slice(0, 5);
     },
+  },
 });
-
+                                 
 export const { setCurrentFile, addRecentFile } = fileSlice.actions;
-export default fileSlice.reducer;
\ No newline at end of file
+export default fileSlice.reducer;
diff --git a/app/slices/flashcardsSlice.ts b/app/slices/flashcardsSlice.ts
index 99ac586..e0009ba 100644
--- a/app/slices/flashcardsSlice.ts
+++ b/app/slices/flashcardsSlice.ts
@@ -1,28 +1,28 @@
-import { createSlice, PayloadAction } from '@reduxjs/toolkit';
+import { createSlice, PayloadAction } from '@reduxjs/toolkit'
 
 interface Flashcard {
-    id?: string;
-    question: string;
-    answer: string;
+  id: number;
+  question: string;
+  answer: string;
 }
 
-const initialState: Flashcard[] = [];
+const initialState: Flashcard[] = []
 
 const flashcardsSlice = createSlice({
-    name: 'flashcards',
-    initialState,
-    reducers: {
-        addFlashcard: (state, action: PayloadAction<Flashcard>) => {
-            state.push(action.payload);
-        },
-        removeFlashcard: (state, action: PayloadAction<number>) => {
-            state.splice(action.payload, 1);
-        },
-        clearFlashcards: (state) => {
-            return [];
-        },
+  name: 'flashcards',
+  initialState,
+  reducers: {
+    addFlashcard: (state, action: PayloadAction<Flashcard>) => {
+      state.push(action.payload)
     },
-});
+    removeFlashcard: (state, action: PayloadAction<number>) => {
+      state.splice(action.payload, 1)
+    },
+    clearFlashcards: (state) => {
+      return []
+    },
+  },
+})
 
-export const { addFlashcard, removeFlashcard, clearFlashcards } = flashcardsSlice.actions;
-export default flashcardsSlice.reducer;
\ No newline at end of file
+export const { addFlashcard, removeFlashcard, clearFlashcards } = flashcardsSlice.actions
+export default flashcardsSlice.reducer
diff --git a/app/slices/languageCardsSlice.ts b/app/slices/languageCardsSlice.ts
index 96006da..1762633 100644
--- a/app/slices/languageCardsSlice.ts
+++ b/app/slices/languageCardsSlice.ts
@@ -1,30 +1,30 @@
-import { createSlice, PayloadAction } from '@reduxjs/toolkit';
+import { createSlice, PayloadAction } from '@reduxjs/toolkit'
 
 interface LanguageCard {
-    id?: string;
-    word: string;
-    translation: string;
-    example: string;
-    explanation: string;
+  id: number;
+  word: string;
+  translation: string;
+  example: string;
+  explanation: string;
 }
 
-const initialState: LanguageCard[] = [];
+const initialState: LanguageCard[] = []
 
 const languageCardsSlice = createSlice({
-    name: 'languageCards',
-    initialState,
-    reducers: {
-        addLanguageCard: (state, action: PayloadAction<LanguageCard>) => {
-            state.push(action.payload);
-        },
-        removeLanguageCard: (state, action: PayloadAction<number>) => {
-            state.splice(action.payload, 1);
-        },
-        clearLanguageCards: (state) => {
-            return [];
-        },
+  name: 'languageCards',
+  initialState,
+  reducers: {
+    addLanguageCard: (state, action: PayloadAction<LanguageCard>) => {
+      state.push(action.payload)
     },
-});
+    removeLanguageCard: (state, action: PayloadAction<number>) => {
+      state.splice(action.payload, 1)
+    },
+    clearLanguageCards: (state) => {
+      return []
+    },
+  },
+})
 
-export const { addLanguageCard, removeLanguageCard, clearLanguageCards } = languageCardsSlice.actions;
-export default languageCardsSlice.reducer;
\ No newline at end of file
+export const { addLanguageCard, removeLanguageCard, clearLanguageCards } = languageCardsSlice.actions
+export default languageCardsSlice.reducer
diff --git a/app/slices/settingsSlice.ts b/app/slices/settingsSlice.ts
index 21e6873..b03fadd 100644
--- a/app/slices/settingsSlice.ts
+++ b/app/slices/settingsSlice.ts
@@ -1,37 +1,39 @@
 import { createSlice, PayloadAction } from '@reduxjs/toolkit';
 import { DEFAULT_PROMPTS, DEFAULT_MODEL } from '@/components/config';
 
+interface CustomPrompts {
+  flashcard: string;
+  explain: string;
+  language: string;
+}
+
 export interface SettingsState {
-    apiKey: string;
-    selectedModel: string;
-    customPrompts: {
-        flashcard: string;
-        explain: string;
-        language: string;
-    };
+  apiKey: string;
+  selectedModel: string;
+  customPrompts: CustomPrompts;
 }
 
 const initialState: SettingsState = {
-    apiKey: '',
-    selectedModel: DEFAULT_MODEL,
-    customPrompts: DEFAULT_PROMPTS,
+  apiKey: '',
+  selectedModel: DEFAULT_MODEL,
+  customPrompts: DEFAULT_PROMPTS,
 };
 
 const settingsSlice = createSlice({
-    name: 'settings',
-    initialState,
-    reducers: {
-        setApiKey: (state, action: PayloadAction<string>) => {
-            state.apiKey = action.payload;
-        },
-        setSelectedModel: (state, action: PayloadAction<string>) => {
-            state.selectedModel = action.payload;
-        },
-        setCustomPrompts: (state, action: PayloadAction<SettingsState['customPrompts']>) => {
-            state.customPrompts = action.payload;
-        },
+  name: 'settings',
+  initialState,
+  reducers: {
+    setApiKey: (state, action: PayloadAction<string>) => {
+      state.apiKey = action.payload;
+    },
+    setSelectedModel: (state, action: PayloadAction<string>) => {
+      state.selectedModel = action.payload;
+    },
+    setCustomPrompts: (state, action: PayloadAction<CustomPrompts>) => {
+      state.customPrompts = action.payload;
     },
+  },
 });
 
 export const { setApiKey, setSelectedModel, setCustomPrompts } = settingsSlice.actions;
-export default settingsSlice.reducer;
\ No newline at end of file
+export default settingsSlice.reducer;
diff --git a/app/slices/toastSlice.ts b/app/slices/toastSlice.ts
new file mode 100644
index 0000000..7108b87
--- /dev/null
+++ b/app/slices/toastSlice.ts
@@ -0,0 +1,35 @@
+import { createSlice, PayloadAction } from '@reduxjs/toolkit';
+
+interface ToastProps {
+  id: string;
+  title: string;
+  description?: string;
+  variant?: 'default' | 'destructive' | 'success';
+}
+
+interface ToastState {
+  toasts: ToastProps[];
+}
+
+const initialState: ToastState = {
+  toasts: [],
+};
+
+const toastSlice = createSlice({
+  name: 'toast',
+  initialState,
+  reducers: {
+    addToast: (state, action: PayloadAction<ToastProps>) => {
+      state.toasts.push(action.payload);
+    },
+    removeToast: (state, action: PayloadAction<string>) => {
+      state.toasts = state.toasts.filter(toast => toast.id !== action.payload);
+    },
+    clearToasts: (state) => {
+      state.toasts = [];
+    },
+  },
+});
+
+export const { addToast, removeToast, clearToasts } = toastSlice.actions;
+export default toastSlice.reducer;
diff --git a/app/store.ts b/app/store.ts
index 77fedfb..fb2efc9 100644
--- a/app/store.ts
+++ b/app/store.ts
@@ -1,23 +1,19 @@
-import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';
+import { configureStore } from '@reduxjs/toolkit';
 import flashcardsReducer from './slices/flashcardsSlice';
 import languageCardsReducer from './slices/languageCardsSlice';
 import settingsReducer from './slices/settingsSlice';
 import fileReducer from './slices/fileSlice';
 
 export const store = configureStore({
-    reducer: {
-        flashcards: flashcardsReducer,
-        languageCards: languageCardsReducer,
-        settings: settingsReducer,
-        file: fileReducer,
-    },
+  reducer: {
+    flashcards: flashcardsReducer,
+    languageCards: languageCardsReducer,
+    settings: settingsReducer,
+    file: fileReducer,
+  },
+  middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false }),
 });
 
 export type RootState = ReturnType<typeof store.getState>;
 export type AppDispatch = typeof store.dispatch;
-export type AppThunk<ReturnType = void> = ThunkAction<
-    ReturnType,
-    RootState,
-    unknown,
-    Action<string>
->;
\ No newline at end of file
+export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;
diff --git a/components/ClientRootLayout.tsx b/components/ClientRootLayout.tsx
deleted file mode 100644
index 770b33c..0000000
--- a/components/ClientRootLayout.tsx
+++ /dev/null
@@ -1,12 +0,0 @@
-'use client'
-
-import { Provider } from 'react-redux'
-import { store } from '@/app/store'
-
-export default function ClientRootLayout({ children }: { children: React.ReactNode }) {
-    return (
-        <Provider store={store}>
-            {children}
-        </Provider>
-    )
-}
\ No newline at end of file
diff --git a/components/MainInterface/EpubViewer.tsx b/components/MainInterface/EpubViewer.tsx
new file mode 100644
index 0000000..c9d50fd
--- /dev/null
+++ b/components/MainInterface/EpubViewer.tsx
@@ -0,0 +1,30 @@
+import React, { Suspense, lazy } from 'react';
+
+interface EpubViewerProps {
+  url: string;
+  location: string | number;
+  setLocation: (location: string) => void;
+}
+
+const LazyReactReader = lazy(() => import('react-reader'));
+
+const EpubViewer: React.FC<EpubViewerProps> = ({ url, location, setLocation }) => {
+  return (
+    <div style={{ height: '100%', position: 'relative' }}>
+      <Suspense fallback={<div>Loading EPUB...</div>}>
+        <LazyReactReader
+          url={url}
+          location={location}
+          locationChanged={(epubcfi: string) => setLocation(epubcfi)}
+          epubOptions={{
+            allowPopups: true,
+            allowScriptedContent: true,
+          }}
+          epubInitOptions={{ openAs: 'epub' }}
+        />
+      </Suspense>
+    </div>
+  );
+};
+
+export default EpubViewer;
diff --git a/components/MainInterface/FileViewer.tsx b/components/MainInterface/FileViewer.tsx
index b619e57..66897eb 100644
--- a/components/MainInterface/FileViewer.tsx
+++ b/components/MainInterface/FileViewer.tsx
@@ -1,13 +1,14 @@
-import React, { useState, useEffect, useCallback, useRef } from 'react';
-import { Upload } from 'lucide-react';
+import React, { useState, useEffect, useCallback, useRef, Suspense, lazy } from 'react';
+import { Button } from '@/components/ui/button';
 import { Input } from '@/components/ui/input';
 import { useToast } from '@/components/ui/use-toast';
-import { Viewer, Worker, SpecialZoomLevel } from '@react-pdf-viewer/core';
-import { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';
-import { ReactReader } from "react-reader";
+import { Upload } from 'lucide-react';
+
+const LazyReactReader = lazy(() => import('react-reader'));
+const LazyPDFViewer = lazy(() => import('./PDFViewer'));
 
-import '@react-pdf-viewer/core/lib/styles/index.css';
-import '@react-pdf-viewer/default-layout/lib/styles/index.css';
+const LazyReactReader = lazy(() => import('react-reader'));
+const LazyViewer = lazy(() => import('./PDFViewer'));
 
 interface FileViewerProps {
     currentFile: File | null;
@@ -74,155 +75,135 @@ const EpubViewer: React.FC<EpubViewerProps> = ({ url, location, setLocation }) =
 };
 
 // export const FileViewer: React.FC<FileViewerProps> = ({ currentFile, onFileUpload, onTextSelect, onWordDoubleClick }) => {
-export const FileViewer: React.FC<FileViewerProps> = ({ currentFile, onFileUpload, onTextSelect, onWordDoubleClick, recentFiles, onRecentFileClick }) => {
-    const [fileContent, setFileContent] = useState<string>('');
-    const [loadingNewPdf, setLoadingNewPdf] = useState(false);
-    const [numPages, setNumPages] = useState<number | null>(null);
-    const [pdfKey, setPdfKey] = useState(0);
-    const [epubLocation, setEpubLocation] = useState<string | number>(0);
-    const prevFileUrl = React.useRef<string | null>(null);
-
-    const { toast } = useToast();
-
-    const fileContainerRef = useRef<HTMLDivElement>(null);
-
-    const handleTextSelection = useCallback((event: MouseEvent) => {
-        if (currentFile && (currentFile.type === 'application/pdf' || currentFile.type === 'application/epub+zip')) {
-            const selection = window.getSelection();
-            if (selection && fileContainerRef.current?.contains(selection.anchorNode)) {
-                const selectedText = selection.toString().trim();
-                if (selectedText) {
-                    if (event.detail === 2) { // Double click
-                        onWordDoubleClick(selectedText);
-                    } else {
-                        onTextSelect(selectedText);
-                    }
-                }
-            }
-        }
-    }, [currentFile, onTextSelect, onWordDoubleClick]);
-
-    useEffect(() => {
-        if (currentFile && (currentFile.type === 'application/pdf' || currentFile.type === 'application/epub+zip')) {
-            document.addEventListener('mouseup', handleTextSelection);
-            return () => {
-                document.removeEventListener('mouseup', handleTextSelection);
-            };
-        }
-    }, [currentFile, handleTextSelection]);
-
-    useEffect(() => {
-        if (currentFile) {
-            setLoadingNewPdf(true);
-
-            if (currentFile.type === 'text/plain') {
-                const reader = new FileReader();
-                reader.onload = (e) => {
-                    const content = e.target?.result as string;
-                    setFileContent(content);
-                    setLoadingNewPdf(false);
-                };
-                reader.readAsText(currentFile);
-            } else if (currentFile.type === 'application/pdf') {
-                prevFileUrl.current = URL.createObjectURL(currentFile);
-                setPdfKey((prevKey) => prevKey + 1);
-            } else if (currentFile.type === 'application/epub+zip') {
-                prevFileUrl.current = URL.createObjectURL(currentFile);
-                setEpubLocation(0);
-                setLoadingNewPdf(false);
-                toast({
-                    title: 'EPUB Notice',
-                    description: `EPUB needs to be DRM-free. If content doesn't show, use tools like Calibre to convert EPUB to EPUB.`,
-                });
-            } else {
-                setFileContent('');
-                setLoadingNewPdf(false);
-            }
-        }
-    }, [currentFile, toast]);
-
-    const renderFileContent = () => {
-        if (!currentFile) {
-            return (
-                <div className="flex flex-col items-center justify-center h-full">
-                    <Input
-                        type="file"
-                        onChange={onFileUpload}
-                        className="hidden"
-                        id="file-upload"
-                        accept=".pdf,.txt,.epub"
-                    />
-                    <label
-                        htmlFor="file-upload"
-                        className="flex flex-col items-center justify-center w-64 h-64 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-gray-400 transition-colors duration-200"
+export const FileViewer: React.FC<FileViewerProps> = ({
+  currentFile,
+  onFileUpload,
+  onTextSelect,
+  onWordDoubleClick,
+  recentFiles,
+  onRecentFileClick,
+}) => {
+  const [loading, setLoading] = useState(false);
+  const { toast } = useToast();
+  const fileContainerRef = useRef<HTMLDivElement>(null);
+
+  useEffect(() => {
+    if (currentFile) {
+      setLoading(true);
+      if (currentFile.type === 'text/plain') {
+        const reader = new FileReader();
+        reader.onload = (e) => {
+          const content = e.target?.result as string;
+          // Handle text file content here if needed
+          setLoading(false);
+        };
+        reader.readAsText(currentFile);
+      } else if (currentFile.type === 'application/pdf') {
+        // Handled by LazyPDFViewer
+        setLoading(false);
+      } else if (currentFile.type === 'application/epub+zip') {
+        // Handled by LazyReactReader
+        setLoading(false);
+        toast({
+          title: 'EPUB Notice',
+          description: 'EPUB needs to be DRM-free. If content doesn\'t show, use tools like Calibre to convert EPUB.',
+        });
+      } else {
+        setLoading(false);
+        toast({
+          title: 'Unsupported File',
+          description: 'The selected file type is not supported.',
+          variant: 'destructive',
+        });
+      }
+    } else {
+      setLoading(false);
+    }
+  }, [currentFile, toast]);
+
+  const renderFileContent = () => {
+    if (!currentFile) {
+      return (
+        <div className="flex flex-col items-center justify-center h-full">
+          <Input
+            type="file"
+            onChange={onFileUpload}
+            className="hidden"
+            id="file-upload"
+            accept=".pdf,.txt,.epub"
+          />
+          <label
+            htmlFor="file-upload"
+            className="flex flex-col items-center justify-center w-64 h-64 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-gray-400 transition-colors duration-200"
+          >
+            <Upload className="w-12 h-12 text-gray-400" />
+            <span className="mt-2 text-sm text-gray-500">Choose a file or drag it here</span>
+          </label>
+          {recentFiles.length > 0 && (
+            <div className="mt-8">
+              <h3 className="text-lg font-semibold mb-2">Recent Files</h3>
+              <ul className="space-y-2">
+                {recentFiles.map((file, index) => (
+                  <li key={index}>
+                    <button
+                      onClick={() => onRecentFileClick(file.name)}
+                      className="text-blue-500 hover:underline"
                     >
-                        <Upload className="w-12 h-12 text-gray-400" />
-                        <span className="mt-2 text-sm text-gray-500">Choose a file or drag it here</span>
-                    </label>
-                    {recentFiles.length > 0 && (
-                        <div className="mt-8">
-                            <h3 className="text-lg font-semibold mb-2">Recent Files</h3>
-                            <ul className="space-y-2">
-                                {recentFiles.map((file, index) => (
-                                    <li key={index}>
-                                        <button
-                                            onClick={() => onRecentFileClick(file.name)}
-                                            className="text-blue-500 hover:underline"
-                                        >
-                                            {file.name}
-                                        </button>
-                                    </li>
-                                ))}
-                            </ul>
-                        </div>
-                    )}
-                </div>
-            );
-        }
-
-        switch (currentFile.type) {
-            case 'text/plain':
-                return (
-                    <div className="bg-white p-4 rounded shadow-inner">
-                        <pre className="whitespace-pre-wrap">{fileContent}</pre>
-                    </div>
-                );
-            case 'application/pdf':
-                return (
-                    <div className="h-full w-full">
-                        <div ref={fileContainerRef} className="h-full w-full">
-                            <PDFViewer
-                                file={prevFileUrl.current}
-                                onLoadSuccess={(numPages) => {
-                                    setNumPages(numPages);
-                                    setLoadingNewPdf(false);
-                                }}
-                            />
-                        </div>
-                    </div>
-                );
-            case 'application/epub+zip':
-                return (
-                    <div className="h-full w-full">
-                        <div ref={fileContainerRef} className="h-full w-full">
-                            <EpubViewer
-                                url={prevFileUrl.current!}
-                                location={epubLocation}
-                                setLocation={(location: string) => setEpubLocation(location)}
-                            />
-                        </div>
-                    </div>
-                );
-            default:
-                return <p>Unsupported file type</p>;
-        }
-    };
-
-    return (
-        <div className="bg-gray-100 h-full flex flex-col items-center justify-center">
-            {renderFileContent()}
+                      {file.name}
+                    </button>
+                  </li>
+                ))}
+              </ul>
+            </div>
+          )}
         </div>
-    );
+      );
+    }
+
+    switch (currentFile.type) {
+      case 'text/plain':
+        return (
+          <div className="bg-white p-4 rounded shadow-inner">
+            <pre className="whitespace-pre-wrap">{/* Display text content here if needed */}</pre>
+          </div>
+        );
+      case 'application/pdf':
+        return (
+          <div className="h-full w-full">
+            <Suspense fallback={<div>Loading PDF...</div>}>
+              <LazyPDFViewer
+                file={URL.createObjectURL(currentFile)}
+                onLoadSuccess={(numPages) => console.log(`Loaded ${numPages} pages`)}
+              />
+            </Suspense>
+          </div>
+        );
+      case 'application/epub+zip':
+        return (
+          <div className="h-full w-full">
+            <Suspense fallback={<div>Loading EPUB...</div>}>
+              <LazyReactReader
+                url={URL.createObjectURL(currentFile)}
+                location=""
+                setLocation={(location: string) => console.log(`Current location: ${location}`)}
+              />
+            </Suspense>
+          </div>
+        );
+      default:
+        return <p>Unsupported file type</p>;
+    }
+  };
+
+  return (
+    <div className="bg-gray-100 h-full flex flex-col items-center justify-center">
+      {loading ? (
+        <p>Loading...</p>
+      ) : (
+        renderFileContent()
+      )}
+    </div>
+  );
 };
 
-export { PDFViewer, EpubViewer };
+export default FileViewer;
diff --git a/components/MainInterface/Layout.tsx b/components/MainInterface/Layout.tsx
new file mode 100644
index 0000000..15f0b58
--- /dev/null
+++ b/components/MainInterface/Layout.tsx
@@ -0,0 +1,21 @@
+'use client';
+import React from 'react';
+import { cn } from '@/lib/utils';
+import ThemeToggle from './ThemeToggle';
+import { sharedStyles } from '@/utils/styles';
+
+const Layout = ({ children }: { children: React.ReactNode }) => {
+  return (
+    <div className={cn('min-h-screen flex flex-col bg-background text-foreground')}>
+      <header className="flex justify-end p-4 border-b bg-white dark:bg-neutral-800">
+        <ThemeToggle />
+      </header>
+      <main className="flex-grow p-4">{children}</main>
+      <footer className="p-4 border-t bg-white dark:bg-neutral-800 text-center text-sm text-gray-500">
+        © 2023 Recall AI. All rights reserved.
+      </footer>
+    </div>
+  );
+};
+
+export default Layout;
diff --git a/components/MainInterface/MainInterface.tsx b/components/MainInterface/MainInterface.tsx
index b3b31a5..8b2b3a9 100644
--- a/components/MainInterface/MainInterface.tsx
+++ b/components/MainInterface/MainInterface.tsx
@@ -5,7 +5,9 @@ import { Settings } from "lucide-react"
 import { Button } from "@/components/ui/button"
 import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 import { useToast } from "@/components/ui/use-toast"
-import { FileViewer } from "./FileViewer"
+import { Suspense, lazy } from 'react'
+const LazyPDFViewer = lazy(() => import('./PDFViewer'))
+const LazyEpubViewer = lazy(() => import('./EpubViewer'))
 import { Sidebar } from "./Sidebar"
 import { TopSidebar } from "./TopSidebar"
 import { SettingsDialog } from "./SettingsDialog"
@@ -23,150 +25,111 @@ import {
 import SignOutButton from "@/components/common/SignOutButton"
 import { handleGenerateContent } from "@/utils/contentUtils"
 
-export function MainInterface() {
-    const [mode, setMode] = useState<"language" | "flashcard" | "explain">("language")
-    const [languageSubMode, setLanguageSubMode] = useState<"english" | "french">("english")
-    const [settingsOpen, setSettingsOpen] = useState(false)
-    const [explanation, setExplanation] = useState("")
-    const [selectedText, setSelectedText] = useState("")
-    const fileViewerRef = useRef<HTMLDivElement>(null)
-
-    const dispatch = useDispatch()
-    const { currentFile } = useSelector((state: RootState) => state.file)
-    // const { currentFile, recentFiles } = useSelector((state: RootState) => state.file) # don't delete this
-    const recentFiles = [
-        { name: "example.pdf", progress: 50 },
-        ...useSelector((state: RootState) => state.file.recentFiles)
-    ]
-    const { apiKey, selectedModel, customPrompts } = useSelector((state: RootState) => state.settings)
-
-    const { toast } = useToast()
-    const router = useRouter()
-
-    useEffect(() => {
-        const storedApiKey = localStorage.getItem("apiKey")
-        if (storedApiKey) dispatch(setApiKey(storedApiKey))
-
-        const handleSelectionChange = () => {
-            const selection = window.getSelection()
-            if (selection) {
-                const newSelectedText = selection.toString().trim()
-                if (newSelectedText) {
-                    setSelectedText(newSelectedText)
-                }
-            }
-        }
-
-        document.addEventListener('selectionchange', handleSelectionChange)
-        return () => {
-            document.removeEventListener('selectionchange', handleSelectionChange)
-        }
-    }, [dispatch])
-
-    const handleContentGeneration = useCallback(async (text: string) => {
-        return handleGenerateContent(text, mode, customPrompts, languageSubMode, apiKey, selectedModel, dispatch, setExplanation)
-    }, [mode, customPrompts, languageSubMode, apiKey, selectedModel, dispatch, setExplanation])
-
-    const handleWordDoubleClick = useCallback((word: string) => {
-        if (mode === "language") {
-            handleContentGeneration(word);
-        }
-    }, [mode, handleContentGeneration])
-
-    const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
-        const file = event.target.files?.[0]
-        if (file) {
-            dispatch(setCurrentFile(file))
-            dispatch(addRecentFile({ name: file.name, progress: 0 }))
-        }
-    }
-
-    const handleRecentFileClick = useCallback((fileName: string) => {
-        // Here you would typically load the file content
-        // For now, we'll just update the currentFile state
-        const file = new File([""], fileName, { type: "application/octet-stream" });
-        dispatch(setCurrentFile(file));
-        toast({
-            title: "Recent file selected",
-            description: `Loading ${fileName}...`,
-        });
-        // You might want to add logic here to actually load the file content
-    }, [dispatch, toast]);
-
-    const handleSettingsClick = () => {
-        setSettingsOpen(true)
-    }
-
-    const handleDashboardClick = () => {
-        router.push('/dashboard')
-    }
-
-    return (
-        <div className="flex flex-col h-screen" tabIndex={0}>
-            <div className="flex flex-1 overflow-hidden">
-                <div className="flex-grow overflow-auto mr-4" ref={fileViewerRef}>
-                    <FileViewer
-                        currentFile={currentFile}
-                        onFileUpload={handleFileUpload}
-                        onTextSelect={setSelectedText}
-                        onWordDoubleClick={handleWordDoubleClick}
-                        recentFiles={recentFiles}
-                        onRecentFileClick={handleRecentFileClick}
-                    />
-                </div>
-                <Sidebar
-                    mode={mode}
-                    setMode={setMode}
-                    languageSubMode={languageSubMode}
-                    setLanguageSubMode={setLanguageSubMode}
-                    handleGenerateContent={() => handleContentGeneration(selectedText)}
-                    handleFileUpload={handleFileUpload}
-                    explanation={explanation}
-                    setExplanation={setExplanation}
-                />
-                <TopSidebar />
-
-            </div>
-
-            <DropdownMenu>
-                <DropdownMenuTrigger asChild>
-                    <Button className="absolute bottom-4 right-4 bg-white text-black border border-gray-300" size="icon">
-                        <Settings className="h-4 w-4" />
-                    </Button>
-                </DropdownMenuTrigger>
-                <DropdownMenuContent align="end" className="w-auto min-w-[8rem] bg-white border border-gray-300">
-                    <DropdownMenuItem className="w-full text-black hover:bg-gray-100">
-                        <SignOutButton />
-                    </DropdownMenuItem>
-                    <DropdownMenuItem className="w-full text-black hover:bg-gray-100" onClick={handleDashboardClick}>
-                        Dashboard
-                    </DropdownMenuItem>
-                    <DropdownMenuItem className="w-full text-black hover:bg-gray-100" onClick={handleSettingsClick}>
-                        Settings
-                    </DropdownMenuItem>
-                </DropdownMenuContent>
-            </DropdownMenu>
-
-            <SettingsDialog
-                open={settingsOpen}
-                onOpenChange={setSettingsOpen}
-                setApiKey={(value: string) => dispatch(setApiKey(value))}
-                selectedModel={selectedModel}
-                setSelectedModel={(value: string) => dispatch(setSelectedModel(value))}
-                customPrompts={customPrompts}
-                setCustomPrompts={(value: SettingsState['customPrompts']) => dispatch(setCustomPrompts(value))}
-            />
-
-            {explanation && (
-                <Dialog open={!!explanation} onOpenChange={() => setExplanation("")}>
-                    <DialogContent className="sm:max-w-[425px]">
-                        <DialogHeader>
-                            <DialogTitle>Explanation</DialogTitle>
-                        </DialogHeader>
-                        <div className="mt-4" dangerouslySetInnerHTML={{ __html: explanation }} />
-                    </DialogContent>
-                </Dialog>
+import useMainInterfaceState from './useMainInterfaceState';
+
+const MainInterface = () => {
+  const {
+    mode,
+    setMode,
+    languageSubMode,
+    setLanguageSubMode,
+    settingsOpen,
+    setSettingsOpen,
+    explanation,
+    setExplanation,
+    selectedText,
+    setSelectedText,
+    fileViewerRef,
+    dispatch,
+    currentFile,
+    recentFiles,
+    apiKey,
+    selectedModel,
+    customPrompts,
+    toast,
+    router,
+    handleContentGeneration,
+    handleWordDoubleClick,
+    handleFileUpload,
+    handleRecentFileClick,
+    handleSettingsClick,
+    handleDashboardClick,
+  } = useMainInterfaceState();
+
+  return (
+    <div className="flex flex-col h-screen">
+      <div className="flex flex-1 overflow-hidden">
+        <div className="flex-grow overflow-auto mr-4" ref={fileViewerRef}>
+          <Suspense fallback={<div>Loading Viewer...</div>}>
+            {currentFile && currentFile.type === 'application/pdf' && (
+              <LazyPDFViewer
+                file={URL.createObjectURL(currentFile)}
+                onLoadSuccess={(numPages) => console.log(`Loaded ${numPages} pages`)}
+              />
+            )}
+            {currentFile && currentFile.type === 'application/epub+zip' && (
+              <LazyEpubViewer
+                url={URL.createObjectURL(currentFile)}
+                location=""
+                setLocation={(location) => console.log(`Current location: ${location}`)}
+              />
             )}
+          </Suspense>
         </div>
-    )
-}
+        <Sidebar
+          mode={mode}
+          setMode={setMode}
+          languageSubMode={languageSubMode}
+          setLanguageSubMode={setLanguageSubMode}
+          handleGenerateContent={() => handleContentGeneration(selectedText)}
+          handleFileUpload={handleFileUpload}
+          explanation={explanation}
+          setExplanation={setExplanation}
+        />
+        <TopSidebar />
+      </div>
+
+      <DropdownMenu>
+        <DropdownMenuTrigger asChild>
+          <Button className="absolute bottom-4 right-4 bg-white text-black border border-gray-300" size="icon">
+            <Settings className="h-4 w-4" />
+          </Button>
+        </DropdownMenuTrigger>
+        <DropdownMenuContent align="end" className="w-auto min-w-[8rem] bg-white border border-gray-300">
+          <DropdownMenuItem className="w-full text-black hover:bg-gray-100">
+            <SignOutButton />
+          </DropdownMenuItem>
+          <DropdownMenuItem className="w-full text-black hover:bg-gray-100" onClick={handleDashboardClick}>
+            Dashboard
+          </DropdownMenuItem>
+          <DropdownMenuItem className="w-full text-black hover:bg-gray-100" onClick={handleSettingsClick}>
+            Settings
+          </DropdownMenuItem>
+        </DropdownMenuContent>
+      </DropdownMenu>
+
+      <SettingsDialog
+        open={settingsOpen}
+        onOpenChange={setSettingsOpen}
+        setApiKey={(value: string) => dispatch(setApiKey(value))}
+        selectedModel={selectedModel}
+        setSelectedModel={(value: string) => dispatch(setSelectedModel(value))}
+        customPrompts={customPrompts}
+        setCustomPrompts={(value: SettingsState['customPrompts']) => dispatch(setCustomPrompts(value))}
+      />
+
+      {explanation && (
+        <Dialog open={!!explanation} onOpenChange={() => setExplanation('')}>
+          <DialogContent className="sm:max-w-[425px]">
+            <DialogHeader>
+              <DialogTitle>Explanation</DialogTitle>
+            </DialogHeader>
+            <div className="mt-4" dangerouslySetInnerHTML={{ __html: explanation }} />
+          </DialogContent>
+        </Dialog>
+      )}
+    </div>
+  );
+};
+
+export default MainInterface;
diff --git a/components/MainInterface/PDFViewer.tsx b/components/MainInterface/PDFViewer.tsx
new file mode 100644
index 0000000..c2b8871
--- /dev/null
+++ b/components/MainInterface/PDFViewer.tsx
@@ -0,0 +1,36 @@
+'use client';
+import * as React from 'react';
+import { Viewer, Worker, SpecialZoomLevel } from '@react-pdf-viewer/core';
+import { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';
+import '@react-pdf-viewer/core/lib/styles/index.css';
+import '@react-pdf-viewer/default-layout/lib/styles/index.css';
+
+interface PDFViewerProps {
+  file: string | null;
+  onLoadSuccess: (numPages: number) => void;
+}
+
+const PDFViewer: React.FC<PDFViewerProps> = ({ file, onLoadSuccess }) => {
+  const defaultLayoutPluginInstance = defaultLayoutPlugin({ sidebarTabs: (defaultTabs) => [defaultTabs[0]] });
+
+  if (!file) {
+    return <div className="flex items-center justify-center h-full">No PDF file selected</div>;
+  }
+
+  return (
+    <Worker workerUrl={`https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js`}>
+      <Viewer
+        fileUrl={file}
+        plugins={[defaultLayoutPluginInstance]}
+        onDocumentLoad={(e) => onLoadSuccess(e.doc.numPages)}
+        defaultScale={SpecialZoomLevel.PageFit}
+        onDocumentError={(error) => {
+          console.error('Error loading PDF:', error);
+          return <div className="flex items-center justify-center h-full">Error loading PDF</div>;
+        }}
+      />
+    </Worker>
+  );
+};
+
+export default PDFViewer;
diff --git a/components/MainInterface/SettingsDialog.tsx b/components/MainInterface/SettingsDialog.tsx
index 4691241..4a0062a 100644
--- a/components/MainInterface/SettingsDialog.tsx
+++ b/components/MainInterface/SettingsDialog.tsx
@@ -1,5 +1,6 @@
 import React from "react"
-import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
+import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
+import { Select } from "@/components/ui/select"
 import { Input } from "@/components/ui/input"
 import { Textarea } from "@/components/ui/textarea"
 import { useSelector, useDispatch } from 'react-redux'
@@ -20,74 +21,66 @@ export function SettingsDialog({
 
     return (
         <Dialog open={open} onOpenChange={onOpenChange}>
-            <DialogContent className="sm:max-w-[800px] w-[95vw] max-h-[95vh] h-[800px] flex flex-col">
-                <DialogHeader className="pb-4">
+            <DialogContent className="sm:max-w-[800px] w-[95vw] max-h-[95vh] h-[800px] flex flex-col dark:bg-gray-800 text-white">
+                <DialogHeader>
                     <DialogTitle>Settings</DialogTitle>
-                    <DialogDescription>
-                        Configure your API key and customize prompts.
-                    </DialogDescription>
                 </DialogHeader>
-                <div className="flex-grow overflow-y-auto pr-6">
-                    <div className="grid gap-8 py-4">
-                        <div className="grid grid-cols-4 items-center gap-4">
-                            <label htmlFor="api-key" className="text-right">
-                                API Key
-                            </label>
+                <div className="flex flex-col space-y-4 p-4 overflow-auto">
+                    <div className="flex flex-col space-y-4">
+                        <div className="flex items-center justify-between">
+                            <label htmlFor="api-key" className="text-sm font-medium">API Key</label>
                             <Input
                                 id="api-key"
+                                name="api-key"
                                 value={apiKey}
                                 onChange={(e) => {
-                                    dispatch(setApiKey(e.target.value))
-                                    localStorage.setItem("apiKey", e.target.value)
+                                    dispatch(setApiKey(e.target.value));
+                                    localStorage.setItem('apiKey', e.target.value);
                                 }}
-                                className="col-span-3"
+                                className="w-2/3"
                             />
                         </div>
-                        <div className="grid grid-cols-4 items-center gap-4">
-                            <label htmlFor="model" className="text-right">
-                                Model
-                            </label>
-                            <select
-                                id="model"
-                                value={selectedModel}
-                                onChange={(e) => dispatch(setSelectedModel(e.target.value))}
-                                className="col-span-3 p-2 border border-neutral-200 rounded dark:border-neutral-800"
-                            >
-                                <option value="claude-3-5-sonnet-20240620">Claude 3.5 Sonnet</option>
-                                <option value="claude-3-haiku">Claude 3 Haiku</option>
-                            </select>
+                        <div className="flex items-center justify-between">
+                            <label htmlFor="model" className="text-sm font-medium">Model</label>
+                            <Select value={selectedModel} onValueChange={(value) =>
+                                dispatch(setSelectedModel(value))}>
+                                <Select.Trigger className="w-2/3">
+                                    <Select.Value placeholder="Select model" />
+                                </Select.Trigger>
+                                <Select.Content>
+                                    <Select.Item value="claude-3-5-sonnet-20240620">Claude 3.5 Sonnet</Select.Item>
+                                    <Select.Item value="claude-3-haiku">Claude 3 Haiku</Select.Item>
+                                </Select.Content>
+                            </Select>
                         </div>
-                        <div className="grid grid-cols-4 items-start gap-4">
-                            <label htmlFor="flashcard-prompt" className="text-right pt-2">
-                                Flashcard Prompt
-                            </label>
+                        <div className="flex flex-col">
+                            <label htmlFor="flashcard-prompt" className="text-sm font-medium mb-1">Flashcard Prompt</label>
                             <Textarea
                                 id="flashcard-prompt"
+                                name="flashcard-prompt"
                                 value={customPrompts.flashcard}
                                 onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, flashcard: e.target.value }))}
-                                className="col-span-3 min-h-[150px]"
+                                className="h-32"
                             />
                         </div>
-                        <div className="grid grid-cols-4 items-start gap-4">
-                            <label htmlFor="explain-prompt" className="text-right pt-2">
-                                Explain Prompt
-                            </label>
+                        <div className="flex flex-col">
+                            <label htmlFor="explain-prompt" className="text-sm font-medium mb-1">Explain Prompt</label>
                             <Textarea
                                 id="explain-prompt"
+                                name="explain-prompt"
                                 value={customPrompts.explain}
                                 onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, explain: e.target.value }))}
-                                className="col-span-3 min-h-[150px]"
+                                className="h-32"
                             />
                         </div>
-                        <div className="grid grid-cols-4 items-start gap-4">
-                            <label htmlFor="language-prompt" className="text-right pt-2">
-                                Language Prompt
-                            </label>
+                        <div className="flex flex-col">
+                            <label htmlFor="language-prompt" className="text-sm font-medium mb-1">Language Prompt</label>
                             <Textarea
                                 id="language-prompt"
+                                name="language-prompt"
                                 value={customPrompts.language}
                                 onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, language: e.target.value }))}
-                                className="col-span-3 min-h-[150px]"
+                                className="h-32"
                             />
                         </div>
                     </div>
@@ -95,4 +88,4 @@ export function SettingsDialog({
             </DialogContent>
         </Dialog>
     )
-}
\ No newline at end of file
+}
diff --git a/components/MainInterface/Sidebar.tsx b/components/MainInterface/Sidebar.tsx
index 771923e..63e1f7d 100644
--- a/components/MainInterface/Sidebar.tsx
+++ b/components/MainInterface/Sidebar.tsx
@@ -1,186 +1,178 @@
-import React, { useRef } from "react"
-import { Button } from "@/components/ui/button"
-import { Input } from "@/components/ui/input"
-import { FlashcardCollection } from "../Cards/FlashcardCollection"
-import { LanguageCardCollection } from "../Cards/LanguageCardCollection"
+import React, { useRef } from 'react'
+import { Button } from '@/components/ui/button'
+import { Input } from '@/components/ui/input'
+import { FlashcardCollection } from '@/components/ui/Cards/FlashcardCollection'
+import { LanguageCardCollection } from '@/components/ui/Cards/LanguageCardCollection'
 import { useSelector, useDispatch } from 'react-redux'
 import { RootState } from '@/app/store'
 import { removeFlashcard, clearFlashcards } from '@/app/slices/flashcardsSlice'
 import { removeLanguageCard, clearLanguageCards } from '@/app/slices/languageCardsSlice'
-import { useToast } from '@/components/ui/use-toast';
+import { useToast } from '@/components/ui/use-toast'
 
 interface SidebarProps {
-    mode: "language" | "flashcard" | "explain"
-    setMode: React.Dispatch<React.SetStateAction<"language" | "flashcard" | "explain">>
-    languageSubMode: "english" | "french"
-    setLanguageSubMode: React.Dispatch<React.SetStateAction<"english" | "french">>
-    handleGenerateContent: () => Promise<any>
-    handleFileUpload: (event: React.ChangeEvent<HTMLInputElement>) => void
-    explanation: string
-    setExplanation: React.Dispatch<React.SetStateAction<string>>
-
+  mode: 'language' | 'flashcard' | 'explain';
+  setMode: React.Dispatch<React.SetStateAction<'language' | 'flashcard' | 'explain'>>;
+  languageSubMode: 'english' | 'french';
+  setLanguageSubMode: React.Dispatch<React.SetStateAction<'english' | 'french'>>;
+  handleGenerateContent: () => Promise<any>;
+  handleFileUpload: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  explanation: string;
+  setExplanation: React.Dispatch<React.SetStateAction<string>>;
 }
 
 export function Sidebar({
-    mode,
-    setMode,
-    languageSubMode,
-    setLanguageSubMode,
-    handleGenerateContent,
-    handleFileUpload,
-    explanation,
-    setExplanation
+  mode,
+  setMode,
+  languageSubMode,
+  setLanguageSubMode,
+  handleGenerateContent,
+  handleFileUpload,
+  explanation,
+  setExplanation,
 }: SidebarProps) {
-    const [sidebarWidth, setSidebarWidth] = React.useState(30)
-    const sidebarRef = useRef<HTMLDivElement>(null)
-    const resizeHandleRef = useRef<HTMLDivElement>(null)
-
-    const dispatch = useDispatch()
-    const flashcards = useSelector((state: RootState) => state.flashcards)
-    const languageCards = useSelector((state: RootState) => state.languageCards)
-    const { toast } = useToast();
-
-    const handleSaveCards = async () => {
-        try {
-            const cardsToSave = mode === 'flashcard' ? flashcards : languageCards;
-
-            if (cardsToSave.length === 0) {
-                toast({
-                    title: "No cards to save",
-                    description: "Please generate some cards first.",
-                });
-                return;
-            }
-
-            const response = await fetch('/api/cards', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({
-                    type: mode,
-                    cards: cardsToSave,
-                }),
-            });
-
-            if (response.ok) {
-                const { count } = await response.json();
-                toast({
-                    title: "Cards saved",
-                    description: `${count} card(s) have been saved to the database.`,
-                });
-
-                // Clear the cards from the Redux store
-                if (mode === 'flashcard') {
-                    dispatch(clearFlashcards());
-                } else if (mode === 'language') {
-                    dispatch(clearLanguageCards());
-                }
-            } else {
-                throw new Error(`Failed to save cards (${cardsToSave.length})`);
-            }
-        } catch (error) {
-            console.error('Error saving cards:', error);
-            toast({
-                title: "Error",
-                description: "Failed to save the cards. Please try again.",
-                variant: "destructive",
-            });
-        }
-    };
-
-    const handleMouseDown = (e: React.MouseEvent) => {
-        e.preventDefault()
-        document.addEventListener("mousemove", handleMouseMove)
-        document.addEventListener("mouseup", handleMouseUp)
-    }
-
-    const handleMouseMove = (e: MouseEvent) => {
-        if (sidebarRef.current && resizeHandleRef.current) {
-            const containerRect = sidebarRef.current.parentElement?.getBoundingClientRect()
-            if (containerRect) {
-                const newWidth = containerRect.right - e.clientX
-                const newWidthPercentage = (newWidth / containerRect.width) * 100
-                setSidebarWidth(Math.min(Math.max(newWidthPercentage, 20), 80))
-            }
+  const sidebarRef = useRef<HTMLDivElement>(null);
+  const dispatch = useDispatch();
+  const flashcards = useSelector((state: RootState) => state.flashcards);
+  const languageCards = useSelector((state: RootState) => state.languageCards);
+  const { toast } = useToast();
+  const [sidebarWidth, setSidebarWidth] = useState(30);
+  const resizeHandleRef = useRef<HTMLDivElement>(null);
+
+  const handleSaveCards = async () => {
+    try {
+      const cardsToSave = mode === 'flashcard' ? flashcards : languageCards
+      if (cardsToSave.length === 0) {
+        toast({
+          title: 'No cards to save',
+          description: 'Please generate some cards first.',
+        })
+        return
+      }
+      const response = await fetch('/api/cards', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({ type: mode, cards: cardsToSave }),
+      })
+      if (response.ok) {
+        const { count } = await response.json()
+        toast({
+          title: 'Cards saved',
+          description: `${count} card(s) have been saved to the database.`,
+        })
+        // Clear the cards from the Redux store
+        if (mode === 'flashcard') {
+          dispatch(clearFlashcards())
+        } else if (mode === 'language') {
+          dispatch(clearLanguageCards())
         }
+      } else {
+        throw new Error(`Failed to save cards (${cardsToSave.length})`)
+      }
+    } catch (error: any) {
+      console.error('Error saving cards:', error)
+      toast({
+        title: 'Error',
+        description: 'Failed to save the cards. Please try again.',
+        variant: 'destructive',
+      })
     }
-
-    const handleMouseUp = () => {
-        document.removeEventListener("mousemove", handleMouseMove)
-        document.removeEventListener("mouseup", handleMouseUp)
+  }
+
+  const handleMouseDown = (e: React.MouseEvent) => {
+    e.preventDefault()
+    document.addEventListener('mousemove', handleMouseMove)
+    document.addEventListener('mouseup', handleMouseUp)
+  }
+
+  const handleMouseMove = (e: MouseEvent) => {
+    if (sidebarRef.current && resizeHandleRef.current) {
+      const containerRect = sidebarRef.current.parentElement?.getBoundingClientRect()
+      if (containerRect) {
+        const newWidth = containerRect.right - e.clientX
+        const newWidthPercentage = (newWidth / containerRect.width) * 100
+        setSidebarWidth(Math.min(Math.max(newWidthPercentage, 20), 80))
+      }
     }
-
-    return (
-        <div
-            ref={sidebarRef}
-            className="flex flex-col bg-gray-50 overflow-hidden relative"
-            style={{ width: `${sidebarWidth}%`, minWidth: "200px", maxWidth: "80%" }}
-        >
-            <div className="flex-grow overflow-y-auto overflow-x-hidden p-4">
-                <div className="space-y-4">
-                    <div className="grid grid-cols-3 gap-2">
-                        <Button
-                            variant={mode === "language" ? "default" : "outline"}
-                            onClick={() => setMode("language")}
-                        >
-                            Language
-                        </Button>
-                        <Button
-                            variant={mode === "flashcard" ? "default" : "outline"}
-                            onClick={() => setMode("flashcard")}
-                        >
-                            Flashcard
-                        </Button>
-                        <Button
-                            variant={mode === "explain" ? "default" : "outline"}
-                            onClick={() => setMode("explain")}
-                        >
-                            Explain
-                        </Button>
-                    </div>
-                    {mode === "language" && (
-                        <LanguageCardCollection
-                            cards={languageCards}
-                            onRemoveCard={(index) => dispatch(removeLanguageCard(index))}
-                            onAddCard={handleSaveCards}
-                            onClearCollection={() => dispatch(clearLanguageCards())}
-                        />
-                    )}
-                    {mode === "flashcard" && (
-                        <FlashcardCollection
-                            cards={flashcards}
-                            onRemoveCard={(index) => dispatch(removeFlashcard(index))}
-                            onAddCard={handleSaveCards}
-                            onClearCollection={() => dispatch(clearFlashcards())}
-                        />
-                    )}
-                </div>
-
-                {mode === "explain" && explanation && (
-                    <div className="mt-4" dangerouslySetInnerHTML={{ __html: explanation }} />
-                )}
-            </div>
-
-            <div className="p-4 border-t">
-                <Button onClick={handleGenerateContent} className="w-full">
-                    {mode === "flashcard" ? "Generate Flashcard" : mode === "explain" ? "Generate Explanation" : `Translate to ${languageSubMode === "english" ? "English" : "French"}`}
-                </Button>
-            </div>
-
-            <div
-                ref={resizeHandleRef}
-                className="w-2 bg-gray-300 hover:bg-gray-400 cursor-ew-resize absolute top-0 left-0 bottom-0 transition-colors"
-                onMouseDown={handleMouseDown}
+  }
+
+  const handleMouseUp = () => {
+    document.removeEventListener('mousemove', handleMouseMove)
+    document.removeEventListener('mouseup', handleMouseUp)
+  }
+
+  return (
+    <div
+      ref={sidebarRef}
+      className={`flex flex-col bg-gray-50 overflow-hidden relative`}                                                                                                                                                                      
+      style={{ width: `${sidebarWidth}%`, minWidth: '200px', maxWidth: '80%' }}
+    >
+      <div className="flex-grow overflow-y-auto p-4">
+        <div className="space-y-4">
+          <div className="grid grid-cols-3 gap-2">
+            <Button
+              variant={mode === 'language' ? 'default' : 'outline'}
+              onClick={() => setMode('language')}
+            >
+              Language
+            </Button>
+            <Button
+              variant={mode === 'flashcard' ? 'default' : 'outline'}
+              onClick={() => setMode('flashcard')}
+            >
+              Flashcard
+            </Button>
+            <Button
+              variant={mode === 'explain' ? 'default' : 'outline'}
+              onClick={() => setMode('explain')}
+            >
+              Explain
+            </Button>
+          </div>
+          {mode === 'language' && (
+            <LanguageCardCollection
+              cards={languageCards}
+              onRemoveCard={(index) => dispatch(removeLanguageCard(index))}
+              onAddCard={handleSaveCards}
+              onClearCollection={() => dispatch(clearLanguageCards())}
             />
-
-            <Input
-                type="file"
-                onChange={handleFileUpload}
-                className="hidden"
-                id="file-upload"
-                accept=".pdf,.txt,.epub"
+          )}
+          {mode === 'flashcard' && (
+            <FlashcardCollection
+              cards={flashcards}
+              onRemoveCard={(index) => dispatch(removeFlashcard(index))}
+              onAddCard={handleSaveCards}
+              onClearCollection={() => dispatch(clearFlashcards())}
             />
+          )}
         </div>
-    )
-}
\ No newline at end of file
+        {mode === 'explain' && explanation && (
+          <div className="mt-4 bg-white p-4 rounded-lg shadow-md text-blue-800 text-lg">
+            {explanation}
+          </div>
+        )}
+      </div>
+
+      <div className="p-4 border-t">
+        <Button onClick={handleSaveCards} className="w-full">
+          {mode === 'flashcard' ? 'Generate Flashcards' : mode === 'explain' ? 'Generate Explanation' : 'Translate'}
+        </Button>
+      </div>
+
+      <div
+        ref={resizeHandleRef}
+        className="w-2 bg-gray-300 hover:bg-gray-400 cursor-ew-resize absolute top-0 left-0 bottom-0 transition-colors"
+        onMouseDown={handleMouseDown}
+      />
+
+      <Input
+        type="file"
+        onChange={handleFileUpload}
+        className="hidden"
+        id="file-upload"
+        accept=".pdf,.txt,.epub"
+      />
+    </div>
+  )
+}
diff --git a/components/MainInterface/TopSidebar.tsx b/components/MainInterface/TopSidebar.tsx
index 1d3b818..e7b7b9f 100644
--- a/components/MainInterface/TopSidebar.tsx
+++ b/components/MainInterface/TopSidebar.tsx
@@ -4,65 +4,69 @@ import React from "react";
 import { useRouter } from "next/navigation";
 import { Button } from "@/components/ui/button";
 import {
-    DropdownMenu,
-    DropdownMenuContent,
-    DropdownMenuItem,
-    DropdownMenuTrigger,
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuTrigger,
 } from "@/components/ui/dropdown-menu";
-import { LayoutDashboard, Dumbbell, User } from "lucide-react";
+import { LayoutDashboard, Dumbbell, User, Moon, Sun } from "lucide-react";
+import { useDarkMode } from "@/app/hooks/useDarkMode";
 
 export function TopSidebar() {
-    const router = useRouter();
+  const router = useRouter();
+  const { theme, toggleTheme } = useDarkMode();
 
-    const SidebarButton = ({ icon, label, onClick, dropdown }) => {
-        const ButtonContent = (
-            <Button
-                variant="default"
-                className="w-12 h-12 p-2 flex justify-center items-center bg-black/70 hover:bg-gray-100 relative group"
-                onClick={dropdown ? undefined : onClick}
-            >
-                {React.cloneElement(icon, { className: "h-4 w-4 flex-shrink-0" })}
-                <span className="absolute left-full ml-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
-                    {label}
-                </span>
-            </Button>
-        );
+  const SidebarButton = ({ icon, label, onClick, dropdown = false }) => {
+    const ButtonContent = (
+      <Button
+        variant="ghost"
+        size="icon"
+        className="w-12 h-12 p-2 flex justify-center items-center group relative"
+        onClick={dropdown ? undefined : onClick}
+      >
+        {React.cloneElement(icon, { className: "h-5 w-5" })}
+        <span className="absolute left-full ml-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
+          {label}
+        </span>
+      </Button>
+    );
 
-        return dropdown ? (
-            <DropdownMenuTrigger asChild>{ButtonContent}</DropdownMenuTrigger>
-        ) : (
-            ButtonContent
-        );
-    };
+    return dropdown ? (
+      <DropdownMenuTrigger asChild>{ButtonContent}</DropdownMenuTrigger>
+    ) : (
+      ButtonContent
+    );
+  };
 
-    const handleDashboardClick = () => {
-        router.push('/dashboard');
-    };
+  const handleDashboardClick = () => {
+    router.push("/dashboard");
+  };
 
-    return (
-        <div className="fixed left-0 top-0 bottom-0 w-12 flex items-center justify-center z-50">
-            <div className="bg-black/10 py-2 rounded-lg">
-                <div className="space-y-2">
-                    <SidebarButton
-                        icon={<LayoutDashboard />}
-                        label="Dashboard"
-                        onClick={handleDashboardClick}
-                    />
-                    <SidebarButton
-                        icon={<Dumbbell />}
-                        label="Practice"
-                        onClick={() => console.log("Practice clicked")}
-                    />
-                    <DropdownMenu>
-                        <SidebarButton icon={<User />} label="Profile" dropdown={true} />
-                        <DropdownMenuContent align="end">
-                            <DropdownMenuItem onSelect={() => console.log("Profile selected")}>Profile</DropdownMenuItem>
-                            <DropdownMenuItem onSelect={() => console.log("Settings selected")}>Settings</DropdownMenuItem>
-                            <DropdownMenuItem onSelect={() => console.log("Sign out selected")}>Sign out</DropdownMenuItem>
-                        </DropdownMenuContent>
-                    </DropdownMenu>
-                </div>
-            </div>
+  return (
+    <div className="fixed left-0 top-0 bottom-0 w-14 flex items-center justify-center z-50">
+      <div className="bg-black/10 py-2 rounded-lg">
+        <div className="space-y-2">
+          <SidebarButton icon={<LayoutDashboard />} label="Dashboard" onClick={handleDashboardClick} />
+          <SidebarButton
+            icon={theme === "light" ? <Moon /> : <Sun />}
+            label="Toggle Theme"
+            onClick={toggleTheme}
+          />
+          <SidebarButton
+            icon={<Dumbbell />}
+            label="Practice"
+            onClick={() => router.push("/practice")}
+          />
+          <DropdownMenu>
+            <SidebarButton icon={<User />} label="Profile" dropdown={true} />
+            <DropdownMenuContent align="end">
+              <DropdownMenuItem onSelect={() => router.push("/profile")}>Profile</DropdownMenuItem>
+              <DropdownMenuItem onSelect={() => router.push("/settings")}>Settings</DropdownMenuItem>
+              <DropdownMenuItem onSelect={() => signOut()}>Sign out</DropdownMenuItem>
+            </DropdownMenuContent>
+          </DropdownMenu>
         </div>
-    );
-}
\ No newline at end of file
+      </div>
+    </div>
+  );
+}
diff --git a/components/MainInterface/useMainInterfaceState.ts b/components/MainInterface/useMainInterfaceState.ts
new file mode 100644
index 0000000..c8d2be2
--- /dev/null
+++ b/components/MainInterface/useMainInterfaceState.ts
@@ -0,0 +1,95 @@
+import { useState, useEffect, useCallback, useRef } from 'react';
+import { useSelector, useDispatch } from 'react-redux';
+import { RootState } from '@/app/store';
+import { setCurrentFile, addRecentFile } from '@/app/slices/fileSlice';
+import { setApiKey, setSelectedModel, setCustomPrompts, SettingsState } from '@/app/slices/settingsSlice';
+import { useToast } from '@/components/ui/use-toast';
+import { useRouter } from 'next/navigation';
+import { handleGenerateContent } from '@/utils/contentUtils';
+
+const useMainInterfaceState = () => {
+  const [mode, setMode] = useState<'language' | 'flashcard' | 'explain'>('language');
+  const [languageSubMode, setLanguageSubMode] = useState<'english' | 'french'>('english');
+  const [settingsOpen, setSettingsOpen] = useState(false);
+  const [explanation, setExplanation] = useState('');
+  const [selectedText, setSelectedText] = useState('');
+  const fileViewerRef = useRef<HTMLDivElement>(null);
+  const dispatch = useDispatch();
+  const { currentFile, recentFiles } = useSelector((state: RootState) => state.file);
+  const { apiKey, selectedModel, customPrompts } = useSelector((state: RootState) => state.settings);
+  const { toast } = useToast();
+  const router = useRouter();
+
+  useEffect(() => {
+    const storedApiKey = localStorage.getItem('apiKey');
+    if (storedApiKey) dispatch(setApiKey(storedApiKey));
+
+    const handleSelectionChange = () => {
+      const selection = window.getSelection();
+      if (selection) {
+        const newSelectedText = selection.toString().trim();
+        if (newSelectedText) setSelectedText(newSelectedText);
+      }
+    };
+
+    document.addEventListener('selectionchange', handleSelectionChange);
+    return () => {
+      document.removeEventListener('selectionchange', handleSelectionChange);
+    };
+  }, [dispatch]);
+
+  const handleContentGeneration = useCallback(async (text: string) => {
+    return handleGenerateContent(text, mode, customPrompts, languageSubMode, apiKey, selectedModel, dispatch, setExplanation);
+  }, [mode, customPrompts, languageSubMode, apiKey, selectedModel, dispatch, setExplanation]);
+
+  const handleWordDoubleClick = useCallback((word: string) => {
+    if (mode === 'language') handleContentGeneration(word);
+  }, [mode, handleContentGeneration]);
+
+  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const file = event.target.files?.[0];
+    if (file) {
+      dispatch(setCurrentFile(file));
+      dispatch(addRecentFile({ name: file.name, progress: 0 }));
+    }
+  };
+
+  const handleRecentFileClick = useCallback((fileName: string) => {
+    const file = new File([''], fileName, { type: 'application/octet-stream' });
+    dispatch(setCurrentFile(file));
+    toast({ title: 'Recent file selected', description: `Loading ${fileName}...` });
+  }, [dispatch, toast]);
+
+  const handleSettingsClick = () => setSettingsOpen(true);
+  const handleDashboardClick = () => router.push('/dashboard');
+
+  return {
+    mode,
+    setMode,
+    languageSubMode,
+    setLanguageSubMode,
+    settingsOpen,
+    setSettingsOpen,
+    explanation,
+    setExplanation,
+    selectedText,
+    setSelectedText,
+    fileViewerRef,
+    dispatch,
+    currentFile,
+    recentFiles,
+    apiKey,
+    selectedModel,
+    customPrompts,
+    toast,
+    router,
+    handleContentGeneration,
+    handleWordDoubleClick,
+    handleFileUpload,
+    handleRecentFileClick,
+    handleSettingsClick,
+    handleDashboardClick,
+  };
+};
+
+export default useMainInterfaceState;
diff --git a/components/Providers.tsx b/components/Providers.tsx
deleted file mode 100644
index 678fe18..0000000
--- a/components/Providers.tsx
+++ /dev/null
@@ -1,7 +0,0 @@
-'use client'
-
-import { SessionProvider } from "next-auth/react"
-
-export function Providers({ children }: { children: React.ReactNode }) {
-    return <SessionProvider>{children}</SessionProvider>
-}
\ No newline at end of file
diff --git a/components/ui/Avatar.tsx b/components/ui/Avatar.tsx
new file mode 100644
index 0000000..1855569
--- /dev/null
+++ b/components/ui/Avatar.tsx
@@ -0,0 +1,39 @@
+'use client';
+import * as React from 'react';
+import * as AvatarPrimitive from '@radix-ui/react-avatar';
+import { cn } from '@/lib/utils';
+
+const Avatar = React.forwardRef(
+  (props, ref) => (
+    <AvatarPrimitive.Root
+      ref={ref}
+      className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', props.className)}
+      {...props}
+    />
+  )
+);
+Avatar.displayName = AvatarPrimitive.Root.displayName;
+
+const AvatarImage = React.forwardRef(
+  (props, ref) => (
+    <AvatarPrimitive.Image
+      ref={ref}
+      className={cn('aspect-square h-full w-full', props.className)}
+      {...props}
+    />
+  )
+);
+AvatarImage.displayName = AvatarPrimitive.Image.displayName;
+
+const AvatarFallback = React.forwardRef(
+  (props, ref) => (
+    <AvatarPrimitive.Fallback
+      ref={ref}
+      className={cn('flex h-full w-full items-center justify-center rounded-full bg-muted', props.className)}
+      {...props}
+    />
+  )
+);
+AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;
+
+export { Avatar, AvatarImage, AvatarFallback };
diff --git a/components/ui/Badge.tsx b/components/ui/Badge.tsx
new file mode 100644
index 0000000..e5d1438
--- /dev/null
+++ b/components/ui/Badge.tsx
@@ -0,0 +1,31 @@
+import * as React from 'react';
+import { cva, type VariantProps } from 'class-variance-authority';
+import { cn } from '@/lib/utils';
+
+const badgeVariants = cva(
+  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
+  {
+    variants: {
+      variant: {
+        default: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
+        secondary: 'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
+        destructive: 'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
+        outline: 'text-foreground',
+      },
+    },
+    defaultVariants: {
+      variant: 'default',
+    },
+  }
+);
+
+export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}
+
+const Badge = React.forwardRef<HTMLDivElement, BadgeProps>(({ className, variant, ...props }, ref) => {
+  return (
+    <div className={cn(badgeVariants({ variant }), className)} {...props} ref={ref} />
+  );
+});
+Badge.displayName = 'Badge';
+
+export { Badge, badgeVariants };
diff --git a/components/ui/Button.tsx b/components/ui/Button.tsx
new file mode 100644
index 0000000..0f850b9
--- /dev/null
+++ b/components/ui/Button.tsx
@@ -0,0 +1,48 @@
+import * as React from 'react'
+import { Slot } from '@radix-ui/react-slot'
+import { cva, type VariantProps } from 'class-variance-authority'
+import { cn } from '@/lib/utils'
+
+const buttonVariants = cva(
+  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-neutral-300',
+  {
+    variants: {
+      variant: {
+        default: 'bg-neutral-900 text-neutral-50 shadow hover:bg-neutral-900/90 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50/90',
+        destructive: 'bg-red-500 text-neutral-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-neutral-50 dark:hover:bg-red-900/90',
+        outline: 'border border-neutral-200 bg-white shadow-sm hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800 dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
+        secondary: 'bg-neutral-100 text-neutral-900 shadow-sm hover:bg-neutral-100/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80',
+        ghost: 'hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
+        link: 'text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50',
+      },
+      size: {
+        default: 'h-9 px-4 py-2',
+        sm: 'h-8 rounded-md px-3 text-xs',
+        lg: 'h-10 rounded-md px-8',
+        icon: 'h-9 w-9',
+      },
+    },
+    defaultVariants: {
+      variant: 'default',
+      size: 'default',
+    },
+  }
+)
+
+export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
+  asChild?: boolean
+}
+
+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({ className, variant, size, asChild = false, ...props }, ref) => {
+  const Comp = asChild ? Slot : 'button'
+  return (
+    <Comp
+      className={cn(buttonVariants({ variant, size }), className)}
+      ref={ref}
+      {...props}
+    />
+  )
+})
+Button.displayName = 'Button'
+
+export { Button, buttonVariants }
diff --git a/components/ui/Cards/Card.tsx b/components/ui/Cards/Card.tsx
new file mode 100644
index 0000000..9f892f2
--- /dev/null
+++ b/components/ui/Cards/Card.tsx
@@ -0,0 +1,54 @@
+import React from 'react';
+import { cn } from '@/lib/utils';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Card: React.FC<CardProps> = ({ className, children, ...props }) => {
+  return (
+    <div className={cn('rounded-lg border border-neutral-200 bg-white shadow-sm dark:border-neutral-800 dark:bg-neutral-950 text-neutral-900 dark:text-neutral-100', className)} {...props}>
+      {children}
+    </div>
+  );
+};
+
+interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const CardHeader: React.FC<CardHeaderProps> = ({ className, children, ...props }) => (
+  <div className={cn('flex flex-col space-y-1.5 p-6', className)} {...props}>
+    {children}
+  </div>
+);
+
+interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}
+
+const CardTitle: React.FC<CardTitleProps> = ({ className, children, ...props }) => (
+  <h3 className={cn('text-2xl font-semibold leading-none tracking-tight', className)} {...props}>
+    {children}
+  </h3>
+);
+
+interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}
+
+const CardDescription: React.FC<CardDescriptionProps> = ({ className, children, ...props }) => (
+  <p className={cn('text-sm text-neutral-500 dark:text-neutral-400', className)} {...props}>
+    {children}
+  </p>
+);
+
+interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const CardContent: React.FC<CardContentProps> = ({ className, children, ...props }) => (
+  <div className={cn('p-6 pt-0', className)} {...props}>
+    {children}
+  </div>
+);
+
+interface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const CardFooter: React.FC<CardFooterProps> = ({ className, children, ...props }) => (
+  <div className={cn('flex items-center p-6 pt-0', className)} {...props}>
+    {children}
+  </div>
+);
+
+export { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter };
diff --git a/components/ui/Cards/Flashcard.tsx b/components/ui/Cards/Flashcard.tsx
new file mode 100644
index 0000000..b732dbd
--- /dev/null
+++ b/components/ui/Cards/Flashcard.tsx
@@ -0,0 +1,56 @@
+import React from 'react';
+import { Card, CardContent } from '@/components/ui/card';
+import { Button } from '@/components/ui/button';
+import { X } from 'lucide-react';
+
+interface FlashcardProps {
+  question: string;
+  answer: string;
+  onRemove: () => void;
+}
+
+function createMarkup(content: string) {
+  return { __html: content };
+}
+
+const Flashcard: React.FC<FlashcardProps> = ({ question, answer, onRemove }) => {
+  const [isFlipped, setIsFlipped] = React.useState(false);
+
+  const handleClick = (e: React.MouseEvent) => {
+    if (!(e.target as HTMLElement).closest('button')) {
+      setIsFlipped(!isFlipped);
+    }
+  };
+
+  return (
+    <Card
+      className={
+        `bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer ${isFlipped ? 'bg-blue-50 dark:bg-blue-900' : ''}`
+      }
+      onClick={handleClick}
+    >
+      <CardContent className="p-4 relative">
+        <Button
+          variant="ghost"
+          size="icon"
+          className="absolute top-0.5 right-0.5 text-neutral-500 hover:text-red-500 dark:text-neutral-400 dark:hover:text-red-400 z-10"
+          onClick={(e) => {
+            e.stopPropagation();
+            onRemove();
+          }}
+        >
+          <X className="h-3 w-3" />
+        </Button>
+        <div className="text-sm">
+          {isFlipped ? (
+            <p className="text-blue-800 dark:text-blue-200 break-words font-medium" dangerouslySetInnerHTML={createMarkup(answer)} />
+          ) : (
+            <p className="text-neutral-900 dark:text-neutral-100 break-words" dangerouslySetInnerHTML={createMarkup(question)} />
+          )}
+        </div>
+      </CardContent>
+    </Card>
+  );
+};
+
+export default Flashcard;
diff --git a/components/ui/Cards/FlashcardCollection.tsx b/components/ui/Cards/FlashcardCollection.tsx
new file mode 100644
index 0000000..99446f5
--- /dev/null
+++ b/components/ui/Cards/FlashcardCollection.tsx
@@ -0,0 +1,42 @@
+import React from 'react';
+import { Button } from '@/components/ui/button';
+import { Plus, Trash2 } from 'lucide-react';
+import Flashcard from './Flashcard';
+
+interface FlashcardCollectionProps {
+  cards: Array<{ question: string; answer: string }>;
+  onRemoveCard: (index: number) => void;
+  onAddCard: () => void;
+  onClearCollection: () => void;
+}
+
+export function FlashcardCollection({ cards, onRemoveCard, onAddCard, onClearCollection }: FlashcardCollectionProps) {
+  return (
+    <div className="flex flex-col h-full">
+      <div className="flex-grow overflow-y-auto pr-2">
+        <div className="space-y-1">
+          {cards.map((card, index) => (
+            <Flashcard
+              key={index}
+              question={card.question}
+              answer={card.answer}
+              onRemove={() => onRemoveCard(index)}
+            />
+          ))}
+        </div>
+      </div>
+      {cards.length > 0 && (
+        <div className="flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700">
+          <Button onClick={onAddCard} size="sm" className="flex items-center">
+            <Plus className="h-4 w-4 mr-1" />
+            Save Card(s)
+          </Button>
+          <Button onClick={onClearCollection} size="sm" variant="destructive" className="flex items-center">
+            <Trash2 className="h-4 w-4 mr-1" />
+            Clear
+          </Button>
+        </div>
+      )}
+    </div>
+  );
+}
diff --git a/components/ui/Cards/LanguageCard.tsx b/components/ui/Cards/LanguageCard.tsx
new file mode 100644
index 0000000..674df07
--- /dev/null
+++ b/components/ui/Cards/LanguageCard.tsx
@@ -0,0 +1,45 @@
+import React from 'react';
+import { Card, CardContent } from '@/components/ui/card';
+import { Button } from '@/components/ui/button';
+import { X } from 'lucide-react';
+
+interface LanguageCardProps {
+  word: string;
+  translation: string;
+  example: string;
+  explanation: string;
+  onRemove: () => void;
+}
+
+function createMarkup(content: string) {
+  return { __html: content };
+}
+
+const LanguageCard: React.FC<LanguageCardProps> = ({ word, translation, example, explanation, onRemove }) => {
+  return (
+    <Card className="bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
+      <CardContent className="flex flex-col gap-4 p-4">
+        <div className="flex justify-between items-start mb-2">
+          <div className="flex items-center">
+            <Checkbox
+              id={`select-${word}`}
+              checked={false}
+              onCheckedChange={() => { /* Implement selection logic if needed */ }}
+              className="mr-2"
+            />
+            <h3 className="text-lg font-semibold text-neutral-900 dark:text-white">{word}</h3>
+          </div>
+          <div className="flex space-x-1">
+            <Button variant="ghost" size="icon" onClick={onRemove}>
+              <X size={16} className={"text-red-500 dark:text-red-400"} />
+            </Button>
+          </div>
+        </div>
+        <p className="text-sm text-gray-700 dark:text-gray-300 italic mb-2" dangerouslySetInnerHTML={createMarkup(example)} />
+        <p className="text-sm text-green-800 dark:text-green-200" dangerouslySetInnerHTML={createMarkup(explanation)} />
+      </CardContent>
+    </Card>
+  );
+};
+
+export default LanguageCard;
diff --git a/components/ui/Cards/LanguageCardCollection.tsx b/components/ui/Cards/LanguageCardCollection.tsx
new file mode 100644
index 0000000..da351e5
--- /dev/null
+++ b/components/ui/Cards/LanguageCardCollection.tsx
@@ -0,0 +1,44 @@
+import React from 'react';
+import { Button } from '@/components/ui/button';
+import { Plus, Trash2 } from 'lucide-react';
+import LanguageCard from './LanguageCard';
+
+interface LanguageCardCollectionProps {
+  cards: Array<{ word: string; translation: string; example: string; explanation: string }>;
+  onRemoveCard: (index: number) => void;
+  onAddCard: () => void;
+  onClearCollection: () => void;
+}
+
+export function LanguageCardCollection({ cards, onRemoveCard, onAddCard, onClearCollection }: LanguageCardCollectionProps) {
+  return (
+    <div className="flex flex-col h-full">
+      <div className="flex-grow overflow-y-auto pr-2">
+        <div className="space-y-1">
+          {cards.map((card, index) => (
+            <LanguageCard
+              key={index}
+              word={card.word}
+              translation={card.translation}
+              example={card.example}
+              explanation={card.explanation}
+              onRemove={() => onRemoveCard(index)}
+            />
+          ))}
+        </div>
+      </div>
+      {cards.length > 0 && (
+        <div className="flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700">
+          <Button onClick={onAddCard} size="sm" className="flex items-center">
+            <Plus className="h-4 w-4 mr-1" />
+            Save Card(s)
+          </Button>
+          <Button onClick={onClearCollection} size="sm" variant="destructive" className="flex items-center">
+            <Trash2 className="h-4 w-4 mr-1" />
+            Clear
+          </Button>
+        </div>
+      )}
+    </div>
+  );
+}
diff --git a/components/ui/Cards/PieChart.tsx b/components/ui/Cards/PieChart.tsx
new file mode 100644
index 0000000..af83903
--- /dev/null
+++ b/components/ui/Cards/PieChart.tsx
@@ -0,0 +1,25 @@
+import React from 'react';
+import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';
+import { cn } from '@/lib/utils';
+
+interface PieChartProps {
+  data: Array<{ name: string; value: number }>;
+  colors: string[];
+}
+
+const PieChartComponent: React.FC<PieChartProps> = ({ data, colors }) => {
+  return (
+    <ResponsiveContainer width="100%" height={300}>
+      <PieChart>
+        <Pie data={data} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} label>
+          {data.map((entry, index) => (
+            <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
+          ))}
+        </Pie>
+        <Tooltip />
+      </PieChart>
+    </ResponsiveContainer>
+  );
+};
+
+export default PieChartComponent;
diff --git a/components/ui/Dialog.tsx b/components/ui/Dialog.tsx
new file mode 100644
index 0000000..ac2c03b
--- /dev/null
+++ b/components/ui/Dialog.tsx
@@ -0,0 +1,41 @@
+'use client';
+import * as React from 'react';
+import * as DialogPrimitive from '@radix-ui/react-dialog';
+import { Cross2Icon } from '@radix-ui/react-icons';
+import { cn } from '@/lib/utils';
+
+const Dialog = DialogPrimitive.Root;
+const DialogTrigger = DialogPrimitive.Trigger;
+const DialogPortal = DialogPrimitive.Portal;
+const DialogClose = DialogPrimitive.Close;
+
+const DialogOverlay = React.forwardRef(
+  (props, ref) => (
+    <DialogPrimitive.Overlay
+      ref={ref}
+      className={cn('fixed inset-0 z-50 bg-black/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0', props.className)}
+      {...props}
+    />
+  )
+);
+DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;
+
+const DialogContent = React.forwardRef(
+  (props, ref) => (
+    <DialogPortal>
+      <DialogPrimitive.Content
+        ref={ref}
+        className={cn('fixed left-1/2 top-1/2 z-50 max-w-md w-full bg-white dark:bg-neutral-700 rounded-lg p-6 shadow-lg transform -translate-x-1/2 -translate-y-1/2 animate-in fade-in-0 zoom-in-95', props.className)}
+        {...props}
+      >
+        <DialogPrimitive.Close className="absolute top-4 right-4 rounded-sm p-2 hover:bg-neutral-100 dark:hover:bg-neutral-600 transition">
+          <Cross2Icon className="h-4 w-4 text-gray-500 dark:text-gray-300" />
+        </DialogPrimitive.Close>
+        {props.children}
+      </DialogPrimitive.Content>
+    </DialogPortal>
+  )
+);
+DialogContent.displayName = DialogPrimitive.Content.displayName;
+
+export { Dialog, DialogTrigger, DialogContent, DialogOverlay, DialogClose };
diff --git a/components/ui/DropdownMenu.tsx b/components/ui/DropdownMenu.tsx
new file mode 100644
index 0000000..de9a6ae
--- /dev/null
+++ b/components/ui/DropdownMenu.tsx
@@ -0,0 +1,170 @@
+'use client';
+import * as React from 'react';
+import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
+import { Check, ChevronRight, Circle } from 'lucide-react';
+import { cn } from '@/lib/utils';
+
+const DropdownMenu = DropdownMenuPrimitive.Root;
+const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;
+const DropdownMenuGroup = DropdownMenuPrimitive.Group;
+const DropdownMenuPortal = DropdownMenuPrimitive.Portal;
+const DropdownMenuSub = DropdownMenuPrimitive.Sub;
+const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;
+
+const DropdownMenuSubTrigger = React.forwardRef(
+  (props, ref) => (
+    <DropdownMenuPrimitive.SubTrigger
+      ref={ref}
+      className={cn(
+        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
+        props.inset && 'pl-8',
+        props.className
+      )}
+      {...props}
+    >
+      {props.children}
+      <ChevronRight className="ml-auto h-4 w-4" />
+    </DropdownMenuPrimitive.SubTrigger>
+  )
+);
+DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;
+
+const DropdownMenuSubContent = React.forwardRef(
+  (props, ref) => (
+    <DropdownMenuPrimitive.SubContent
+      ref={ref}
+      className={cn(
+        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
+        props.className
+      )}
+      {...props}
+    />
+  )
+);
+DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;
+
+const DropdownMenuContent = React.forwardRef(
+  (props, ref) => (
+    <DropdownMenuPortal>
+      <DropdownMenuPrimitive.Content
+        ref={ref}
+        sideOffset={props.sideOffset || 4}
+        className={cn(
+          'z-50 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
+          props.className
+        )}
+        {...props}
+      />
+    </DropdownMenuPortal>
+  )
+);
+DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;
+
+const DropdownMenuItem = React.forwardRef(
+  (props, ref) => (
+    <DropdownMenuPrimitive.Item
+      ref={ref}
+      className={cn(
+        'relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 hover:text-gray-900 dark:hover:text-gray-100 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
+        props.inset && 'pl-8',
+        props.className
+      )}
+      {...props}
+    />
+  )
+);
+DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;
+
+const DropdownMenuCheckboxItem = React.forwardRef(
+  (props, ref) => (
+    <DropdownMenuPrimitive.CheckboxItem
+      ref={ref}
+      className={cn(
+        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
+        props.className
+      )}
+      checked={props.checked}
+      {...props}
+    >
+      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
+        <DropdownMenuPrimitive.ItemIndicator>
+          <Check className="h-4 w-4" />
+        </DropdownMenuPrimitive.ItemIndicator>
+      </span>
+      {props.children}
+    </DropdownMenuPrimitive.CheckboxItem>
+  )
+);
+DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;
+
+const DropdownMenuRadioItem = React.forwardRef(
+  (props, ref) => (
+    <DropdownMenuPrimitive.RadioItem
+      ref={ref}
+      className={cn(
+        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
+        props.className
+      )}
+      {...props}
+    >
+      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
+        <DropdownMenuPrimitive.ItemIndicator>
+          <Circle className="h-2 w-2 fill-current" />
+        </DropdownMenuPrimitive.ItemIndicator>
+      </span>
+      {props.children}
+    </DropdownMenuPrimitive.RadioItem>
+  )
+);
+DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;
+
+const DropdownMenuLabel = React.forwardRef(
+  (props, ref) => (
+    <DropdownMenuPrimitive.Label
+      ref={ref}
+      className={cn(
+        'px-2 py-1.5 text-sm font-semibold',
+        props.inset && 'pl-8',
+        props.className
+      )}
+      {...props}
+    />
+  )
+);
+DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;
+
+const DropdownMenuSeparator = React.forwardRef(
+  (props, ref) => (
+    <DropdownMenuPrimitive.Separator
+      ref={ref}
+      className={cn('-mx-1 my-1 h-px bg-muted', props.className)}
+      {...props}
+    />
+  )
+);
+DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;
+
+const DropdownMenuShortcut = React.forwardRef(
+  (props, ref) => (
+    <span className={cn('ml-auto text-xs tracking-widest opacity-60', props.className)} {...props} ref={ref} />
+  )
+);
+DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';
+
+export {
+  DropdownMenu,
+  DropdownMenuTrigger,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuCheckboxItem,
+  DropdownMenuRadioItem,
+  DropdownMenuLabel,
+  DropdownMenuSeparator,
+  DropdownMenuShortcut,
+  DropdownMenuGroup,
+  DropdownMenuPortal,
+  DropdownMenuSub,
+  DropdownMenuSubContent,
+  DropdownMenuSubTrigger,
+  DropdownMenuRadioGroup,
+};
diff --git a/components/ui/Input.tsx b/components/ui/Input.tsx
new file mode 100644
index 0000000..4d9cc90
--- /dev/null
+++ b/components/ui/Input.tsx
@@ -0,0 +1,21 @@
+import * as React from 'react';
+import { cn } from '@/lib/utils';
+
+export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}
+
+const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {
+  return (
+    <input
+      type={type}
+      ref={ref}
+      className={cn(
+        'flex h-9 w-full rounded-md border border-neutral-300 bg-transparent px-4 py-2 text-sm placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-700 dark:placeholder-neutral-400 dark:text-white',
+        className
+      )}
+      {...props}
+    />
+  );
+});
+Input.displayName = 'Input';
+
+export { Input };
diff --git a/components/ui/Layout.tsx b/components/ui/Layout.tsx
new file mode 100644
index 0000000..19f8220
--- /dev/null
+++ b/components/ui/Layout.tsx
@@ -0,0 +1,21 @@
+'use client';
+import React from 'react';
+import { cn } from '@/lib/utils';
+import ThemeToggle from './ThemeToggle';
+import { sharedStyles } from '@/utils/styles';
+
+const Layout = ({ children }: { children: React.ReactNode }) => {
+  return (
+    <div className={cn('min-h-screen flex flex-col bg-background text-foreground')}> 
+      <header className="flex justify-end p-4 border-b bg-white dark:bg-neutral-800">
+        <ThemeToggle />
+      </header>
+      <main className="flex-grow p-4">{children}</main>
+      <footer className="p-4 border-t bg-white dark:bg-neutral-800 text-center text-sm text-gray-500">
+        © 2023 Recall AI. All rights reserved.
+      </footer>
+    </div>
+  );
+};
+
+export default Layout;
diff --git a/components/ui/LoadingSpinner.tsx b/components/ui/LoadingSpinner.tsx
new file mode 100644
index 0000000..7f06098
--- /dev/null
+++ b/components/ui/LoadingSpinner.tsx
@@ -0,0 +1,18 @@
+'use client';
+import React from 'react';
+import { Loader2 } from 'lucide-react';
+
+interface LoadingSpinnerProps {
+  size?: number;
+  color?: string;
+}
+
+const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 8, color = 'blue-500' }) => {
+  return (
+    <div className="flex items-center justify-center h-full">
+      <Loader2 className={`animate-spin h-${size} w-${size} text-${color}`} />
+    </div>
+  );
+};
+
+export default LoadingSpinner;
diff --git a/components/ui/Providers.tsx b/components/ui/Providers.tsx
new file mode 100644
index 0000000..00621c9
--- /dev/null
+++ b/components/ui/Providers.tsx
@@ -0,0 +1,12 @@
+'use client'
+import { SessionProvider } from 'next-auth/react'
+import { Provider } from 'react-redux'
+import { store } from '@/app/store'
+
+export function Providers({ children }: { children: React.ReactNode }) {
+  return (
+    <SessionProvider>
+      <Provider store={store}>{children}</Provider>
+    </SessionProvider>
+  )
+}
diff --git a/components/ui/Select.tsx b/components/ui/Select.tsx
new file mode 100644
index 0000000..d4e9f0d
--- /dev/null
+++ b/components/ui/Select.tsx
@@ -0,0 +1,56 @@
+'use client';
+import * as React from 'react';
+import * as SelectPrimitive from '@radix-ui/react-select';
+import { Check, ChevronDown } from 'lucide-react';
+import { cn } from '@/lib/utils';
+
+const Select = SelectPrimitive.Root;
+const SelectGroup = SelectPrimitive.Group;
+const SelectValue = SelectPrimitive.Value;
+
+const SelectTrigger = React.forwardRef(
+  (props, ref) => (
+    <SelectPrimitive.Trigger
+      ref={ref}
+      className={cn('flex items-center justify-between rounded-md border border-neutral-300 bg-white px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white', props.className)}
+      {...props}
+    >
+      <SelectPrimitive.Value placeholder="Select an option" />
+      <SelectPrimitive.Icon asChild>
+        <ChevronDown className="h-4 w-4 text-gray-500" />
+      </SelectPrimitive.Icon>
+    </SelectPrimitive.Trigger>
+  )
+);
+SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;
+
+const SelectContent = React.forwardRef(
+  (props, ref) => (
+    <SelectPrimitive.Portal>
+      <SelectPrimitive.Content
+        ref={ref}
+        className={cn('z-50 overflow-hidden rounded-md border border-neutral-300 bg-white shadow-lg dark:bg-neutral-700 dark:border-neutral-600', props.className)}
+        {...props}
+      />
+    </SelectPrimitive.Portal>
+  )
+);
+SelectContent.displayName = SelectPrimitive.Content.displayName;
+
+const SelectItem = React.forwardRef(
+  (props, ref) => (
+    <SelectPrimitive.Item
+      ref={ref}
+      className={cn('relative flex items-center rounded-sm px-3 py-2 text-sm text-neutral-700 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-neutral-600', props.className)}
+      {...props}
+    >
+      <SelectPrimitive.ItemIndicator className="absolute left-2 flex items-center">
+        <Check className="h-4 w-4 text-blue-500" />
+      </SelectPrimitive.ItemIndicator>
+      <SelectPrimitive.ItemText>{props.children}</SelectPrimitive.ItemText>
+    </SelectPrimitive.Item>
+  )
+);
+SelectItem.displayName = SelectPrimitive.Item.displayName;
+
+export { Select, SelectGroup, SelectValue, SelectTrigger, SelectContent, SelectItem };
diff --git a/components/common/SignOutButton.tsx b/components/ui/SignOutButton.tsx
similarity index 55%
rename from components/common/SignOutButton.tsx
rename to components/ui/SignOutButton.tsx
index a7118f1..94756f3 100644
--- a/components/common/SignOutButton.tsx
+++ b/components/ui/SignOutButton.tsx
@@ -1,14 +1,14 @@
-import { signOut } from "next-auth/react"
-import { Button } from "@/components/ui/button"
-import { useRouter } from "next/navigation"
+import { signOut } from 'next-auth/react';
+import { Button } from '@/components/ui/button';
+import { useRouter } from 'next/navigation';
 
 const SignOutButton = () => {
-  const router = useRouter()
+  const router = useRouter();
 
   const handleSignOut = async () => {
-    await signOut({ redirect: false })
-    router.push('/')
-  }
+    await signOut({ redirect: false });
+    router.push('/');
+  };
 
   return (
     <Button
diff --git a/components/ui/Slider.tsx b/components/ui/Slider.tsx
new file mode 100644
index 0000000..3cb5db0
--- /dev/null
+++ b/components/ui/Slider.tsx
@@ -0,0 +1,22 @@
+'use client';
+import * as React from 'react';
+import * as SliderPrimitive from '@radix-ui/react-slider';
+import { cn } from '@/lib/utils';
+
+const Slider = React.forwardRef(
+  (props, ref) => (
+    <SliderPrimitive.Root
+      ref={ref}
+      className={cn('relative flex w-full touch-none select-none items-center', props.className)}
+      {...props}
+    >
+      <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
+        <SliderPrimitive.Range className="absolute h-full bg-primary" />
+      </SliderPrimitive.Track>
+      <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background shadow-lg transition-transform focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
+    </SliderPrimitive.Root>
+  )
+);
+Slider.displayName = SliderPrimitive.Root.displayName;
+
+export { Slider };
diff --git a/components/ui/Tabs.tsx b/components/ui/Tabs.tsx
new file mode 100644
index 0000000..ef23813
--- /dev/null
+++ b/components/ui/Tabs.tsx
@@ -0,0 +1,11 @@
+'use client';
+import * as React from 'react';
+import * as TabsPrimitive from '@radix-ui/react-tabs';
+import { cn } from '@/lib/utils';
+
+const Tabs = TabsPrimitive.Root;
+const TabsList = TabsPrimitive.List;
+const TabsTrigger = TabsPrimitive.Trigger;
+const TabsContent = TabsPrimitive.Content;
+
+export { Tabs, TabsList, TabsTrigger, TabsContent };
diff --git a/components/ui/ThemeToggle.tsx b/components/ui/ThemeToggle.tsx
new file mode 100644
index 0000000..7128fed
--- /dev/null
+++ b/components/ui/ThemeToggle.tsx
@@ -0,0 +1,21 @@
+'use client';
+import { useDarkMode } from '@/hooks/useDarkMode';
+import { Sun, Moon } from 'lucide-react';
+import { Button } from '@/components/ui/button';
+
+const ThemeToggle = () => {
+  const { theme, toggleTheme } = useDarkMode();
+
+  return (
+    <Button
+      onClick={toggleTheme}
+      variant="ghost"
+      size="icon"
+      aria-label="Toggle Theme"
+    >
+      {theme === 'light' ? <Moon className="h-4 w-4" /> : <Sun className="h-4 w-4" />}
+    </Button>
+  );
+};
+
+export default ThemeToggle;
diff --git a/components/ui/ToggleSwitch.tsx b/components/ui/ToggleSwitch.tsx
new file mode 100644
index 0000000..bc31276
--- /dev/null
+++ b/components/ui/ToggleSwitch.tsx
@@ -0,0 +1,19 @@
+'use client';
+import * as React from 'react';
+import * as SwitchPrimitives from '@radix-ui/react-switch';
+import { cn } from '@/lib/utils';
+
+const Switch = React.forwardRef(
+  (props, ref) => (
+    <SwitchPrimitives.Root
+      ref={ref}
+      className={cn('peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent bg-input dark:bg-neutral-700 focus:ring-2 focus:ring-blue-500 dark:focus:ring-neutral-300 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary', props.className)}
+      {...props}
+    >
+      <SwitchPrimitives.Thumb className={cn('block h-5 w-5 rounded-full bg-background transition-transform peer-data-[state=checked]:translate-x-5')} />
+    </SwitchPrimitives.Root>
+  )
+);
+Switch.displayName = SwitchPrimitives.Root.displayName;
+
+export { Switch };
diff --git a/components/ui/Tooltip.tsx b/components/ui/Tooltip.tsx
new file mode 100644
index 0000000..674e76e
--- /dev/null
+++ b/components/ui/Tooltip.tsx
@@ -0,0 +1,29 @@
+'use client';
+import * as React from 'react';
+import * as TooltipPrimitive from '@radix-ui/react-tooltip';
+import { cn } from '@/lib/utils';
+
+const TooltipProvider = TooltipPrimitive.Provider;
+const Tooltip = TooltipPrimitive.Root;
+const TooltipTrigger = TooltipPrimitive.Trigger;
+const TooltipContent = React.forwardRef<
+  React.ElementRef<typeof TooltipPrimitive.Content>,
+  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
+>(({ className, sideOffset = 4, ...props }, ref) => (
+  <TooltipPrimitive.Content
+    ref={ref}
+    sideOffset={sideOffset}
+    className={cn(
+      'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md',
+      'data-[state=delayed-open]:data-[side=top]:animate-slideDownAndFade',
+      'data-[state=delayed-open]:data-[side=right]:animate-slideLeftAndFade',
+      'data-[state=delayed-open]:data-[side=bottom]:animate-slideUpAndFade',
+      'data-[state=delayed-open]:data-[side=left]:animate-slideRightAndFade',
+      className
+    )}
+    {...props}
+  />
+));
+TooltipContent.displayName = 'TooltipContent';
+
+export { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent };
diff --git a/components/ui/UseToast.tsx b/components/ui/UseToast.tsx
new file mode 100644
index 0000000..29cb89a
--- /dev/null
+++ b/components/ui/UseToast.tsx
@@ -0,0 +1,25 @@
+'use client'
+import { useState, useEffect, useCallback } from 'react'
+import { Toaster, toast as uiToast } from '@/components/ui/toast'
+
+interface ToastProps {
+  title: string
+  description?: string
+  variant?: 'default' | 'destructive' | 'success'
+}
+
+export function useToast() {
+  const [toasts, setToasts] = useState<ToastProps[]>([])
+
+  const toast = useCallback(({ title, description, variant = 'default' }: ToastProps) => {
+    const id = Date.now()
+    setToasts(prev => [...prev, { title, description, variant }])
+    setTimeout(() => {
+      setToasts(prev => prev.filter(toast => toast.title !== title))
+    }, 5000)
+  }, [])
+
+  return { toasts, toast }
+}
+
+export default Toaster
diff --git a/components/ui/button.tsx b/components/ui/button.tsx
index c1cc153..31e09b8 100644
--- a/components/ui/button.tsx
+++ b/components/ui/button.tsx
@@ -1,8 +1,7 @@
-import * as React from "react"
-import { Slot } from "@radix-ui/react-slot"
-import { cva, type VariantProps } from "class-variance-authority"
-
-import { cn } from "@/lib/utils"
+import * as React from "react";
+import { Slot } from "@radix-ui/react-slot";
+import { cva, type VariantProps } from "class-variance-authority";
+import { cn } from "@/lib/utils";
 
 const buttonVariants = cva(
   "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-neutral-300",
@@ -17,7 +16,8 @@ const buttonVariants = cva(
           "border border-neutral-200 bg-white shadow-sm hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800 dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50",
         secondary:
           "bg-neutral-100 text-neutral-900 shadow-sm hover:bg-neutral-100/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80",
-        ghost: "hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50",
+        ghost:
+          "hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50",
         link: "text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50",
       },
       size: {
@@ -32,26 +32,27 @@ const buttonVariants = cva(
       size: "default",
     },
   }
-)
+);
 
 export interface ButtonProps
   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
     VariantProps<typeof buttonVariants> {
-  asChild?: boolean
+  asChild?: boolean;
 }
 
 const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
   ({ className, variant, size, asChild = false, ...props }, ref) => {
-    const Comp = asChild ? Slot : "button"
+    const Comp = asChild ? Slot : "button";
     return (
       <Comp
         className={cn(buttonVariants({ variant, size, className }))}
         ref={ref}
         {...props}
       />
-    )
+    );
   }
-)
-Button.displayName = "Button"
+);
+
+Button.displayName = "Button";
 
-export { Button, buttonVariants }
+export { Button, buttonVariants };
diff --git a/components/ui/calendar.tsx b/components/ui/calendar.tsx
index 342ad7a..e38e527 100644
--- a/components/ui/calendar.tsx
+++ b/components/ui/calendar.tsx
@@ -5,7 +5,7 @@ import { ChevronLeft, ChevronRight } from "lucide-react"
 import { DayPicker } from "react-day-picker"
 
 import { cn } from "@/lib/utils"
-import { buttonVariants } from "@/components/ui/button"
+import { buttonVariants } from "@/app/components/ui/button"
 
 export type CalendarProps = React.ComponentProps<typeof DayPicker>
 
diff --git a/components/ui/toaster.tsx b/components/ui/toaster.tsx
index 099c7f9..391dfea 100644
--- a/components/ui/toaster.tsx
+++ b/components/ui/toaster.tsx
@@ -7,8 +7,8 @@ import {
     ToastProvider,
     ToastTitle,
     ToastViewport,
-} from "@/components/ui/toast"
-import { useToast } from "@/components/ui/use-toast"
+} from "@/app/components/ui/toast"
+import { useToast } from "@/app/components/ui/use-toast"
 
 export function Toaster() {
     const { toasts } = useToast()
diff --git a/components/ui/use-toast.tsx b/components/ui/use-toast.tsx
index a82d8dd..5025e19 100644
--- a/components/ui/use-toast.tsx
+++ b/components/ui/use-toast.tsx
@@ -3,7 +3,7 @@ import * as React from "react"
 import type {
     ToastActionElement,
     ToastProps,
-} from "@/components/ui/toast"
+} from "@/app/components/ui/toast"
 
 const TOAST_LIMIT = 1
 const TOAST_REMOVE_DELAY = 1000000
diff --git a/hooks/hooks/useDarkMode.ts b/hooks/hooks/useDarkMode.ts
new file mode 100644
index 0000000..c54a601
--- /dev/null
+++ b/hooks/hooks/useDarkMode.ts
@@ -0,0 +1,29 @@
+'use client'
+import { useState, useEffect } from 'react'
+
+export function useDarkMode() {
+  const [theme, setTheme] = useState<'light' | 'dark'>('light')
+
+  useEffect(() => {
+    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null
+    if (savedTheme) {
+      setTheme(savedTheme)
+      document.documentElement.classList.add(savedTheme)
+    } else {
+      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
+      const defaultTheme = prefersDark ? 'dark' : 'light'
+      setTheme(defaultTheme)
+      document.documentElement.classList.add(defaultTheme)
+    }
+  }, [])
+
+  const toggleTheme = () => {
+    const newTheme: 'light' | 'dark' = theme === 'light' ? 'dark' : 'light'
+    document.documentElement.classList.remove(theme)
+    document.documentElement.classList.add(newTheme)
+    setTheme(newTheme)
+    localStorage.setItem('theme', newTheme)
+  }
+
+  return { theme, toggleTheme }
+}
diff --git a/hooks/useDarkMode.ts b/hooks/useDarkMode.ts
new file mode 100644
index 0000000..e69de29
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
index 7a2f255..266d2a8 100644
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@ -11,13 +11,13 @@ generator client {
 }
 
 model User {
-  id             String           @id @default(auto()) @map("_id") @db.ObjectId
-  email          String           @unique
+  id             String         @id @default(auto()) @map("_id") @db.ObjectId
+  email          String         @unique
   name           String?
   emailVerified  DateTime?
   image          String?
-  createdAt      DateTime         @default(now())
-  updatedAt      DateTime         @updatedAt
+  createdAt      DateTime       @default(now())
+  updatedAt      DateTime       @updatedAt
   documents      Document[]
   flashcards     Flashcard[]
   learningStats  LearningStats?
@@ -40,7 +40,6 @@ model Account {
   session_state      String?
 
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
-
   @@unique([provider, providerAccountId])
 }
 
@@ -49,7 +48,8 @@ model Session {
   sessionToken String   @unique
   userId       String   @db.ObjectId
   expires      DateTime
-  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
+
+  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 }
 
 model VerificationToken {
@@ -62,40 +62,43 @@ model VerificationToken {
 }
 
 model Document {
-  id           String         @id @default(auto()) @map("_id") @db.ObjectId
-  title        String
-  fileType     String
-  fileUrl      String
-  createdAt    DateTime       @default(now())
-  updatedAt    DateTime       @updatedAt
-  user         User           @relation(fields: [userId], references: [id])
-  userId       String         @db.ObjectId
-  flashcards   Flashcard[]
+  id        String     @id @default(auto()) @map("_id") @db.ObjectId
+  title     String
+  fileType  String
+  fileUrl   String
+  createdAt DateTime   @default(now())
+  updatedAt DateTime   @updatedAt
+  userId    String     @db.ObjectId
+
+  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
+  flashcards Flashcard[]
 }
 
 model Flashcard {
-  id           String   @id @default(auto()) @map("_id") @db.ObjectId
-  type         String   // "flashcard" or "language"
-  question     String?
-  answer       String?
-  example      String?
-  explanation  String?
-  createdAt    DateTime @default(now())
-  updatedAt    DateTime @updatedAt
-  lastReviewed DateTime?
-  nextReview   DateTime?
-  user         User     @relation(fields: [userId], references: [id])
-  userId       String   @db.ObjectId
-  document     Document? @relation(fields: [documentId], references: [id])
-  documentId   String?   @db.ObjectId
+  id            String         @id @default(auto()) @map("_id") @db.ObjectId
+  type          String         // "flashcard" or "language"
+  question      String?
+  answer        String?
+  example       String?
+  explanation   String?
+  createdAt     DateTime       @default(now())
+  updatedAt     DateTime       @updatedAt
+  lastReviewed  DateTime?
+  nextReview    DateTime?
+  userId        String         @db.ObjectId
+  documentId    String?        @db.ObjectId
+
+  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
+  document  Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
 }
 
 model LearningStats {
-  id                String   @id @default(auto()) @map("_id") @db.ObjectId
-  totalFlashcards   Int      @default(0)
-  lastStudySession  DateTime?
-  createdAt         DateTime @default(now())
-  updatedAt         DateTime @updatedAt
-  user              User     @relation(fields: [userId], references: [id])
-  userId            String   @unique @db.ObjectId
-}
\ No newline at end of file
+  id              String   @id @default(auto()) @map("_id") @db.ObjectId
+  totalFlashcards Int      @default(0)
+  lastStudySession DateTime?
+  createdAt       DateTime @default(now())
+  updatedAt       DateTime @updatedAt
+  userId          String   @unique @db.ObjectId
+
+  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
+}
diff --git a/styles/globals.css b/styles/globals.css
new file mode 100644
index 0000000..e69de29
diff --git a/tailwind.config.ts b/tailwind.config.ts
index d43da91..4c537fe 100644
--- a/tailwind.config.ts
+++ b/tailwind.config.ts
@@ -1,6 +1,7 @@
 import type { Config } from "tailwindcss";
 
 const config: Config = {
+  darkMode: "class",
   content: [
     "./pages/**/*.{js,ts,jsx,tsx,mdx}",
     "./components/**/*.{js,ts,jsx,tsx,mdx}",
@@ -11,6 +12,11 @@ const config: Config = {
       colors: {
         background: "var(--background)",
         foreground: "var(--foreground)",
+        muted: "#f5f5f5",
+        primary: "#3b82f6",
+        secondary: "#10b981",
+        destructive: "#ef4444",
+        ring: "#cbd5e1",
       },
     },
   },
diff --git a/utils/contentUtils.ts b/utils/contentUtils.ts
index 7f3c97e..1cd5052 100644
--- a/utils/contentUtils.ts
+++ b/utils/contentUtils.ts
@@ -45,14 +45,10 @@ export const handleGenerateContent = async (
     } else if (mode === "explain") {
         prompt = customPrompts.explain.replace("[TEXT]", text)
     } else if (mode === "language") {
-        prompt = `${customPrompts.language}
-            Please provide the following for the word or phrase "[TEXT]":
-            <W>The word or phrase itself</W>
-            <T>The translation in [LANGUAGE]</T>
-            <E>An example sentence using the word or phrase</E>
-            <X>A short explanation or definition</X>`
-            .replace("[TEXT]", text)
-            .replace("[LANGUAGE]", languageSubMode === "english" ? "French" : "English")
+        prompt = `${customPrompts.language} Please provide the following for the word or phrase "${text}": <W>The word or phrase itself</W>
+<T>The translation in ${languageSubMode === 'english' ? 'French' : 'English'}</T>
+<E>An example sentence using the word or phrase</E>
+<X>A short explanation or definition</X>`
     }
 
     try {
@@ -63,9 +59,10 @@ export const handleGenerateContent = async (
     } catch (error) {
         console.error("Error generating content:", error);
         toast({
-            title: "Error",
-            description: "An error occurred while generating content. Please try again.",
-        });
+            title: 'Error',
+            description: 'An error occurred while generating content. Please try again.',
+            variant: 'destructive',
+        })
         return null;
     }
 }
@@ -89,9 +86,10 @@ export const parseAndAddCards = (
         } catch (error) {
             console.error("Error parsing content:", error);
             toast({
-                title: "Error",
-                description: "An error occurred while parsing the generated content. Please try again.",
-            });
+                title: 'Error',
+                description: 'An error occurred while parsing the generated content. Please try again.',
+                variant: 'destructive',
+            })
         }
     } else if (mode === "explain") {
         setExplanation(content);
@@ -125,10 +123,10 @@ async function generateContent(apiKey: string, model: string, prompt: string): P
 function parseGeneratedContent(content: any): ParsedContent {
     const contentString = typeof content === 'string' ? content : JSON.stringify(content);
 
-    const wordMatch = contentString.match(/<W>(.*?)<\/W>/s);
-    const translationMatch = contentString.match(/<T>(.*?)<\/T>/s);
-    const exampleMatch = contentString.match(/<E>(.*?)<\/E>/s);
-    const explanationMatch = contentString.match(/<X>(.*?)<\/X>/s);
+    const wordMatch = content.match(/<W>(.*?)<\\/W>/s)
+    const translationMatch = content.match(/<T>(.*?)<\\/T>/s)
+    const exampleMatch = content.match(/<E>(.*?)<\\/E>/s)
+    const explanationMatch = content.match(/<X>(.*?)<\\/X>/s)
 
     if (!wordMatch || !translationMatch || !exampleMatch || !explanationMatch) {
         console.error('Invalid content format:', contentString);
diff --git a/utils/styles.ts b/utils/styles.ts
new file mode 100644
index 0000000..b3cc890
--- /dev/null
+++ b/utils/styles.ts
@@ -0,0 +1,10 @@
+export const sharedStyles = {
+  button: 'px-4 py-2 rounded-md font-semibold focus:outline-none focus:ring-2 focus:ring-offset-2',
+  card: 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg',
+  cardContent: 'p-4',
+  header: 'text-lg font-bold text-gray-900 dark:text-white',
+  input: 'w-full px-3 py-2 border rounded-md focus:ring focus:ring-blue-500 dark:bg-gray-700 dark:text-white dark:border-gray-600',
+  label: 'block text-sm font-medium text-gray-700 dark:text-gray-200',
+  checkbox: 'h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 dark:border-gray-600',
+  // Add more shared styles as needed
+};

</code-diffs>

<output_format>
  <![CDATA[
  <use-artifact-here>
<files_content>
  <file>
      <path>path/to/file</path>
      <description>Description of the issue and the correction made.</description>
      <analyze>Analyze the old code, and new implement, explain why we need to improve the new code.</description>
      <code>Corrected code snippet</code>
  </file>
</files_content>
  </use-artifact-here>
  ]]>
  </output_format>
  