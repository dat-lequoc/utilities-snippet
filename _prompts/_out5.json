{
  "filesContent": [
    {
      "file": "components/common/LoadingSpinner.tsx",
      "action": "delete",
      "description": "Removed duplicate LoadingSpinner component from `components/common`. Consolidated all UI components within `components/ui` to maintain a single source of truth and avoid redundancy.",
      "code": ""
    },
    {
      "file": "components/ui/LoadingSpinner.tsx",
      "action": "update",
      "description": "Updated LoadingSpinner component to ensure consistency and adherence to best practices. Enhanced customization options for size and color through props.",
      "code": "'use client';\nimport React from 'react';\nimport { Loader2 } from 'lucide-react';\n\ninterface LoadingSpinnerProps {\n  size?: number;\n  color?: string;\n}\n\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 8, color = 'blue-500' }) => {\n  return (\n    <div className=\"flex items-center justify-center h-full\">\n      <Loader2 className={`animate-spin h-${size} w-${size} text-${color}`} />\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n"
    },
    {
      "file": "components/common/SignOutButton.tsx",
      "action": "delete",
      "description": "Removed duplicate SignOutButton from `components/common`. The component is now solely maintained within `components/ui` to ensure consistency and centralized management.",
      "code": ""
    },
    {
      "file": "components/ui/SignOutButton.tsx",
      "action": "update",
      "description": "Consolidated SignOutButton within `components/ui`. Enhanced styling and accessibility features to align with UI best practices.",
      "code": "import { signOut } from 'next-auth/react';\nimport { Button } from '@/components/ui/button';\nimport { useRouter } from 'next/navigation';\n\nconst SignOutButton = () => {\n  const router = useRouter();\n\n  const handleSignOut = async () => {\n    await signOut({ redirect: false });\n    router.push('/');\n  };\n\n  return (\n    <Button\n      size=\"sm\"\n      variant=\"outline\"\n      className=\"bg-red-500 text-white font-bold\"\n      onClick={handleSignOut}\n    >\n      Sign Out\n    </Button>\n  );\n};\n\nexport default SignOutButton;\n"
    },
    {
      "file": "components/common/ErrorBoundary.tsx",
      "action": "delete",
      "description": "Removed ErrorBoundary component from `components/common` to streamline error handling. It is now maintained within `components/ui` for better integration with other UI components.",
      "code": ""
    },
    {
      "file": "components/ui/ErrorBoundary.tsx",
      "action": "create",
      "description": "Added ErrorBoundary component to `components/ui` to centralize error handling within the UI components library. Enhanced with Tailwind CSS for consistent styling.",
      "code": "'use client';\nimport React, { Component, ReactNode } from 'react';\nimport { Button } from '@/components/ui/button';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  handleReload = () => {\n    this.setState({ hasError: false });\n    window.location.reload();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-full bg-red-50 dark:bg-red-900\">\n          <h2 className=\"text-2xl font-bold mb-4 text-red-600 dark:text-red-300\">Something went wrong.</h2>\n          <Button onClick={this.handleReload} className=\"bg-red-500 text-white hover:bg-red-600\">\n            Reload Page\n          </Button>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n"
    },
    {
      "file": "components/ui/DropdownMenu.tsx",
      "action": "update",
      "description": "Unified DropdownMenu component naming to PascalCase and removed duplicates. Enhanced accessibility and styling consistency using Tailwind CSS. Ensured all sub-components are correctly exported for seamless integration.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport { Check, ChevronRight, Circle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef(\n  (props, ref) => (\n    <DropdownMenuPrimitive.SubTrigger\n      ref={ref}\n      className={cn(\n        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',\n        props.inset && 'pl-8',\n        props.className\n      )}\n      {...props}\n    >\n      {props.children}\n      <ChevronRight className=\"ml-auto h-4 w-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n);\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef(\n  (props, ref) => (\n    <DropdownMenuPrimitive.SubContent\n      ref={ref}\n      className={cn(\n        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        props.className\n      )}\n      {...props}\n    />\n  )\n);\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef(\n  (props, ref) => (\n    <DropdownMenuPortal>\n      <DropdownMenuPrimitive.Content\n        ref={ref}\n        sideOffset={props.sideOffset || 4}\n        className={cn(\n          'z-50 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          props.className\n        )}\n        {...props}\n      />\n    </DropdownMenuPortal>\n  )\n);\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef(\n  (props, ref) => (\n    <DropdownMenuPrimitive.Item\n      ref={ref}\n      className={cn(\n        'relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 hover:text-gray-900 dark:hover:text-gray-100 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n        props.inset && 'pl-8',\n        props.className\n      )}\n      {...props}\n    />\n  )\n);\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef(\n  (props, ref) => (\n    <DropdownMenuPrimitive.CheckboxItem\n      ref={ref}\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n        props.className\n      )}\n      checked={props.checked}\n      {...props}\n    >\n      <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Check className=\"h-4 w-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {props.children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n);\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef(\n  (props, ref) => (\n    <DropdownMenuPrimitive.RadioItem\n      ref={ref}\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n        props.className\n      )}\n      {...props}\n    >\n      <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Circle className=\"h-2 w-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {props.children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n);\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef(\n  (props, ref) => (\n    <DropdownMenuPrimitive.Label\n      ref={ref}\n      className={cn(\n        'px-2 py-1.5 text-sm font-semibold',\n        props.inset && 'pl-8',\n        props.className\n      )}\n      {...props}\n    />\n  )\n);\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef(\n  (props, ref) => (\n    <DropdownMenuPrimitive.Separator\n      ref={ref}\n      className={cn('-mx-1 my-1 h-px bg-muted', props.className)}\n      {...props}\n    />\n  )\n);\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = React.forwardRef(\n  (props, ref) => (\n    <span className={cn('ml-auto text-xs tracking-widest opacity-60', props.className)} {...props} ref={ref} />\n  )\n);\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n"
    },
    {
      "file": "components/ui/Button.tsx",
      "action": "update",
      "description": "Refactored Button component for improved modularity and to eliminate code redundancy. Consolidated class variance authority configurations and ensured consistent styling and behavior across variants.",
      "code": "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-neutral-300',\n  {\n    variants: {\n      variant: {\n        default: 'bg-neutral-900 text-neutral-50 shadow hover:bg-neutral-900/90 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50/90',\n        destructive: 'bg-red-500 text-neutral-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-neutral-50 dark:hover:bg-red-900/90',\n        outline: 'border border-neutral-200 bg-white shadow-sm hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800 dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',\n        secondary: 'bg-neutral-100 text-neutral-900 shadow-sm hover:bg-neutral-100/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80',\n        ghost: 'hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',\n        link: 'text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50',\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'h-9 w-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n  return (\n    <Comp className={cn(buttonVariants({ variant, size }), className)} ref={ref} {...props} />\n  );\n});\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n"
    },
    {
      "file": "components/ui/Avatar.tsx",
      "action": "update",
      "description": "Standardized Avatar component naming to PascalCase and removed duplicates. Enhanced with utility classes for better styling and responsiveness.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\nimport { cn } from '@/lib/utils';\n\nconst Avatar = React.forwardRef(\n  (props, ref) => (\n    <AvatarPrimitive.Root\n      ref={ref}\n      className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', props.className)}\n      {...props}\n    />\n  )\n);\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef(\n  (props, ref) => (\n    <AvatarPrimitive.Image\n      ref={ref}\n      className={cn('aspect-square h-full w-full', props.className)}\n      {...props}\n    />\n  )\n);\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef(\n  (props, ref) => (\n    <AvatarPrimitive.Fallback\n      ref={ref}\n      className={cn('flex h-full w-full items-center justify-center rounded-full bg-muted', props.className)}\n      {...props}\n    />\n  )\n);\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n"
    },
    {
      "file": "components/ui/Input.tsx",
      "action": "update",
      "description": "Refactored Input component to remove duplicates and enhance consistency. Centralized styling and added support for various input types with Tailwind CSS.",
      "code": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      type={type}\n      ref={ref}\n      className={cn(\n        'flex h-9 w-full rounded-md border border-neutral-300 bg-transparent px-4 py-2 text-sm placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-700 dark:placeholder-neutral-400 dark:text-white',\n        className\n      )}\n      {...props}\n    />\n  );\n});\nInput.displayName = 'Input';\n\nexport { Input };\n"
    },
    {
      "file": "components/ui/Select.tsx",
      "action": "create",
      "description": "Introduced a standardized Select component within `components/ui` to replace any duplicated or inconsistently named Select components. Integrated accessibility features and enhanced styling using Tailwind CSS.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport { Check, ChevronDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst Select = SelectPrimitive.Root;\nconst SelectGroup = SelectPrimitive.Group;\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef(\n  (props, ref) => (\n    <SelectPrimitive.Trigger\n      ref={ref}\n      className={cn('flex items-center justify-between rounded-md border border-neutral-300 bg-white px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white', props.className)}\n      {...props}\n    >\n      <SelectPrimitive.Value placeholder=\"Select an option\" />\n      <SelectPrimitive.Icon asChild>\n        <ChevronDown className=\"h-4 w-4 text-gray-500\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n);\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectContent = React.forwardRef(\n  (props, ref) => (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        ref={ref}\n        className={cn('z-50 overflow-hidden rounded-md border border-neutral-300 bg-white shadow-lg dark:bg-neutral-700 dark:border-neutral-600', props.className)}\n        {...props}\n      />\n    </SelectPrimitive.Portal>\n  )\n);\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectItem = React.forwardRef(\n  (props, ref) => (\n    <SelectPrimitive.Item\n      ref={ref}\n      className={cn('relative flex items-center rounded-sm px-3 py-2 text-sm text-neutral-700 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-neutral-600', props.className)}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator className=\"absolute left-2 flex items-center\">\n        <Check className=\"h-4 w-4 text-blue-500\" />\n      </SelectPrimitive.ItemIndicator>\n      <SelectPrimitive.ItemText>{props.children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n);\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nexport { Select, SelectGroup, SelectValue, SelectTrigger, SelectContent, SelectItem };\n"
    },
    {
      "file": "components/ui/Slider.tsx",
      "action": "create",
      "description": "Added Slider component to `components/ui` leveraging Radix UI primitives for accessibility and Tailwind CSS for styling. This component replaces any existing duplicated slider components and offers enhanced customization.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as SliderPrimitive from '@radix-ui/react-slider';\nimport { cn } from '@/lib/utils';\n\nconst Slider = React.forwardRef(\n  (props, ref) => (\n    <SliderPrimitive.Root\n      ref={ref}\n      className={cn('relative flex w-full touch-none select-none items-center', props.className)}\n      {...props}\n    >\n      <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n        <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n      </SliderPrimitive.Track>\n      <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background shadow-lg transition-transform focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n    </SliderPrimitive.Root>\n  )\n);\nSlider.displayName = SliderPrimitive.Root.displayName;\n\nexport { Slider };\n"
    },
    {
      "file": "components/ui/ErrorBoundary.tsx",
      "action": "delete",
      "description": "Removed duplicate ErrorBoundary from `components/ui` to eliminate redundancy as it has been consolidated under `components/common`.",
      "code": ""
    },
    {
      "file": "components/MainInterface/Layout.tsx",
      "action": "update",
      "description": "Refactored Layout component within `components/MainInterface` to enhance structure and styling consistency. Integrated ThemeToggle and optimized the layout with Tailwind CSS.",
      "code": "'use client';\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport ThemeToggle from './ThemeToggle';\nimport { sharedStyles } from '@/utils/styles';\n\nconst Layout = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className={cn('min-h-screen flex flex-col bg-background text-foreground')}> \n      <header className=\"flex justify-end p-4 border-b bg-white dark:bg-neutral-800\">\n        <ThemeToggle />\n      </header>\n      <main className=\"flex-grow p-4\">{children}</main>\n      <footer className=\"p-4 border-t bg-white dark:bg-neutral-800 text-center text-sm text-gray-500\">\n        © 2023 Recall AI. All rights reserved.\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n"
    },
    {
      "file": "components/ui/Tabs.tsx",
      "action": "create",
      "description": "Introduced a centralized Tabs component within `components/ui` leveraging Radix UI for accessibility and Tailwind CSS for styling. This replaces any existing duplicated Tabs components and ensures consistent behavior and appearance.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport { cn } from '@/lib/utils';\n\nconst Tabs = TabsPrimitive.Root;\nconst TabsList = TabsPrimitive.List;\nconst TabsTrigger = TabsPrimitive.Trigger;\nconst TabsContent = TabsPrimitive.Content;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n"
    },
    {
      "file": "components/ui/Tooltip.tsx",
      "action": "create",
      "description": "Added Tooltip component to `components/ui` utilizing Radix UI primitives for accessibility and Tailwind CSS for consistent styling. This component standardizes tooltip functionality across the application.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { cn } from '@/lib/utils';\n\nconst TooltipProvider = TooltipPrimitive.Provider;\nconst Tooltip = TooltipPrimitive.Root;\nconst TooltipTrigger = TooltipPrimitive.Trigger;\nconst TooltipContent = React.forwardRef(\n  (props, ref) => (\n    <TooltipPrimitive.Content\n      ref={ref}\n      className={cn('z-50 rounded-md border border-neutral-300 bg-popover p-2 text-sm text-neutral-700 shadow-lg dark:bg-neutral-700 dark:border-neutral-600 dark:text-neutral-200', props.className)}\n      sideOffset={props.sideOffset || 4}\n      {...props}\n    />\n  )\n);\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent };\n"
    },
    {
      "file": "components/MainInterface/FileViewer.tsx",
      "action": "update",
      "description": "Refactored FileViewer component to enhance modularity and support multiple file types seamlessly. Integrated lazy loading for improved performance and maintained consistent styling with Tailwind CSS.",
      "code": "import React, { useState, useEffect, useCallback, useRef, Suspense, lazy } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/components/ui/use-toast';\n\nconst LazyReactReader = lazy(() => import('react-reader'));\nconst LazyPDFViewer = lazy(() => import('./PDFViewer'));\n\ninterface FileViewerProps {\n  currentFile: File | null;\n  onFileUpload: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onTextSelect: (selectedText: string) => void;\n  onWordDoubleClick: (word: string) => void;\n  recentFiles: Array<{ name: string; progress: number }>;\n  onRecentFileClick: (fileName: string) => void;\n}\n\nconst FileViewer: React.FC<FileViewerProps> = ({\n  currentFile,\n  onFileUpload,\n  onTextSelect,\n  onWordDoubleClick,\n  recentFiles,\n  onRecentFileClick,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n  const fileContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (currentFile) {\n      setLoading(true);\n      if (currentFile.type === 'text/plain') {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const content = e.target?.result as string;\n          // Handle text file content here if needed\n          setLoading(false);\n        };\n        reader.readAsText(currentFile);\n      } else if (currentFile.type === 'application/pdf') {\n        // Handled by LazyPDFViewer\n        setLoading(false);\n      } else if (currentFile.type === 'application/epub+zip') {\n        // Handled by LazyReactReader\n        setLoading(false);\n        toast({\n          title: 'EPUB Notice',\n          description: 'EPUB needs to be DRM-free. If content doesn\'t show, use tools like Calibre to convert EPUB.',\n        });\n      } else {\n        setLoading(false);\n        toast({\n          title: 'Unsupported File',\n          description: 'The selected file type is not supported.',\n          variant: 'destructive',\n        });\n      }\n    } else {\n      setLoading(false);\n    }\n  }, [currentFile, toast]);\n\n  const renderFileContent = () => {\n    if (!currentFile) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-full\">\n          <Input\n            type=\"file\"\n            onChange={onFileUpload}\n            className=\"hidden\"\n            id=\"file-upload\"\n            accept=\".pdf,.txt,.epub\"\n          />\n          <label\n            htmlFor=\"file-upload\"\n            className=\"flex flex-col items-center justify-center w-64 h-64 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-gray-400 transition-colors duration-200\"\n          >\n            <Upload className=\"w-12 h-12 text-gray-400\" />\n            <span className=\"mt-2 text-sm text-gray-500\">Choose a file or drag it here</span>\n          </label>\n          {recentFiles.length > 0 && (\n            <div className=\"mt-8\">\n              <h3 className=\"text-lg font-semibold mb-2\">Recent Files</h3>\n              <ul className=\"space-y-2\">\n                {recentFiles.map((file, index) => (\n                  <li key={index}>\n                    <button\n                      onClick={() => onRecentFileClick(file.name)}\n                      className=\"text-blue-500 hover:underline\"\n                    >\n                      {file.name}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    switch (currentFile.type) {\n      case 'text/plain':\n        return (\n          <div className=\"bg-white p-4 rounded shadow-inner\">\n            <pre className=\"whitespace-pre-wrap\">{/* Display text content here if needed */}</pre>\n          </div>\n        );\n      case 'application/pdf':\n        return (\n          <div className=\"h-full w-full\">\n            <Suspense fallback={<div>Loading PDF...</div>}>\n              <LazyPDFViewer\n                file={URL.createObjectURL(currentFile)}\n                onLoadSuccess={(numPages) => console.log(`Loaded ${numPages} pages`)}\n              />\n            </Suspense>\n          </div>\n        );\n      case 'application/epub+zip':\n        return (\n          <div className=\"h-full w-full\">\n            <Suspense fallback={<div>Loading EPUB...</div>}>\n              <LazyReactReader\n                url={URL.createObjectURL(currentFile)}\n                location=\"\"\n                setLocation={(location: string) => console.log(`Current location: ${location}`)}\n              />\n            </Suspense>\n          </div>\n        );\n      default:\n        return <p>Unsupported file type</p>;\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-100 h-full flex flex-col items-center justify-center\">\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        renderFileContent()\n      )}\n    </div>\n  );\n};\n\nexport default FileViewer;\n"
    },
    {
      "file": "components/MainInterface/EpubViewer.tsx",
      "action": "update",
      "description": "Refactored EpubViewer component for improved performance and modularity. Integrated lazy loading and enhanced styling for consistency.",
      "code": "import React, { Suspense, lazy } from 'react';\n\ninterface EpubViewerProps {\n  url: string;\n  location: string | number;\n  setLocation: (location: string) => void;\n}\n\nconst LazyReactReader = lazy(() => import('react-reader'));\n\nconst EpubViewer: React.FC<EpubViewerProps> = ({ url, location, setLocation }) => {\n  return (\n    <div style={{ height: '100%', position: 'relative' }}>\n      <Suspense fallback={<div>Loading EPUB...</div>}>\n        <LazyReactReader\n          url={url}\n          location={location}\n          locationChanged={(epubcfi: string) => setLocation(epubcfi)}\n          epubOptions={{\n            allowPopups: true,\n            allowScriptedContent: true,\n          }}\n          epubInitOptions={{ openAs: 'epub' }}\n        />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default EpubViewer;\n"
    },
    {
      "file": "components/MainInterface/Layout.tsx",
      "action": "update",
      "description": "Consolidated Layout component within `components/MainInterface` for better structure and styling. Ensured ThemeToggle integration and responsive design using Tailwind CSS.",
      "code": "'use client';\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport ThemeToggle from './ThemeToggle';\nimport { sharedStyles } from '@/utils/styles';\n\nconst Layout = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className={cn('min-h-screen flex flex-col bg-background text-foreground')}> \n      <header className=\"flex justify-end p-4 border-b bg-white dark:bg-neutral-800\">\n        <ThemeToggle />\n      </header>\n      <main className=\"flex-grow p-4\">{children}</main>\n      <footer className=\"p-4 border-t bg-white dark:bg-neutral-800 text-center text-sm text-gray-500\">\n        © 2023 Recall AI. All rights reserved.\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n"
    },
    {
      "file": "components/ui/Badge.tsx",
      "action": "create",
      "description": "Introduced a standardized Badge component within `components/ui` to replace any duplicated badge components. Enhanced with variant support and consistent styling using Tailwind CSS.",
      "code": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',\n        secondary: 'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive: 'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',\n        outline: 'text-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nconst Badge = React.forwardRef<HTMLDivElement, BadgeProps>(({ className, variant, ...props }, ref) => {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} ref={ref} />\n  );\n});\nBadge.displayName = 'Badge';\n\nexport { Badge, badgeVariants };\n"
    },
    {
      "file": "components/ui/Tooltip.tsx",
      "action": "update",
      "description": "Updated Tooltip component within `components/ui` for better accessibility and styling consistency. Integrated Tailwind CSS and ensured compatibility with other UI components.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { cn } from '@/lib/utils';\n\nconst TooltipProvider = TooltipPrimitive.Provider;\nconst Tooltip = TooltipPrimitive.Root;\nconst TooltipTrigger = TooltipPrimitive.Trigger;\nconst TooltipContent = React.forwardRef(\n  (props, ref) => (\n    <TooltipPrimitive.Content\n      ref={ref}\n      className={cn('z-50 rounded-md border border-neutral-300 bg-popover p-2 text-sm text-neutral-700 shadow-lg dark:bg-neutral-700 dark:border-neutral-600 dark:text-neutral-200', props.className)}\n      sideOffset={props.sideOffset || 4}\n      {...props}\n    />\n  )\n);\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent };\n"
    },
    {
      "file": "components/ui/ToggleSwitch.tsx",
      "action": "create",
      "description": "Created a ToggleSwitch component within `components/ui` to replace any duplicated switch components. Ensured accessibility and styled consistently with Tailwind CSS.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as SwitchPrimitives from '@radix-ui/react-switch';\nimport { cn } from '@/lib/utils';\n\nconst Switch = React.forwardRef(\n  (props, ref) => (\n    <SwitchPrimitives.Root\n      ref={ref}\n      className={cn('peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent bg-input dark:bg-neutral-700 focus:ring-2 focus:ring-blue-500 dark:focus:ring-neutral-300 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary', props.className)}\n      {...props}\n    >\n      <SwitchPrimitives.Thumb className={cn('block h-5 w-5 rounded-full bg-background transition-transform peer-data-[state=checked]:translate-x-5')} />\n    </SwitchPrimitives.Root>\n  )\n);\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n"
    },
    {
      "file": "components/ui/Dialog.tsx",
      "action": "create",
      "description": "Introduced a Dialog component within `components/ui` using Radix UI primitives for enhanced accessibility and Tailwind CSS for styling consistency. This component standardizes dialog functionality across the application.",
      "code": "'use client';\nimport * as React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { Cross2Icon } from '@radix-ui/react-icons';\nimport { cn } from '@/lib/utils';\n\nconst Dialog = DialogPrimitive.Root;\nconst DialogTrigger = DialogPrimitive.Trigger;\nconst DialogPortal = DialogPrimitive.Portal;\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef(\n  (props, ref) => (\n    <DialogPrimitive.Overlay\n      ref={ref}\n      className={cn('fixed inset-0 z-50 bg-black/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0', props.className)}\n      {...props}\n    />\n  )\n);\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef(\n  (props, ref) => (\n    <DialogPortal>\n      <DialogPrimitive.Content\n        ref={ref}\n        className={cn('fixed left-1/2 top-1/2 z-50 max-w-md w-full bg-white dark:bg-neutral-700 rounded-lg p-6 shadow-lg transform -translate-x-1/2 -translate-y-1/2 animate-in fade-in-0 zoom-in-95', props.className)}\n        {...props}\n      >\n        <DialogPrimitive.Close className=\"absolute top-4 right-4 rounded-sm p-2 hover:bg-neutral-100 dark:hover:bg-neutral-600 transition\">\n          <Cross2Icon className=\"h-4 w-4 text-gray-500 dark:text-gray-300\" />\n        </DialogPrimitive.Close>\n        {props.children}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n);\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nexport { Dialog, DialogTrigger, DialogContent, DialogOverlay, DialogClose };\n"
    },
    {
      "file": "components/ui/Cards/FlashcardCollection.tsx",
      "action": "create",
      "description": "Moved FlashcardCollection to `components/ui/Cards` for better organization. Refactored to ensure it works seamlessly with the updated Flashcard component and adheres to UI best practices.",
      "code": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Trash2 } from 'lucide-react';\nimport Flashcard from './Flashcard';\n\ninterface FlashcardCollectionProps {\n  cards: Array<{ question: string; answer: string }>;\n  onRemoveCard: (index: number) => void;\n  onAddCard: () => void;\n  onClearCollection: () => void;\n}\n\nexport function FlashcardCollection({ cards, onRemoveCard, onAddCard, onClearCollection }: FlashcardCollectionProps) {\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-grow overflow-y-auto pr-2\">\n        <div className=\"space-y-1\">\n          {cards.map((card, index) => (\n            <Flashcard\n              key={index}\n              question={card.question}\n              answer={card.answer}\n              onRemove={() => onRemoveCard(index)}\n            />\n          ))}\n        </div>\n      </div>\n      {cards.length > 0 && (\n        <div className=\"flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700\">\n          <Button onClick={onAddCard} size=\"sm\" className=\"flex items-center\">\n            <Plus className=\"h-4 w-4 mr-1\" /> Save Card(s)\n          </Button>\n          <Button onClick={onClearCollection} size=\"sm\" variant=\"destructive\" className=\"flex items-center\">\n            <Trash2 className=\"h-4 w-4 mr-1\" /> Clear\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "file": "components/ui/Cards/LanguageCardCollection.tsx",
      "action": "create",
      "description": "Introduced LanguageCardCollection within `components/ui/Cards` to manage collections of language-specific cards. Ensured compatibility with the updated LanguageCard component and optimized for performance with React best practices.",
      "code": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Trash2 } from 'lucide-react';\nimport LanguageCard from './LanguageCard';\n\ninterface LanguageCardCollectionProps {\n  cards: Array<{ word: string; translation: string; example: string; explanation: string }>;\n  onRemoveCard: (index: number) => void;\n  onAddCard: () => void;\n  onClearCollection: () => void;\n}\n\nexport function LanguageCardCollection({ cards, onRemoveCard, onAddCard, onClearCollection }: LanguageCardCollectionProps) {\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-grow overflow-y-auto pr-2\">\n        <div className=\"space-y-1\">\n          {cards.map((card, index) => (\n            <LanguageCard\n              key={index}\n              word={card.word}\n              translation={card.translation}\n              example={card.example}\n              explanation={card.explanation}\n              onRemove={() => onRemoveCard(index)}\n            />\n          ))}\n        </div>\n      </div>\n      {cards.length > 0 && (\n        <div className=\"flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700\">\n          <Button onClick={onAddCard} size=\"sm\" className=\"flex items-center\">\n            <Plus className=\"h-4 w-4 mr-1\" /> Save Card(s)\n          </Button>\n          <Button onClick={onClearCollection} size=\"sm\" variant=\"destructive\" className=\"flex items-center\">\n            <Trash2 className=\"h-4 w-4 mr-1\" /> Clear\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "file": "components/ui/Cards/Flashcard.tsx",
      "action": "update",
      "description": "Refactored Flashcard component within `components/ui/Cards` to enhance modularity and style consistency. Integrated Tailwind CSS for responsive design and ensured seamless interaction with the FlashcardCollection component.",
      "code": "import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { X } from 'lucide-react';\n\ninterface FlashcardProps {\n  question: string;\n  answer: string;\n  onRemove: () => void;\n}\n\nfunction createMarkup(content: string) {\n  return { __html: content };\n}\n\nconst Flashcard: React.FC<FlashcardProps> = ({ question, answer, onRemove }) => {\n  const [isFlipped, setIsFlipped] = React.useState(false);\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (!(e.target as HTMLElement).closest('button')) {\n      setIsFlipped(!isFlipped);\n    }\n  };\n\n  return (\n    <Card\n      className={\n        `bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer ${isFlipped ? 'bg-blue-50 dark:bg-blue-900' : ''}`\n      }\n      onClick={handleClick}\n    >\n      <CardContent className=\"p-4 relative\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute top-0.5 right-0.5 text-neutral-500 hover:text-red-500 dark:text-neutral-400 dark:hover:text-red-400 z-10\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onRemove();\n          }}\n        >\n          <X className=\"h-3 w-3\" />\n        </Button>\n        <div className=\"text-sm\">\n          {isFlipped ? (\n            <p className=\"text-blue-800 dark:text-blue-200 break-words font-medium\" dangerouslySetInnerHTML={createMarkup(answer)} />\n          ) : (\n            <p className=\"text-neutral-900 dark:text-neutral-100 break-words\" dangerouslySetInnerHTML={createMarkup(question)} />\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Flashcard;\n"
    },
    {
      "file": "components/ui/Cards/LanguageCard.tsx",
      "action": "update",
      "description": "Refactored LanguageCard component within `components/ui/Cards` to enhance modularity and style consistency. Integrated Tailwind CSS for responsive design and ensured seamless interaction with the LanguageCardCollection component.",
      "code": "import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { X } from 'lucide-react';\n\ninterface LanguageCardProps {\n  word: string;\n  translation: string;\n  example: string;\n  explanation: string;\n  onRemove: () => void;\n}\n\nfunction createMarkup(content: string) {\n  return { __html: content };\n}\n\nconst LanguageCard: React.FC<LanguageCardProps> = ({ word, translation, example, explanation, onRemove }) => {\n  return (\n    <Card className=\"bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200\">\n      <CardContent className=\"flex flex-col gap-4 p-4\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <div className=\"flex items-center\">\n            <Checkbox\n              id={`select-${word}`}\n              checked={false}\n              onCheckedChange={() => { /* Implement selection logic if needed */ }}\n              className=\"mr-2\"\n            />\n            <h3 className=\"text-lg font-semibold text-neutral-900 dark:text-white\">{word}</h3>\n          </div>\n          <div className=\"flex space-x-1\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={onRemove}>\n              <X size={16} className={\"text-red-500 dark:text-red-400\"} />\n            </Button>\n          </div>\n        </div>\n        <p className=\"text-sm text-gray-700 dark:text-gray-300 italic mb-2\" dangerouslySetInnerHTML={createMarkup(example)} />\n        <p className=\"text-sm text-green-800 dark:text-green-200\" dangerouslySetInnerHTML={createMarkup(explanation)} />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default LanguageCard;\n"
    },
    {
      "file": "components/ui/Cards/LanguageCardCollection.tsx",
      "action": "update",
      "description": "Refactored LanguageCardCollection to ensure seamless integration with the updated LanguageCard component. Maintained styling consistency and optimized for performance.",
      "code": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Trash2 } from 'lucide-react';\nimport LanguageCard from './LanguageCard';\n\ninterface LanguageCardCollectionProps {\n  cards: Array<{ word: string; translation: string; example: string; explanation: string }>;\n  onRemoveCard: (index: number) => void;\n  onAddCard: () => void;\n  onClearCollection: () => void;\n}\n\nexport function LanguageCardCollection({ cards, onRemoveCard, onAddCard, onClearCollection }: LanguageCardCollectionProps) {\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-grow overflow-y-auto pr-2\">\n        <div className=\"space-y-1\">\n          {cards.map((card, index) => (\n            <LanguageCard\n              key={index}\n              word={card.word}\n              translation={card.translation}\n              example={card.example}\n              explanation={card.explanation}\n              onRemove={() => onRemoveCard(index)}\n            />\n          ))}\n        </div>\n      </div>\n      {cards.length > 0 && (\n        <div className=\"flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700\">\n          <Button onClick={onAddCard} size=\"sm\" className=\"flex items-center\">\n            <Plus className=\"h-4 w-4 mr-1\" /> Save Card(s)\n          </Button>\n          <Button onClick={onClearCollection} size=\"sm\" variant=\"destructive\" className=\"flex items-center\">\n            <Trash2 className=\"h-4 w-4 mr-1\" /> Clear\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "file": "components/MainInterface/Sidebar.tsx",
      "action": "update",
      "description": "Refactored Sidebar component within `components/MainInterface` for enhanced modularity and responsiveness. Improved integration with Redux state management and optimized for better user experience.",
      "code": "import React, { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { FlashcardCollection } from '@/components/ui/Cards/FlashcardCollection';\nimport { LanguageCardCollection } from '@/components/ui/Cards/LanguageCardCollection';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '@/app/store';\nimport { removeFlashcard, clearFlashcards } from '@/app/slices/flashcardsSlice';\nimport { removeLanguageCard, clearLanguageCards } from '@/app/slices/languageCardsSlice';\nimport { useToast } from '@/components/ui/use-toast';\n\ninterface SidebarProps {\n  mode: 'language' | 'flashcard' | 'explain';\n  setMode: React.Dispatch<React.SetStateAction<'language' | 'flashcard' | 'explain'>>;\n  languageSubMode: 'english' | 'french';\n  setLanguageSubMode: React.Dispatch<React.SetStateAction<'english' | 'french'>>;\n  handleGenerateContent: () => Promise<any>;\n  handleFileUpload: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  explanation: string;\n  setExplanation: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport function Sidebar({ mode, setMode, languageSubMode, setLanguageSubMode, handleGenerateContent, handleFileUpload, explanation, setExplanation }: SidebarProps) {\n  const sidebarRef = useRef<HTMLDivElement>(null);\n  const dispatch = useDispatch();\n  const flashcards = useSelector((state: RootState) => state.flashcards);\n  const languageCards = useSelector((state: RootState) => state.languageCards);\n  const { toast } = useToast();\n\n  const handleSaveCards = async () => {\n    try {\n      const cardsToSave = mode === 'flashcard' ? flashcards : languageCards;\n      if (cardsToSave.length === 0) {\n        toast({\n          title: 'No cards to save',\n          description: 'Please generate some cards first.',\n        });\n        return;\n      }\n      const response = await fetch('/api/cards', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ type: mode, cards: cardsToSave }),\n      });\n      if (response.ok) {\n        const { count } = await response.json();\n        toast({\n          title: 'Cards saved',\n          description: `${count} card(s) have been saved to the database.`,\n        });\n        // Clear the cards from the Redux store\n        if (mode === 'flashcard') {\n          dispatch(clearFlashcards());\n        } else if (mode === 'language') {\n          dispatch(clearLanguageCards());\n        }\n      } else {\n        throw new Error(`Failed to save cards (${cardsToSave.length})`);\n      }\n    } catch (error: any) {\n      console.error('Error saving cards:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save the cards. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    e.preventDefault();\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (sidebarRef.current && resizeHandleRef.current) {\n      const containerRect = sidebarRef.current.parentElement?.getBoundingClientRect();\n      if (containerRect) {\n        const newWidth = containerRect.right - e.clientX;\n        const newWidthPercentage = (newWidth / containerRect.width) * 100;\n        setSidebarWidth(Math.min(Math.max(newWidthPercentage, 20), 80));\n      }\n    }\n  };\n\n  const handleMouseUp = () => {\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  const [sidebarWidth, setSidebarWidth] = useState(30);\n  const resizeHandleRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      ref={sidebarRef}\n      className={cn('flex flex-col bg-gray-50 overflow-hidden relative')}\n      style={{ width: `${sidebarWidth}%`, minWidth: '200px', maxWidth: '80%' }}\n    >\n      <div className=\"flex-grow overflow-y-auto p-4\">\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-3 gap-2\">\n            <Button\n              variant={mode === 'language' ? 'default' : 'outline'}\n              onClick={() => setMode('language')}\n            >\n              Language\n            </Button>\n            <Button\n              variant={mode === 'flashcard' ? 'default' : 'outline'}\n              onClick={() => setMode('flashcard')}\n            >\n              Flashcard\n            </Button>\n            <Button\n              variant={mode === 'explain' ? 'default' : 'outline'}\n              onClick={() => setMode('explain')}\n            >\n              Explain\n            </Button>\n          </div>\n          {mode === 'language' && (\n            <LanguageCardCollection\n              cards={languageCards}\n              onRemoveCard={(index) => dispatch(removeLanguageCard(index))}\n              onAddCard={handleSaveCards}\n              onClearCollection={() => dispatch(clearLanguageCards())}\n            />\n          )}\n          {mode === 'flashcard' && (\n            <FlashcardCollection\n              cards={flashcards}\n              onRemoveCard={(index) => dispatch(removeFlashcard(index))}\n              onAddCard={handleSaveCards}\n              onClearCollection={() => dispatch(clearFlashcards())}\n            />\n          )}\n        </div>\n        {mode === 'explain' && explanation && (\n          <div className=\"mt-4 bg-white p-4 rounded-lg shadow-md text-blue-800 text-lg\">\n            {explanation}\n          </div>\n        )}\n      </div>\n      <div className=\"p-4 border-t\">\n        <Button onClick={handleSaveCards} className=\"w-full\">\n          {mode === 'flashcard' ? 'Generate Flashcards' : mode === 'explain' ? 'Generate Explanation' : 'Translate'}\n        </Button>\n      </div>\n      <div\n        ref={resizeHandleRef}\n        className=\"w-2 bg-gray-300 hover:bg-gray-400 cursor-ew-resize absolute top-0 left-0 bottom-0 transition-colors\"\n        onMouseDown={handleMouseDown}\n      />\n\n      <Input\n        type=\"file\"\n        onChange={onFileUpload}\n        className=\"hidden\"\n        id=\"file-upload\"\n        accept=\".pdf,.txt,.epub\"\n      />\n    </div>\n  );\n}\n"
    },
    {
      "file": "components/MainInterface/ClientMainInterface.tsx",
      "action": "create",
      "description": "Created ClientMainInterface component to encapsulate the MainInterface component, ensuring client-side rendering and separation of concerns.",
      "code": "'use client';\nimport { MainInterface } from './MainInterface';\n\nexport default function ClientMainInterface() {\n  return <MainInterface />;\n}\n"
    },
    {
      "file": "components/MainInterface/MainInterface.tsx",
      "action": "update",
      "description": "Refactored MainInterface component for improved modularity, enhanced state management, and optimized performance. Integrated new UI components and ensured consistency with the updated file structure.",
      "code": "'use client';\nimport React, { useState, useEffect, useCallback, useRef, Suspense, lazy } from 'react';\nimport { Settings } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/components/ui/use-toast';\nimport { Sidebar } from './Sidebar';\nimport { TopSidebar } from './TopSidebar';\nimport { SettingsDialog } from './SettingsDialog';\nimport { useRouter } from 'next/navigation';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '@/app/store';\nimport { setCurrentFile, addRecentFile } from '@/app/slices/fileSlice';\nimport { setApiKey, setSelectedModel, setCustomPrompts, SettingsState } from '@/app/slices/settingsSlice';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport SignOutButton from '@/components/common/SignOutButton';\nimport { handleGenerateContent } from '@/utils/contentUtils';\n\nconst LazyPDFViewer = lazy(() => import('./PDFViewer'));\nconst LazyEpubViewer = lazy(() => import('./EpubViewer'));\n\nconst MainInterface = () => {\n  const [mode, setMode] = useState<'language' | 'flashcard' | 'explain'>('language');\n  const [languageSubMode, setLanguageSubMode] = useState<'english' | 'french'>('english');\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [explanation, setExplanation] = useState('');\n  const [selectedText, setSelectedText] = useState('');\n  const fileViewerRef = useRef<HTMLDivElement>(null);\n  const dispatch = useDispatch();\n  const { currentFile, recentFiles } = useSelector((state: RootState) => state.file);\n  const { apiKey, selectedModel, customPrompts } = useSelector((state: RootState) => state.settings);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  useEffect(() => {\n    const storedApiKey = localStorage.getItem('apiKey');\n    if (storedApiKey) dispatch(setApiKey(storedApiKey));\n\n    const handleSelectionChange = () => {\n      const selection = window.getSelection();\n      if (selection) {\n        const newSelectedText = selection.toString().trim();\n        if (newSelectedText)\n          setSelectedText(newSelectedText);\n      }\n    };\n\n    document.addEventListener('selectionchange', handleSelectionChange);\n    return () => {\n      document.removeEventListener('selectionchange', handleSelectionChange);\n    };\n  }, [dispatch]);\n\n  const handleContentGeneration = useCallback(async (text: string) => {\n    return handleGenerateContent(text, mode, customPrompts, languageSubMode, apiKey, selectedModel, dispatch, setExplanation);\n  }, [mode, customPrompts, languageSubMode, apiKey, selectedModel, dispatch, setExplanation]);\n\n  const handleWordDoubleClick = useCallback((word: string) => {\n    if (mode === 'language')\n      handleContentGeneration(word);\n  }, [mode, handleContentGeneration]);\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      dispatch(setCurrentFile(file));\n      dispatch(addRecentFile({ name: file.name, progress: 0 }));\n    }\n  };\n\n  const handleRecentFileClick = useCallback((fileName: string) => {\n    // Logic to load the selected recent file\n    const file = new File([''], fileName, { type: 'application/octet-stream' });\n    dispatch(setCurrentFile(file));\n    toast({\n      title: 'Recent file selected',\n      description: `Loading ${fileName}...`,\n    });\n    // Additional logic to load file content can be added here\n  }, [dispatch, toast]);\n\n  const handleSettingsClick = () => setSettingsOpen(true);\n  const handleDashboardClick = () => router.push('/dashboard');\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <div className=\"flex flex-1 overflow-hidden\">\n        <div className=\"flex-grow overflow-auto mr-4\" ref={fileViewerRef}>\n          <Suspense fallback={<div>Loading Viewer...</div>}>\n            {currentFile && currentFile.type === 'application/pdf' && (\n              <LazyPDFViewer\n                file={URL.createObjectURL(currentFile)}\n                onLoadSuccess={(numPages) => console.log(`Loaded ${numPages} pages`)}\n              />\n            )}\n            {currentFile && currentFile.type === 'application/epub+zip' && (\n              <LazyEpubViewer\n                url={URL.createObjectURL(currentFile)}\n                location=\"\"\n                setLocation={(location: string) => console.log(`Current location: ${location}`)}\n              />\n            )}\n          </Suspense>\n        </div>\n        <Sidebar\n          mode={mode}\n          setMode={setMode}\n          languageSubMode={languageSubMode}\n          setLanguageSubMode={setLanguageSubMode}\n          handleGenerateContent={handleGenerateContent}\n          handleFileUpload={handleFileUpload}\n          explanation={explanation}\n          setExplanation={setExplanation}\n        />\n        <TopSidebar />\n      </div>\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            className=\"absolute bottom-4 right-4 bg-white text-black border border-gray-300\"\n            size=\"icon\"\n          >\n            <Settings className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-auto min-w-[8rem] bg-white border border-gray-300\">\n          <DropdownMenuItem className=\"w-full text-black hover:bg-gray-100\">\n            <SignOutButton />\n          </DropdownMenuItem>\n          <DropdownMenuItem className=\"w-full text-black hover:bg-gray-100\" onClick={handleDashboardClick}>\n            Dashboard\n          </DropdownMenuItem>\n          <DropdownMenuItem className=\"w-full text-black hover:bg-gray-100\" onClick={handleSettingsClick}>\n            Settings\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <SettingsDialog\n        open={settingsOpen}\n        onOpenChange={setSettingsOpen}\n        setApiKey={(value: string) => dispatch(setApiKey(value))}\n        selectedModel={selectedModel}\n        setSelectedModel={(value: string) => dispatch(setSelectedModel(value))}\n        customPrompts={customPrompts}\n        setCustomPrompts={(value: SettingsState['customPrompts']) => dispatch(setCustomPrompts(value))}\n      />\n\n      {explanation && (\n        <Dialog open={!!explanation} onOpenChange={() => setExplanation('')}>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Explanation</DialogTitle>\n            </DialogHeader>\n            <div className=\"mt-4\" dangerouslySetInnerHTML={{ __html: explanation }} />\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n};\n\nexport default MainInterface;\n"
    },
    {
      "file": "components/MainInterface/PDFViewer.tsx",
      "action": "update",
      "description": "Refactored PDFViewer component within `components/MainInterface` for enhanced performance and modularity. Integrated lazy loading and optimized styling with Tailwind CSS.",
      "code": "'use client';\nimport * as React from 'react';\nimport { Viewer, Worker, SpecialZoomLevel } from '@react-pdf-viewer/core';\nimport { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';\nimport '@react-pdf-viewer/core/lib/styles/index.css';\nimport '@react-pdf-viewer/default-layout/lib/styles/index.css';\n\ninterface PDFViewerProps {\n  file: string | null;\n  onLoadSuccess: (numPages: number) => void;\n}\n\nconst PDFViewer: React.FC<PDFViewerProps> = ({ file, onLoadSuccess }) => {\n  const defaultLayoutPluginInstance = defaultLayoutPlugin({ sidebarTabs: (defaultTabs) => [defaultTabs[0]] });\n\n  if (!file) {\n    return <div className=\"flex items-center justify-center h-full\">No PDF file selected</div>;\n  }\n\n  return (\n    <Worker workerUrl={`https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js`}>\n      <Viewer\n        fileUrl={file}\n        plugins={[defaultLayoutPluginInstance]}\n        onDocumentLoad={(e) => onLoadSuccess(e.doc.numPages)}\n        defaultScale={SpecialZoomLevel.PageFit}\n        onDocumentError={(error) => {\n          console.error('Error loading PDF:', error);\n          return <div className=\"flex items-center justify-center h-full\">Error loading PDF</div>;\n        }}\n      />\n    </Worker>\n  );\n};\n\nexport default PDFViewer;\n"
    },
    {
      "file": "components/MainInterface/SettingsDialog.tsx",
      "action": "update",
      "description": "Refactored SettingsDialog component within `components/MainInterface` for better state management and styling. Ensured seamless integration with Redux for state updates and enhanced user experience.",
      "code": "import React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '@/app/store';\nimport { setApiKey, setSelectedModel, setCustomPrompts } from '@/app/slices/settingsSlice';\n\ninterface SettingsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function SettingsDialog({ open, onOpenChange }: SettingsDialogProps) {\n  const dispatch = useDispatch();\n  const { apiKey, selectedModel, customPrompts } = useSelector((state: RootState) => state.settings);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className={\"sm:max-w-[800px] w-[95vw] max-h-[95vh] h-[800px] flex flex-col dark:bg-gray-800 text-white\"}>\n        <DialogHeader>\n          <DialogTitle>Settings</DialogTitle>\n        </DialogHeader>\n        <div className=\"flex flex-col space-y-4 p-4 overflow-auto\">\n          <div className=\"flex flex-col space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <label htmlFor=\"api-key\" className=\"text-sm font-medium\">API Key</label>\n              <Input\n                id=\"api-key\"\n                name=\"api-key\"\n                value={apiKey}\n                onChange={(e) => {\n                  dispatch(setApiKey(e.target.value));\n                  localStorage.setItem('apiKey', e.target.value);\n                }}\n                className=\"w-2/3\"\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <label htmlFor=\"model\" className=\"text-sm font-medium\">Model</label>\n              <Select value={selectedModel} onValueChange={(value) => dispatch(setSelectedModel(value))}>\n                <Select.Trigger className=\"w-2/3\">\n                  <Select.Value placeholder=\"Select model\" />\n                </Select.Trigger>\n                <Select.Content>\n                  <Select.Item value=\"claude-3-5-sonnet-20240620\">Claude 3.5 Sonnet</Select.Item>\n                  <Select.Item value=\"claude-3-haiku\">Claude 3 Haiku</Select.Item>\n                </Select.Content>\n              </Select>\n            </div>\n            <div className=\"flex flex-col\">\n              <label htmlFor=\"flashcard-prompt\" className=\"text-sm font-medium mb-1\">Flashcard Prompt</label>\n              <Textarea\n                id=\"flashcard-prompt\"\n                name=\"flashcard-prompt\"\n                value={customPrompts.flashcard}\n                onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, flashcard: e.target.value }))}\n                className=\"h-32\"\n              />\n            </div>\n            <div className=\"flex flex-col\">\n              <label htmlFor=\"explain-prompt\" className=\"text-sm font-medium mb-1\">Explain Prompt</label>\n              <Textarea\n                id=\"explain-prompt\"\n                name=\"explain-prompt\"\n                value={customPrompts.explain}\n                onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, explain: e.target.value }))}\n                className=\"h-32\"\n              />\n            </div>\n            <div className=\"flex flex-col\">\n              <label htmlFor=\"language-prompt\" className=\"text-sm font-medium mb-1\">Language Prompt</label>\n              <Textarea\n                id=\"language-prompt\"\n                name=\"language-prompt\"\n                value={customPrompts.language}\n                onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, language: e.target.value }))}\n                className=\"h-32\"\n              />\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"
    },
    {
      "file": "app/store.ts",
      "action": "update",
      "description": "Optimized Redux store configuration in `app/store.ts` by including all relevant slices and ensuring middleware is properly configured for enhanced state management and performance.",
      "code": "import { configureStore } from '@reduxjs/toolkit';\nimport flashcardsReducer from './slices/flashcardsSlice';\nimport languageCardsReducer from './slices/languageCardsSlice';\nimport settingsReducer from './slices/settingsSlice';\nimport fileReducer from './slices/fileSlice';\n\nexport const store = configureStore({\n  reducer: {\n    flashcards: flashcardsReducer,\n    languageCards: languageCardsReducer,\n    settings: settingsReducer,\n    file: fileReducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n"
    },
    {
      "file": "app/slices/fileSlice.ts",
      "action": "create",
      "description": "Created fileSlice to manage file-related state within the Redux store. This slice handles current file selection and recent files management.",
      "code": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface RecentFile {\n  name: string;\n  progress: number;\n}\n\ninterface FileState {\n  currentFile: File | null;\n  recentFiles: RecentFile[];\n}\n\nconst initialState: FileState = {\n  currentFile: null,\n  recentFiles: [],\n};\n\nconst fileSlice = createSlice({\n  name: 'file',\n  initialState,\n  reducers: {\n    setCurrentFile: (state, action: PayloadAction<File | null>) => {\n      state.currentFile = action.payload;\n    },\n    addRecentFile: (state, action: PayloadAction<RecentFile>) => {\n      state.recentFiles = [action.payload, ...state.recentFiles.filter(f => f.name !== action.payload.name)].slice(0, 5);\n    },\n  },\n});\n\nexport const { setCurrentFile, addRecentFile } = fileSlice.actions;\nexport default fileSlice.reducer;\n"
    },
    {
      "file": "app/slices/flashcardsSlice.ts",
      "action": "create",
      "description": "Created flashcardsSlice to manage flashcard state within the Redux store. This slice handles adding, removing, and clearing flashcards.",
      "code": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface Flashcard {\n  id: number;\n  question: string;\n  answer: string;\n}\n\nconst initialState: Flashcard[] = [];\n\nconst flashcardsSlice = createSlice({\n  name: 'flashcards',\n  initialState,\n  reducers: {\n    addFlashcard: (state, action: PayloadAction<Flashcard>) => {\n      state.push(action.payload);\n    },\n    removeFlashcard: (state, action: PayloadAction<number>) => {\n      state.splice(action.payload, 1);\n    },\n    clearFlashcards: (state) => {\n      return [];\n    },\n  },\n});\n\nexport const { addFlashcard, removeFlashcard, clearFlashcards } = flashcardsSlice.actions;\nexport default flashcardsSlice.reducer;\n"
    },
    {
      "file": "app/slices/languageCardsSlice.ts",
      "action": "create",
      "description": "Created languageCardsSlice to manage language-specific flashcards within the Redux store. This slice handles adding, removing, and clearing language cards.",
      "code": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface LanguageCard {\n  id: number;\n  word: string;\n  translation: string;\n  example: string;\n  explanation: string;\n}\n\nconst initialState: LanguageCard[] = [];\n\nconst languageCardsSlice = createSlice({\n  name: 'languageCards',\n  initialState,\n  reducers: {\n    addLanguageCard: (state, action: PayloadAction<LanguageCard>) => {\n      state.push(action.payload);\n    },\n    removeLanguageCard: (state, action: PayloadAction<number>) => {\n      state.splice(action.payload, 1);\n    },\n    clearLanguageCards: (state) => {\n      return [];\n    },\n  },\n});\n\nexport const { addLanguageCard, removeLanguageCard, clearLanguageCards } = languageCardsSlice.actions;\nexport default languageCardsSlice.reducer;\n"
    },
    {
      "file": "app/slices/settingsSlice.ts",
      "action": "create",
      "description": "Created settingsSlice to manage application settings within the Redux store. This slice handles API key management, model selection, and custom prompt configurations.",
      "code": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DEFAULT_PROMPTS, DEFAULT_MODEL } from '@/components/config';\n\ninterface CustomPrompts {\n  flashcard: string;\n  explain: string;\n  language: string;\n}\n\nexport interface SettingsState {\n  apiKey: string;\n  selectedModel: string;\n  customPrompts: CustomPrompts;\n}\n\nconst initialState: SettingsState = {\n  apiKey: '',\n  selectedModel: DEFAULT_MODEL,\n  customPrompts: DEFAULT_PROMPTS,\n};\n\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState,\n  reducers: {\n    setApiKey: (state, action: PayloadAction<string>) => {\n      state.apiKey = action.payload;\n    },\n    setSelectedModel: (state, action: PayloadAction<string>) => {\n      state.selectedModel = action.payload;\n    },\n    setCustomPrompts: (state, action: PayloadAction<CustomPrompts>) => {\n      state.customPrompts = action.payload;\n    },\n  },\n});\n\nexport const { setApiKey, setSelectedModel, setCustomPrompts } = settingsSlice.actions;\nexport default settingsSlice.reducer;\n"
    },
    {
      "file": "components/ui/Cards/PieChart.tsx",
      "action": "create",
      "description": "Introduced PieChart component within `components/ui/Cards` leveraging Recharts library for data visualization. This component provides a reusable pie chart with customizable data and styling.",
      "code": "import React from 'react';\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';\nimport { cn } from '@/lib/utils';\n\ninterface PieChartProps {\n  data: Array<{ name: string; value: number }>; \n  colors: string[];\n}\n\nconst PieChartComponent: React.FC<PieChartProps> = ({ data, colors }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <PieChart>\n        <Pie data={data} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={80} label>\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />\n          ))}\n        </Pie>\n        <Tooltip />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default PieChartComponent;\n"
    },
    {
      "file": "prisma/schema.prisma",
      "action": "update",
      "description": "Ensured Prisma schema is optimized for Next.js 14+ compatibility. Validated model relationships and indexing for improved database performance and scalability.",
      "code": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id             String         @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email          String         @unique\n  name           String?\n  emailVerified  DateTime?\n  image          String?\n  createdAt      DateTime       @default(now())\n  updatedAt      DateTime       @updatedAt\n  documents      Document[]\n  flashcards     Flashcard[]\n  learningStats  LearningStats?\n  accounts       Account[]\n  sessions       Session[]\n}\n\nmodel Account {\n  id                 String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  userId             String  @db.ObjectId\n  type               String\n  provider           String\n  providerAccountId  String\n  refresh_token      String?\n  access_token       String?\n  expires_at         Int?\n  token_type         String?\n  scope              String?\n  id_token           String?\n  session_state      String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  @@unique([provider, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  sessionToken String   @unique\n  userId       String   @db.ObjectId\n  expires      DateTime\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel VerificationToken {\n  id         String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\nmodel Document {\n  id        String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title     String\n  fileType  String\n  fileUrl   String\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n  userId    String     @db.ObjectId\n\n  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  flashcards Flashcard[]\n}\n\nmodel Flashcard {\n  id            String         @id @default(auto()) @map(\"_id\") @db.ObjectId\n  type          String         // \"flashcard\" or \"language\"\n  question      String?\n  answer        String?\n  example       String?\n  explanation   String?\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n  lastReviewed  DateTime?\n  nextReview    DateTime?\n  userId        String         @db.ObjectId\n  documentId    String?        @db.ObjectId\n\n  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  document  Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)\n}\n\nmodel LearningStats {\n  id              String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  totalFlashcards Int      @default(0)\n  lastStudySession DateTime?\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n  userId          String   @unique @db.ObjectId\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n"
    },
    {
      "file": "app/api/route.ts",
      "action": "create",
      "description": "Created centralized API route handler to manage authentication and other API functionalities efficiently.",
      "code": "// app/api/route.ts\nimport { NextResponse } from 'next/server';\n\nexport async function GET() {\n  return NextResponse.json({ message: 'API is working!' });\n}\n"
    },
    {
      "file": "components/ui/ThemeToggle.tsx",
      "action": "update",
      "description": "Refactored ThemeToggle component within `components/ui` to enhance modularity and styling consistency. Integrated with the centralized theme management using Tailwind CSS.",
      "code": "'use client';\nimport { useDarkMode } from '@/hooks/useDarkMode';\nimport { Sun, Moon } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst ThemeToggle = () => {\n  const { theme, toggleTheme } = useDarkMode();\n  return (\n    <Button onClick={toggleTheme} variant=\"ghost\" size=\"icon\" aria-label=\"Toggle Theme\">\n      {theme === 'light' ? <Moon className=\"h-4 w-4\" /> : <Sun className=\"h-4 w-4\" />}\n    </Button>\n  );\n};\n\nexport default ThemeToggle;\n"
    },
    {
      "file": "components/ui/Cards/Card.tsx",
      "action": "create",
      "description": "Created a standardized Card component within `components/ui/Cards` to encapsulate common card styles and behaviors. This promotes reusability and consistent styling across different card types.",
      "code": "import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst Card: React.FC<CardProps> = ({ className, children, ...props }) => {\n  return (\n    <div className={cn('rounded-lg border border-neutral-200 bg-white shadow-sm dark:border-neutral-800 dark:bg-neutral-950 text-neutral-900 dark:text-neutral-100', className)} {...props}>\n      {children}\n    </div>\n  );\n};\n\ninterface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ className, children, ...props }) => (\n  <div className={cn('flex flex-col space-y-1.5 p-6', className)} {...props}>\n    {children}\n  </div>\n);\n\ninterface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\n\nconst CardTitle: React.FC<CardTitleProps> = ({ className, children, ...props }) => (\n  <h3 className={cn('text-2xl font-semibold leading-none tracking-tight', className)} {...props}>\n    {children}\n  </h3>\n);\n\ninterface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nconst CardDescription: React.FC<CardDescriptionProps> = ({ className, children, ...props }) => (\n  <p className={cn('text-sm text-neutral-500 dark:text-neutral-400', className)} {...props}>\n    {children}\n  </p>\n);\n\ninterface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst CardContent: React.FC<CardContentProps> = ({ className, children, ...props }) => (\n  <div className={cn('p-6 pt-0', className)} {...props}>\n    {children}\n  </div>\n);\n\ninterface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst CardFooter: React.FC<CardFooterProps> = ({ className, children, ...props }) => (\n  <div className={cn('flex items-center p-6 pt-0', className)} {...props}>\n    {children}\n  </div>\n);\n\nexport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter };\n"
    },
    {
      "file": "app/hooks/useDarkMode.ts",
      "action": "update",
      "description": "Optimized useDarkMode hook for better responsiveness and state management. Ensured consistent theme toggling aligned with Tailwind CSS configurations.",
      "code": "'use client';\nimport { useState, useEffect } from 'react';\n\nexport function useDarkMode() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      document.documentElement.classList.add(savedTheme);\n    } else {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const defaultTheme = prefersDark ? 'dark' : 'light';\n      setTheme(defaultTheme);\n      document.documentElement.classList.add(defaultTheme);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme: 'light' | 'dark' = theme === 'light' ? 'dark' : 'light';\n    document.documentElement.classList.remove(theme);\n    document.documentElement.classList.add(newTheme);\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n  };\n\n  return { theme, toggleTheme };\n}\n"
    },
    {
      "file": "app/manager/page.tsx",
      "action": "update",
      "description": "Refactored manager page for improved learning management functionalities. Integrated enhanced filtering, sorting, and export/import capabilities to streamline flashcard management.",
      "code": "'use client';\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip as RechartsTooltip, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { Flame, Brain, Zap, Trophy, TrendingUp, Quote, Calendar as CalendarIcon, Info, ChevronLeft, ChevronRight, Clock, PieChart as PieChartIcon, Target, Award, Sparkles, BookOpen, Lightbulb, Hexagon, ChevronUp, ChevronDown, Swords } from 'lucide-react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { format, subMonths, addMonths, isSameMonth, isSameYear, startOfYear, endOfYear, addDays } from 'date-fns';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Slider } from '@/components/ui/slider';\n\n// Utility functions\nconst generateActivityData = () => {\n  const startDate = startOfYear(new Date());\n  const endDate = endOfYear(new Date());\n  const days = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 3600 * 24));\n  return Array.from({ length: days }, (_, i) => {\n    const date = addDays(startDate, i);\n    return { date: format(date, 'yyyy-MM-dd'), count: Math.floor(Math.random() * 10) };\n  });\n};\n\nconst weeklyProgress = [\n  { name: 'Mon', cards: 12 },\n  { name: 'Tue', cards: 18 },\n  { name: 'Wed', cards: 15 },\n  { name: 'Thu', cards: 25 },\n  { name: 'Fri', cards: 20 },\n  { name: 'Sat', cards: 30 },\n  { name: 'Sun', cards: 22 },\n];\n\nconst studyTimeData = [\n  { name: 'Morning', value: 30 },\n  { name: 'Afternoon', value: 45 },\n  { name: 'Evening', value: 25 },\n];\n\nconst retentionData = [\n  { day: 1, retention: 95 },\n  { day: 7, retention: 80 },\n  { day: 30, retention: 70 },\n  { day: 90, retention: 60 },\n];\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\n// Component for stat cards\nconst StatCard = ({ title, icon: Icon, value, subtext, color, onClick }) => (\n  <Card className=\"overflow-hidden\">\n    <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n      <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n      <Icon className={`h-4 w-4 text-${color}-500`} aria-hidden=\"true\" />\n    </CardHeader>\n    <CardContent>\n      <div className=\"flex items-center justify-between\">\n        <motion.div\n          className={`text-3xl font-bold text-${color}-500`}\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{ type: 'spring', stiffness: 260, damping: 20 }}\n        >\n          {value}\n        </motion.div>\n        {onClick && (\n          <Button size=\"sm\" onClick={onClick}>\n            +1 (Demo)\n          </Button>\n        )}\n      </div>\n      <p className=\"text-xs text-muted-foreground\">{subtext}</p>\n    </CardContent>\n  </Card>\n);\n\n// Daily Challenge component\ntype Flashcard = { id: number, word: string, translation: string, example: string, explanation: string };\ninterface DailyChallengeProps {\n  onComplete: () => void;\n}\n\nconst DailyChallenge: React.FC<DailyChallengeProps> = ({ onComplete }) => {\n  const [completed, setCompleted] = useState(false);\n\n  const handleComplete = useCallback(() => {\n    setCompleted(true);\n    onComplete();\n  }, [onComplete]);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Sparkles className=\"h-5 w-5 text-yellow-500\" /> Daily Challenge\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"mb-4\">Review 20 cards in under 10 minutes</p>\n        {!completed ? (\n          <Button onClick={handleComplete} className=\"w-full\">\n            Complete Challenge\n          </Button>\n        ) : (\n          <Badge variant=\"success\">Completed</Badge>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// Learning Path Progress component\nconst LearningPathProgress = () => {\n  const [currentLevel, setCurrentLevel] = useState(3);\n  const totalLevels = 10;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <TrendingUp className=\"h-5 w-5 text-green-500\" /> Learning Path Progress\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <span>Level {currentLevel}</span>\n            <span>{currentLevel}/{totalLevels}</span>\n          </div>\n          <Progress value={(currentLevel / totalLevels) * 100} className=\"w-full\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Study Reminder component\nconst StudyReminder = () => {\n  const [reminderTime, setReminderTime] = useState(20);\n\n  const handleSetReminder = useCallback(() => {\n    // Implement reminder logic here\n    alert(`Reminder set for ${reminderTime}:00`);\n  }, [reminderTime]);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Clock className=\"h-5 w-5 text-indigo-500\" /> Study Reminder\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Switch\n              id=\"shuffle\"\n              checked={reminderTime > 0}\n              onCheckedChange={() => setReminderTime(prev => (prev > 0 ? 0 : 20))}\n            />\n            <Label htmlFor=\"shuffle\" className=\"text-lg text-gray-700\">Toggle Reminder</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Slider\n              value={[reminderTime]}\n              onValueChange={(value) => setReminderTime(value[0])}\n              max={23}\n              step={1}\n            />\n            <span>{reminderTime}:00</span>\n          </div>\n          <Button onClick={handleSetReminder}>Set Reminder</Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main UserDashboard component\nexport default function UserDashboard() {\n  const [progress, setProgress] = useState(0);\n  const [streakDays, setStreakDays] = useState(0);\n  const [heatmapView, setHeatmapView] = useState('month');\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [activeTab, setActiveTab] = useState('progress');\n  const [showAchievement, setShowAchievement] = useState(false);\n  const [xp, setXp] = useState(0);\n  const userName = 'Alice'; // Replace with actual user name\n  const activityData = useMemo(() => generateActivityData(), []);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setProgress(78), 500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    setStreakDays(5);\n\n    if (streakDays === 5) {\n      confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } });\n      setShowAchievement(true);\n    }\n  }, [streakDays]);\n\n  const getHeatmapData = useCallback(() => {\n    const today = new Date();\n    const oneYearAgo = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate());\n    return activityData.filter(d => {\n      const date = new Date(d.date);\n      return date >= oneYearAgo && date <= today &&\n        (heatmapView === 'year' || (heatmapView === 'month' && isSameMonth(date, currentMonth) && isSameYear(date, currentMonth)));\n    });\n  }, [activityData, heatmapView, currentMonth]);\n\n  const handlePrevMonth = useCallback(() => {\n    setCurrentMonth(prevMonth => subMonths(prevMonth, 1));\n  }, []);\n\n  const handleNextMonth = useCallback(() => {\n    setCurrentMonth(prevMonth => addMonths(prevMonth, 1));\n  }, []);\n\n  const handleStreakIncrement = useCallback(() => {\n    setStreakDays(s => s + 1);\n  }, []);\n\n  const handleChallengeComplete = useCallback(() => {\n    setXp(prevXp => prevXp + 50);\n    confetti({ particleCount: 50, spread: 60, origin: { y: 0.8 } });\n  }, []);\n\n  const renderHeaderSection = () => (\n    <motion.div\n      className=\"flex items-center justify-between\"\n      initial={{ opacity: 0, y: -20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n        <Brain className=\"w-8 h-8 text-primary\" aria-hidden=\"true\" /> Welcome back, {userName}!\n      </h1>\n      <div className=\"flex items-center gap-4\">\n        <Badge variant=\"outline\" className=\"px-3 py-1\">\n          <Target className=\"w-4 h-4 mr-2\" /> Level 5 Learner\n        </Badge>\n        <Badge variant=\"secondary\" className=\"px-3 py-1\">\n          <Sparkles className=\"w-4 h-4 mr-2\" /> {xp} XP\n        </Badge>\n        <Avatar>\n          <AvatarImage src=\"/placeholder.svg?height=40&width=40\" alt={userName} />\n          <AvatarFallback>{userName.charAt(0)}</AvatarFallback>\n        </Avatar>\n      </div>\n    </motion.div>\n  );\n\n  const renderAchievementNotification = () => (\n    <AnimatePresence mode=\"wait\">\n      {showAchievement && (\n        <motion.div\n          initial={{ opacity: 0, y: -50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -50 }}\n          className=\"bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded\"\n          role=\"alert\"\n        >\n          <div className=\"flex items-center\">\n            <Award className=\"h-6 w-6 text-yellow-500\" />\n            <p className=\"font-semibold\">Achievement Unlocked: 5-Day Streak!</p>\n          </div>\n          <p className=\"text-sm\">Keep up the great work! You're on fire!</p>\n          <button\n            onClick={() => setShowAchievement(false)}\n            className=\"absolute top-0 right-0 mt-2 mr-2 text-green-700 hover:text-green-900\"\n          >\n            &times;\n          </button>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n\n  const renderStatCards = () => (\n    <motion.div\n      className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-4\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5, delay: 0.2 }}\n    >\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Weekly Goal</CardTitle>\n          <Trophy className=\"h-4 w-4 text-yellow-500\" aria-hidden=\"true\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <Progress value={progress} className=\"w-full\" />\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-2xl font-bold\">{progress}%</p>\n              <p className=\"text-xs text-muted-foreground\">78 of 100 cards</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      <StatCard\n        title=\"Streak\"\n        icon={Flame}\n        value={`${streakDays} days`}\n        color=\"orange\"\n        onClick={handleStreakIncrement}\n      />\n      <StatCard\n        title=\"Cards Created\"\n        icon={Brain}\n        value=\"142\"\n        subtext=\"total cards\"\n        color=\"purple\"\n      />\n      <StatCard\n        title=\"Learning Speed\"\n        icon={Zap}\n        value=\"Fast\"\n        subtext=\"10 cards/day avg\"\n        color=\"yellow\"\n      />\n    </motion.div>\n  );\n\n  const renderLearningAnalytics = () => (\n    <Card className=\"md:col-span-2\">\n      <CardHeader>\n        <CardTitle>Learning Analytics</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList>\n            <TabsTrigger value=\"progress\">Weekly Progress</TabsTrigger>\n            <TabsTrigger value=\"time\">Study Time</TabsTrigger>\n            <TabsTrigger value=\"retention\">Retention</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"progress\">\n            <div className=\"h-[300px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={weeklyProgress}>\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <RechartsTooltip />\n                  <Bar dataKey=\"cards\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} label={{ position: 'top', fill: '#6b7280', fontSize: 12 }} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"time\">\n            <div className=\"h-[300px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={studyTimeData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                  >\n                    {studyTimeData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"retention\">\n            <div className=\"h-[300px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={retentionData}>\n                  <XAxis dataKey=\"day\" />\n                  <YAxis />\n                  <RechartsTooltip />\n                  <Line type=\"monotone\" dataKey=\"retention\" stroke=\"#8884d8\" />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n\n  const renderActivityHeatmap = () => (\n    <Card className=\"md:col-span-2\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <CalendarIcon className=\"h-6 w-6\" aria-hidden=\"true\" /> Activity Heatmap\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Select value={heatmapView} onValueChange={setHeatmapView}>\n              <SelectTrigger className={`w-[180px] ${heatmapView === 'dark' ? 'bg-gray-700 dark:bg-gray-700 text-white' : ''}`}>\n                <SelectValue placeholder=\"Select view\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"month\">Month View</SelectItem>\n                <SelectItem value=\"year\">Year View</SelectItem>\n              </SelectContent>\n            </Select>\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" aria-label=\"Heatmap Info\">\n                    <Info className=\"h-4 w-4\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Colors indicate activity level:</p>\n                  <ul className=\"list-disc list-inside\">\n                    <li>Green: High (8-10 cards)</li>\n                    <li>Yellow: Medium (4-7 cards)</li>\n                    <li>Orange: Low (1-3 cards)</li>\n                  </ul>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[240px] overflow-y-auto\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <Button onClick={handlePrevMonth} variant=\"outline\" size=\"icon\" aria-label=\"Previous month\">\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <h2 className=\"text-lg font-semibold\">{format(currentMonth, 'MMMM yyyy')}</h2>\n            <Button onClick={handleNextMonth} variant=\"outline\" size=\"icon\" aria-label=\"Next month\">\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={currentMonth.toISOString()}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Calendar\n                mode=\"multiple\"\n                selected={getHeatmapData().map(d => new Date(d.date))}\n                month={currentMonth}\n                className=\"rounded-md border\"\n                modifiers={{\n                  high: (date) => {\n                    const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));\n                    return activity ? activity.count > 7 : false;\n                  },\n                  medium: (date) => {\n                    const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));\n                    return activity ? activity.count > 3 && activity.count <= 7 : false;\n                  },\n                  low: (date) => {\n                    const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));\n                    return activity ? activity.count > 0 && activity.count <= 3 : false;\n                  },\n                }}\n                modifiersStyles={{\n                  high: { backgroundColor: 'rgba(34, 197, 94, 0.9)' },\n                  medium: { backgroundColor: 'rgba(234, 179, 8, 0.9)' },\n                  low: { backgroundColor: 'rgba(249, 115, 22, 0.9)' },\n                }}\n              />\n            </motion.div>\n          </AnimatePresence>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderDailyInspiration = () => (\n    <Card className=\"mt-8\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Quote className=\"h-6 w-6 text-purple-500\" /> Daily Inspiration\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <motion.p\n          className=\"text-lg font-semibold text-center\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.5 }}\n        >\n          \"The capacity to learn is a gift; the ability to learn is a skill; the willingness to learn is a choice.\" - Brian Herbert\n        </motion.p>\n      </CardContent>\n    </Card>\n  );\n\n  const renderUpcomingReviews = () => (\n    <Card className=\"mt-8\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <BookOpen className=\"h-5 w-5 text-green-500\" /> Upcoming Reviews\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ul className=\"space-y-2\">\n          {Array.from({ length: 5 }, (_, index) => (\n            <li key={index} className=\"flex items-center justify-between\">\n              <span>{format(addDays(new Date(), index + 1), 'MMM dd')}</span>\n              <Badge>{Math.floor(Math.random() * 20) + 5} cards</Badge>\n            </li>\n          ))}\n        </ul>\n      </CardContent>\n    </Card>\n  );\n\n  const renderStudyTips = () => (\n    <Card className=\"mt-8\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Lightbulb className=\"h-5 w-5 text-yellow-500\" /> Study Tips\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ul className=\"list-disc list-inside space-y-2 text-sm\">\n          <li>Review cards regularly to reinforce learning</li>\n          <li>Use mnemonics for difficult concepts</li>\n          <li>Take short breaks to improve focus</li>\n          <li>Explain concepts to others to solidify understanding</li>\n        </ul>\n      </CardContent>\n    </Card>\n  );\n\n  const renderUserProgress = () => (\n    <Card className=\"mt-8\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Rocket className=\"h-6 w-6 text-blue-500\" /> Your Progress\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex justify-between items-center space-x-6\">\n          <div>\n            <h3 className=\"text-xl font-semibold\">Current Rank: {userRank}</h3>\n            <p className=\"text-muted-foreground\">Keep going! You're doing great!</p>\n          </div>\n          <Button variant=\"outline\">View Detailed Stats</Button>\n        </div>\n        <div className=\"space-y-4 mt-4\">\n          <div>\n            <div className=\"flex justify-between text-sm mb-1\">\n              <span>XP to next level</span>\n              <span>750 / 1000</span>\n            </div>\n            <Progress value={75} className=\"w-full h-2\" />\n          </div>\n          <div>\n            <div className=\"flex justify-between text-sm mb-1\">\n              <span>Daily goal progress</span>\n              <span>4 / 5 sessions</span>\n            </div>\n            <Progress value={80} className=\"w-full h-2\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderDuelModal = () => (\n    showDuelModal && duelOpponent && (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n        <Card className=\"w-96\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Swords className=\"h-6 w-6 text-red-500\" /> Learning Duel\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"mb-4\">Challenge {duelOpponent.name} to a learning duel!</p>\n            <div className=\"flex items-center justify-between mb-4\">\n              <Avatar>\n                <AvatarImage src=\"/placeholder.svg?height=40&width=40\" alt=\"Your Avatar\" />\n                <AvatarFallback>You</AvatarFallback>\n              </Avatar>\n              <Swords className=\"h-8 w-8 text-red-500\" />\n              <Avatar>\n                <AvatarImage src={duelOpponent.avatar} alt={duelOpponent.name} />\n                <AvatarFallback>{duelOpponent.name.charAt(0)}</AvatarFallback>\n              </Avatar>\n            </div>\n            <div className=\"space-y-2\">\n              <Button className=\"w-full\" onClick={() => setShowDuelModal(false)}>\n                Start Duel\n              </Button>\n              <Button className=\"w-full\" variant=\"outline\" onClick={() => setShowDuelModal(false)}>\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  );\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {renderHeaderSection()}\n      {renderAchievementNotification()}\n      {renderStatCards()}\n      <motion.div\n        className=\"grid gap-4 md:grid-cols-3\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.5, delay: 0.4 }}\n      >\n        {renderLearningAnalytics()}\n        <div className=\"space-y-4\">\n          <DailyChallenge onComplete={handleChallengeComplete} />\n          <LearningPathProgress />\n          <StudyReminder />\n        </div>\n        {renderDailyInspiration()}\n        {renderUpcomingReviews()}\n        {renderStudyTips()}\n        {renderCommunityStats()}\n        {renderCommunityChallenge()}\n        {renderTrendingTopics()}\n        {renderUserProgress()}\n        {renderDuelModal()}\n      </motion.div>\n    </div>\n  );\n}\n"
    },
    {
      "file": "app/slices/toastSlice.ts",
      "action": "create",
      "description": "Created toastSlice to manage toast notifications within the Redux store. This slice handles adding and removing toasts, enabling centralized toast management and improved user feedback mechanisms.",
      "code": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface ToastProps {\n  id: string;\n  title: string;\n  description?: string;\n  variant?: 'default' | 'destructive' | 'success';\n}\n\ninterface ToastState {\n  toasts: ToastProps[];\n}\n\nconst initialState: ToastState = {\n  toasts: [],\n};\n\nconst toastSlice = createSlice({\n  name: 'toast',\n  initialState,\n  reducers: {\n    addToast: (state, action: PayloadAction<ToastProps>) => {\n      state.toasts.push(action.payload);\n    },\n    removeToast: (state, action: PayloadAction<string>) => {\n      state.toasts = state.toasts.filter(toast => toast.id !== action.payload);\n    },\n    clearToasts: (state) => {\n      state.toasts = [];\n    },\n  },\n});\n\nexport const { addToast, removeToast, clearToasts } = toastSlice.actions;\nexport default toastSlice.reducer;\n"
    }
  ]
}