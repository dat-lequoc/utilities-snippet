<purpose>
    Refactor, implement the entire codebase to create a better working, optimized, and
    well-structured project
    in NextJS 14+. The goal is to improve code structure, performance, maintainability, and reduce
    code redundancy while adhering to best practices.
</purpose>

<instructions>
    <instruction>
        Analyze the codebase located in the code-files directory.
        Propose a new, optimized file structure.
        You may create, delete, or modify files as necessary.
    </instruction>
    <instruction>
        Break down long components and functions to
        improve modularity. Create reusable utility functions and components following best coding
        practices.
    </instruction>
    <instruction>
        Identify and implement optimizations for performance
        bottlenecks. Include strategies such as code splitting, lazy loading, and caching specific
        to NextJS 14+.
    </instruction>
    <instruction>
        Write complete, working code for each new and updated file.
        Ensure
        all changes are included and double-checked for accuracy.
    </instruction>
</instructions>

<code-files>
    <documents>
        <document index="1">
            <source>prisma/schema.prisma</source>
            <document_content>
                // This is your Prisma schema file,
                // learn more about it in the docs: https://pris.ly/d/prisma-schema

                datasource db {
                provider = "mongodb"
                url = env("DATABASE_URL")
                }

                generator client {
                provider = "prisma-client-js"
                }

                model User {
                id String @id @default(auto()) @map("_id") @db.ObjectId
                email String @unique
                name String?
                emailVerified DateTime?
                image String?
                createdAt DateTime @default(now())
                updatedAt DateTime @updatedAt
                documents Document[]
                flashcards Flashcard[]
                learningStats LearningStats?
                accounts Account[]
                sessions Session[]
                }

                model Account {
                id String @id @default(auto()) @map("_id") @db.ObjectId
                userId String @db.ObjectId
                type String
                provider String
                providerAccountId String
                refresh_token String?
                access_token String?
                expires_at Int?
                token_type String?
                scope String?
                id_token String?
                session_state String?

                user User @relation(fields: [userId], references: [id], onDelete: Cascade)
                @@unique([provider, providerAccountId])
                }

                model Session {
                id String @id @default(auto()) @map("_id") @db.ObjectId
                sessionToken String @unique
                userId String @db.ObjectId
                expires DateTime

                user User @relation(fields: [userId], references: [id], onDelete: Cascade)
                }

                model VerificationToken {
                id String @id @default(auto()) @map("_id") @db.ObjectId
                identifier String
                token String @unique
                expires DateTime

                @@unique([identifier, token])
                }

                model Document {
                id String @id @default(auto()) @map("_id") @db.ObjectId
                title String
                fileType String
                fileUrl String
                createdAt DateTime @default(now())
                updatedAt DateTime @updatedAt
                userId String @db.ObjectId

                user User @relation(fields: [userId], references: [id], onDelete: Cascade)
                flashcards Flashcard[]
                }

                model Flashcard {
                id String @id @default(auto()) @map("_id") @db.ObjectId
                type String // "flashcard" or "language"
                question String?
                answer String?
                example String?
                explanation String?
                createdAt DateTime @default(now())
                updatedAt DateTime @updatedAt
                lastReviewed DateTime?
                nextReview DateTime?
                userId String @db.ObjectId
                documentId String? @db.ObjectId

                user User @relation(fields: [userId], references: [id], onDelete: Cascade)
                document Document? @relation(fields: [documentId], references: [id], onDelete:
                SetNull)
                }

                model LearningStats {
                id String @id @default(auto()) @map("_id") @db.ObjectId
                totalFlashcards Int @default(0)
                lastStudySession DateTime?
                createdAt DateTime @default(now())
                updatedAt DateTime @updatedAt
                userId String @unique @db.ObjectId

                user User @relation(fields: [userId], references: [id], onDelete: Cascade)
                }

            </document_content>
        </document>
        <document index="2">
            <source>components/config.ts</source>
            <document_content> // export const DEFAULT_PROMPTS = { // flashcard: `You are tasked
                with analyzing a given text passage and creating high-quality flashcards based on
                the key concepts and information presented. Your goal is to generate concise,
                informative, and knowledgeable flashcards that effectively capture the essence of
                the text. // Here is the text to analyze: // <text>
                    // [TEXT]
                    // </text> // ## Flashcard Format // <Q> [Question] </Q> // <A> - [Answer] </A>
                // ## Guidelines for Creating Effective Flashcards // 1. Analyze the text
                thoroughly, focusing on identifying <b>new terms, key ideas, concepts, and their
                definitions</b> explained in the text. // 2. Craft clear, concise questions. // 3.
                Provide brief but comprehensive answers use short sentences and bullet points. // 4.
                Ensure each flashcard is self-contained. // 5. Use \`<b>\` tags to highlight the new
                term or concept in both the question and the answer. // 6. Answer directly without
                repeating the question. Start with a dash (-) and begin the answer immediately. //
                ## Output Requirements // - Create between 1 and 10 flashcards, depending on the
                number o fterms and ideas explained in the text. // - Make cards as concise as
                possible. // - Use \`<b>\` tags to highlight the new term or concept in both
                questions and answers. // ## Example Flashcards // \`\`\` // <Q>What is a <b>
                compiler</b> in programming?</Q> // <A> // - A tool that <b>translates</b>
                high-level code into <b>machine code</b> and checks for <b>syntax errors</b> // </A>
                // <Q>How does <b>polymorphism</b> enhance object-oriented programming?</Q> // <A>
                // - Allows objects of <b>different classes</b> to be treated as objects of a common <b>
                superclass</b>, promoting flexibility // </A> // \`\`\` // Now, proceed with
                creating flashcards based on the text provided within the \`<text>\` tags. Focus on
                new terms and concepts, keep answers brief, and ensure a diverse range of questions
                while adhering to the format and guidelines outlined above.`, // explain: `Explain
                the following text in simple terms: // <text>
                    // [TEXT]
                    // </text> // Focusing on the main concepts. Use clear and concise language, and
                break down complex ideas into easily understandable parts. If there are any
                technical terms, provide brief explanations for them. // Now, provide your answer in
                markdown format based on the provided text.`, // language: `You are an AI language
                assistant tasked with providing information about a given word in multiple
                languages. Your goal is to provide a translation, an example, and an explanation for
                the given word based on the provided inputs. // Here are the inputs you will be
                working with: // Word: <word>[TEXT]</word> // Phrase: <phrase>[PHRASE]</phrase> //
                Present your output in the following format: // <T>[Translation of the word in
                [LANGUAGE]]</T> // <Q>[An example sentence in [TARGET_LANGUAGE] that contains the
                exact form of the word. The word must be enclosed in <b></b> tags]</Q> // <A>[Short
                explanation of the word's meaning in [TARGET_LANGUAGE]]</A> // Here's an example of
                the expected output: // Word: "escalated" // Phrase: "etween the two countries after
                the border" // <T>leo thang</T> // <Q>Tensions <b>escalated</b> between the two
                countries after the border incident.</Q> // <A>Increased rapidly in intensity or
                severity.</A> // Additional guidelines: // - The example sentence must contain the
                exact form of the word as provided in the input, in the correct language, as shown
                the example. // - If you are unsure about any part of the task, still give the best
                response you can in the given format, based on the information available. // - Do
                not include any additional commentary or explanations outside of the specified
                output format. // - Remember to use <b> tags for the word in the example. //
                Remember to focus solely on the given word and the required outputs. Now, proceed
                with the task using the provided inputs and following the instructions given above.`
                // } // export const DEFAULT_MODEL = "claude-3-5-sonnet-20240620" export const
                DEFAULT_PROMPTS = { flashcard: `Analyze the text and create 1-3 short-quizz base on
                this text : <text>
                    [TEXT]
</text> Flashcard Format: <Q> [Question] </Q>
<A> - [Answer] </A> Example: <Q>What
                is a <b>compiler</b> in programming?</Q>
<A>- A tool that <b>translates</b>
                high-level code into <b>machine code</b> and checks for <b>syntax errors</b></A> Now
                create flashcards based on the provided text, following the format and guidelines.`,
                explain: `Explain the following text in simple terms: <text>
                    [TEXT]
</text> Focusing on the main concepts. Use clear and concise language, and
                break down complex ideas into easily understandable parts. If there are any
                technical terms, provide brief explanations for them. Now, provide your answer in
                markdown format based on the provided text.`, language: `Make a flashcard a given
                word in Vietnamese-English: <word>[TEXT]</word> Output format: <W>[Word]</W>
<T>[Translation
                in Vietnamese]</T>
<E>[Short example in English with word in <b> tags]</E>
<X>[Short
                explanation in English]</X> Example: > "escalated" <W>escalated</W>
<T>leo thang</T>
<E>
                Tensions <b>escalated</b> between the two countries after the border incident.</E>
<X>Increased
                rapidly in intensity or severity.</X> Now process the task with provided word.` }
                export const DEFAULT_MODEL = "claude-3-5-sonnet-20240620"             </document_content>
        </document>
        <document index="3">
            <source>components/common/LoadingSpinner.tsx</source>
            <document_content> 'use client'; import React from 'react'; import { Loader2 } from
                'lucide-react'; const LoadingSpinner = () => { return ( <div
                    className="flex items-center justify-center h-full">
                    <Loader2 className="animate-spin h-8 w-8 text-blue-500" />
                </div>
                ); }; export default LoadingSpinner; </document_content>
        </document>
        <document index="4">
            <source>components/common/SignOutButton.tsx</source>
            <document_content> import { signOut } from "next-auth/react" import { Button } from
                "@/components/ui/button" import { useRouter } from "next/navigation" const
                SignOutButton = () => { const router = useRouter() const handleSignOut = async () =>
                { await signOut({ redirect: false }) router.push('/') } return ( <Button
                    size="sm"
                    variant="outline"
                    className="bg-red-500 text-white font-bold"
                    onClick= {handleSignOut}
                >
                    Sign Out
                </Button> ); }; export default SignOutButton; </document_content>
        </document>
        <document index="5">
            <source>components/ui/ErrorBoundary.tsx</source>
            <document_content> 'use client'; import React, { Component, ReactNode } from 'react';
                import { Button } from './button'; interface Props { children: ReactNode; }
                interface State { hasError: boolean; } class ErrorBoundary extends Component<Props , State>
                { constructor(props: Props) { super(props); this.state = { hasError: false }; }
                static getDerivedStateFromError(error: Error) { return { hasError: true }; }
                componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
                console.error('Uncaught error:', error, errorInfo); } handleReload = () => {
                this.setState({ hasError: false }); window.location.reload(); }; render() { if
                (this.state.hasError) { return ( <div
                    className="flex flex-col items-center justify-center h-full">
                    <h2 className="text-2xl font-bold mb-4">Something went wrong.</h2>
                    <Button onClick= {this.handleReload}>Reload Page</Button>
                </div> ); } return
                this.props.children; } } export default ErrorBoundary;             </document_content>
        </document>
        <document index="6">
            <source>components/ui/Layout.tsx</source>
            <document_content> 'use client'; import React from 'react'; import { cn } from
                '@/lib/utils'; import ThemeToggle from './ThemeToggle'; import { sharedStyles } from
                '@/utils/styles'; const Layout = ({ children }: { children: React.ReactNode }) => {
                return ( <div className= {cn('min-h-screen flex flex-col bg-background text-foreground' )}>
                    <header className="flex justify-end p-4 border-b bg-white dark:bg-neutral-800">
                        <ThemeToggle />
                    </header>
                    <main className="flex-grow p-4">{children}</main>
                    <footer
                        className="p-4 border-t bg-white dark:bg-neutral-800 text-center text-sm text-gray-500">
                © 2023 Recall AI. All rights reserved.
                    </footer>
                </div>
                ); }; export default Layout; </document_content>
        </document>
        <document index="7">
            <source>components/ui/ThemeToggle.tsx</source>
            <document_content> 'use client'; import { useDarkMode } from '@/app/hooks/useDarkMode';
                import { Sun, Moon } from 'lucide-react'; import { Button } from
                '@/components/ui/button'; const ThemeToggle = () => { const { theme, toggleTheme } =
                useDarkMode(); return ( <Button onClick= {toggleTheme} variant="ghost" size="icon"
                    aria-label="Toggle Theme"> {theme === 'light' ? <Moon className="h-4 w-4" /> : <Sun
                        className="h-4 w-4" />} </Button> ); }; export default ThemeToggle; </document_content>
        </document>
        <document index="8">
            <source>components/ui/avatar.tsx</source>
            <document_content> "use client" import * as React from "react" import * as
                AvatarPrimitive from "@radix-ui/react-avatar" import { cn } from "@/lib/utils" const
                Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>, React.ComponentPropsWithoutRef<typeof
                    AvatarPrimitive.Root> >(({ className, ...props }, ref) => ( <AvatarPrimitive.Root
                    ref= {ref}
                    className= {cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full" ,
                    className
                    )}
                    {...props}
                /> )) Avatar.displayName = AvatarPrimitive.Root.displayName const
                AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
                React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> >(({ className, ...props }, ref) => ( <AvatarPrimitive.Image
                    ref= {ref}
                    className= {cn("aspect-square h-full w-full" , className)}
                    {...props}
                /> )) AvatarImage.displayName = AvatarPrimitive.Image.displayName
                const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
                React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback> >(({ className, ...props }, ref) => ( <AvatarPrimitive.Fallback
                    ref= {ref}
                    className= {cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted" ,
                    className
                    )}
                    {...props}
                /> )) AvatarFallback.displayName =
                AvatarPrimitive.Fallback.displayName export { Avatar, AvatarImage, AvatarFallback }             </document_content>
        </document>
        <document index="9">
            <source>components/ui/badge.tsx</source>
            <document_content> import * as React from "react" import { cva, type VariantProps } from
                "class-variance-authority" import { cn } from "@/lib/utils" const badgeVariants =
                cva( "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs
                font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring
                focus:ring-offset-2", { variants: { variant: { default: "border-transparent
                bg-primary text-primary-foreground hover:bg-primary/80", secondary:
                "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
                destructive: "border-transparent bg-destructive text-destructive-foreground
                hover:bg-destructive/80", outline: "text-foreground", }, }, defaultVariants: {
                variant: "default", }, } ) export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>,
                VariantProps<typeof badgeVariants> { } function Badge({ className, variant, ...props }:
                BadgeProps) { return ( <div className= {cn(badgeVariants({ variant }), className)} {...props} /> ) } export { Badge, badgeVariants }             </document_content>
        </document>
        <document index="10">
            <source>components/ui/button.tsx</source>
            <document_content> import * as React from "react"; import { Slot } from
                "@radix-ui/react-slot"; import { cva, type VariantProps } from
                "class-variance-authority"; import { cn } from "@/lib/utils"; const buttonVariants =
                cva( "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm
                font-medium transition-colors focus-visible:outline-none focus-visible:ring-1
                focus-visible:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50
                dark:focus-visible:ring-neutral-300", { variants: { variant: { default:
                "bg-neutral-900 text-neutral-50 shadow hover:bg-neutral-900/90 dark:bg-neutral-50
                dark:text-neutral-900 dark:hover:bg-neutral-50/90", destructive: "bg-red-500
                text-neutral-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-neutral-50
                dark:hover:bg-red-900/90", outline: "border border-neutral-200 bg-white shadow-sm
                hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800
                dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50",
                secondary: "bg-neutral-100 text-neutral-900 shadow-sm hover:bg-neutral-100/80
                dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80", ghost:
                "hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800
                dark:hover:text-neutral-50", link: "text-neutral-900 underline-offset-4
                hover:underline dark:text-neutral-50", }, size: { default: "h-9 px-4 py-2", sm: "h-8
                rounded-md px-3 text-xs", lg: "h-10 rounded-md px-8", icon: "h-9 w-9", }, },
                defaultVariants: { variant: "default", size: "default", }, } ); export interface
                ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof
                    buttonVariants> { asChild?: boolean; } const Button = React.forwardRef<HTMLButtonElement , ButtonProps>( ({
                className, variant, size, asChild = false, ...props }, ref) => { const Comp =
                asChild ? Slot : "button"; return ( <Comp
                    className= {cn(buttonVariants({ variant, size, className }))}
                    ref= {ref}
                    {...props}
                /> ); } ); Button.displayName = "Button"; export { Button, buttonVariants };             </document_content>
        </document>
        <document index="11">
            <source>components/ui/calendar.tsx</source>
            <document_content> "use client" import * as React from "react" import { ChevronLeft,
                ChevronRight } from "lucide-react" import { DayPicker } from "react-day-picker"
                import { cn } from "@/lib/utils" import { buttonVariants } from
                "@/app/components/ui/button" export type CalendarProps = React.ComponentProps<typeof DayPicker>
                function Calendar({ className, classNames, showOutsideDays = true, ...props }:
                CalendarProps) { return ( <DayPicker
                    showOutsideDays= {showOutsideDays}
                    className= {cn("p-3" , className)}
                    classNames= {{
                    months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0" ,
                    month: "space-y-4" ,
                    caption: "flex justify-center pt-1 relative items-center" ,
                    caption_label: "text-sm font-medium" ,
                    nav: "space-x-1 flex items-center" ,
                    nav_button: cn(
                    buttonVariants({ variant: "outline" }),
                    "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
                    ),
                    nav_button_previous: "absolute left-1" ,
                    nav_button_next: "absolute right-1" ,
                    table: "w-full border-collapse space-y-1" ,
                    head_row: "flex" ,
                    head_cell:
                    "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]" ,
                    row: "flex w-full mt-2" ,
                    cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20" ,
                    day: cn(
                    buttonVariants({ variant: "ghost" }),
                    "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
                    ),
                    day_selected:
                    "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground" ,
                    day_today: "bg-accent text-accent-foreground" ,
                    day_outside: "text-muted-foreground opacity-50" ,
                    day_disabled: "text-muted-foreground opacity-50" ,
                    day_range_middle:
                    "aria-selected:bg-accent aria-selected:text-accent-foreground" ,
                    day_hidden: "invisible" ,
                    ...classNames,
                    }}
                    components= {{
                    IconLeft: ({ ...props })=>
                <ChevronLeft className="h-4 w-4" />, IconRight: ({ ...props }) => <ChevronRight
                    className="h-4 w-4" />, }} {...props} /> ) } Calendar.displayName = "Calendar"
                export { Calendar }             </document_content>
        </document>
        <document index="12">
            <source>components/ui/card.tsx</source>
            <document_content> import * as React from "react" import { cn } from "@/lib/utils" const
                Card = React.forwardRef<
    HTMLDivElement ,
                    React.HTMLAttributes<HTMLDivElement> >(({ className, ...props },
                ref) => ( <div
                    ref= {ref}
                    className= {cn(
            "rounded-lg border border-neutral-200 bg-white text-neutral-950 shadow-sm dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50" ,
                    className
                    )}
                    {...props}
                /> )) Card.displayName = "Card" const CardHeader = React.forwardRef<
    HTMLDivElement
                    ,
                    React.HTMLAttributes<HTMLDivElement> >(({ className, ...props }, ref) => ( <div
                    ref= {ref}
                    className= {cn("flex flex-col space-y-1.5 p-6" , className)}
                    {...props}
                /> )) CardHeader.displayName = "CardHeader" const CardTitle =
                React.forwardRef<
    HTMLParagraphElement ,
                    React.HTMLAttributes<HTMLHeadingElement> >(({ className, ...props
                }, ref) => ( <h3
                    ref= {ref}
                    className= {cn(
            "text-2xl font-semibold leading-none tracking-tight" ,
                    className
                    )}
                    {...props}
                /> )) CardTitle.displayName = "CardTitle" const CardDescription =
                React.forwardRef<
    HTMLParagraphElement ,
                    React.HTMLAttributes<HTMLParagraphElement> >(({ className,
                ...props }, ref) => ( <p
                    ref= {ref}
                    className= {cn("text-sm text-neutral-500 dark:text-neutral-400" , className)}
                    {...props}
                /> )) CardDescription.displayName = "CardDescription" const
                CardContent = React.forwardRef<
    HTMLDivElement ,
                    React.HTMLAttributes<HTMLDivElement> >(({ className,
                ...props }, ref) => ( <div ref= {ref} className= {cn("p-6 pt-0" , className)} {...props} /> )) CardContent.displayName =
                "CardContent" const CardFooter = React.forwardRef<
    HTMLDivElement ,
                    React.HTMLAttributes<HTMLDivElement>
                >(({ className, ...props }, ref) => ( <div
                    ref= {ref}
                    className= {cn("flex items-center p-6 pt-0" , className)}
                    {...props}
                /> )) CardFooter.displayName = "CardFooter" export { Card, CardHeader,
                CardFooter, CardTitle, CardDescription, CardContent }             </document_content>
        </document>
        <document index="13">
            <source>components/ui/checkbox.tsx</source>
            <document_content> import * as React from "react" import * as CheckboxPrimitive from
                "@radix-ui/react-checkbox" import { Check } from "lucide-react" import { cn } from
                "@/lib/utils" const Checkbox = React.forwardRef<
    React.ElementRef<typeof CheckboxPrimitive.Root>,
                React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> >(({ className, ...props }, ref) => ( <CheckboxPrimitive.Root
                    ref= {ref}
                    className= {cn(
            "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground" ,
                    className
                    )}
                    {...props}
                >
                    <CheckboxPrimitive.Indicator
                        className= {cn("flex items-center justify-center text-current" )}
                    >
                        <Check className="h-4 w-4" />
                    </CheckboxPrimitive.Indicator>
                </CheckboxPrimitive.Root>
                )) Checkbox.displayName = CheckboxPrimitive.Root.displayName export { Checkbox }             </document_content>
        </document>
        <document index="14">
            <source>components/ui/dialog.tsx</source>
            <document_content> "use client" import * as React from "react" import * as
                DialogPrimitive from "@radix-ui/react-dialog" import { Cross2Icon } from
                "@radix-ui/react-icons" import { cn } from "@/lib/utils" const Dialog =
                DialogPrimitive.Root const DialogTrigger = DialogPrimitive.Trigger const
                DialogPortal = DialogPrimitive.Portal const DialogClose = DialogPrimitive.Close
                const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
                React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> >(({ className, ...props }, ref) => ( <DialogPrimitive.Overlay
                    ref= {ref}
                    className= {cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0" ,
                    className
                    )}
                    {...props}
                /> )) DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
                const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
                React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> >(({ className, children, ...props }, ref) =>
                ( <DialogPortal>
                    <DialogOverlay />
                    <DialogPrimitive.Content
                        ref= {ref}
                        className= {cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-neutral-200 bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg dark:border-neutral-800 dark:bg-neutral-950" ,
                        className
                        )}
                        {...props}
                    > {children} <DialogPrimitive.Close
                            className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-neutral-100 data-[state=open]:text-neutral-500 dark:ring-offset-neutral-950 dark:focus:ring-neutral-300 dark:data-[state=open]:bg-neutral-800 dark:data-[state=open]:text-neutral-400">
                            <Cross2Icon className="h-4 w-4" />
                            <span className="sr-only">Close</span>
                        </DialogPrimitive.Close>
                    </DialogPrimitive.Content>
                </DialogPortal>
                )) DialogContent.displayName = DialogPrimitive.Content.displayName const
                DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div
                    className= {cn(
      "flex flex-col space-y-1.5 text-center sm:text-left" ,
                    className
                    )}
                    {...props}
                /> ) DialogHeader.displayName = "DialogHeader" const DialogFooter = ({
                className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div
                    className= {cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2" ,
                    className
                    )}
                    {...props}
                /> ) DialogFooter.displayName = "DialogFooter" const DialogTitle =
                React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
                >(({ className, ...props }, ref) => ( <DialogPrimitive.Title
                    ref= {ref}
                    className= {cn(
      "text-lg font-semibold leading-none tracking-tight" ,
                    className
                    )}
                    {...props}
                /> )) DialogTitle.displayName = DialogPrimitive.Title.displayName
                const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
                React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description> >(({ className, ...props }, ref) => ( <DialogPrimitive.Description
                    ref= {ref}
                    className= {cn("text-sm text-neutral-500 dark:text-neutral-400" , className)}
                    {...props}
                /> )) DialogDescription.displayName =
                DialogPrimitive.Description.displayName export { Dialog, DialogPortal,
                DialogOverlay, DialogTrigger, DialogClose, DialogContent, DialogHeader,
                DialogFooter, DialogTitle, DialogDescription, }             </document_content>
        </document>
        <document index="15">
            <source>components/ui/dropdown-menu.tsx</source>
            <document_content> "use client" import * as React from "react" import * as
                DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu" import { Check,
                ChevronRight, Circle } from "lucide-react" import { cn } from "@/lib/utils" const
                DropdownMenu = DropdownMenuPrimitive.Root const DropdownMenuTrigger =
                DropdownMenuPrimitive.Trigger const DropdownMenuGroup = DropdownMenuPrimitive.Group
                const DropdownMenuPortal = DropdownMenuPrimitive.Portal const DropdownMenuSub =
                DropdownMenuPrimitive.Sub const DropdownMenuRadioGroup =
                DropdownMenuPrimitive.RadioGroup const DropdownMenuSubTrigger = React.forwardRef<
    React.ElementRef<typeof
                    DropdownMenuPrimitive.SubTrigger>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & { inset?: boolean } >(({ className,
                inset, children, ...props }, ref) => ( <DropdownMenuPrimitive.SubTrigger
                    ref= {ref}
                    className= {cn(
            "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent" ,
                    inset && "pl-8" ,
                    className
                    )}
                    {...props}
                > {children} <ChevronRight className="ml-auto h-4 w-4" />
                </DropdownMenuPrimitive.SubTrigger>
                )) DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName
                const DropdownMenuSubContent = React.forwardRef<
    React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
                React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent> >(({ className, ...props }, ref) => ( <DropdownMenuPrimitive.SubContent
                    ref= {ref}
                    className= {cn(
            "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2" ,
                    className
                    )}
                    {...props}
                /> )) DropdownMenuSubContent.displayName =
                DropdownMenuPrimitive.SubContent.displayName const DropdownMenuContent =
                React.forwardRef<
    React.ElementRef<typeof DropdownMenuPrimitive.Content>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
                >(({ className, sideOffset = 4, ...props }, ref) => ( <DropdownMenuPrimitive.Portal>
                    <DropdownMenuPrimitive.Content
                        ref= {ref}
                        sideOffset= {sideOffset}
                        className= {cn(
                "z-50 overflow-hidden rounded-md border bg-popover/80 p-1 text-popover-foreground shadow-md" ,
                "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0" ,
                "data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95" ,
                "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2" ,
                        className
                        )}
                        {...props}
                    />
                </DropdownMenuPrimitive.Portal> ))
                DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName const
                DropdownMenuItem = React.forwardRef<
    React.ElementRef<typeof DropdownMenuPrimitive.Item>,
                React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & { inset?: boolean } >(({ className, inset,
                ...props }, ref) => ( <DropdownMenuPrimitive.Item
                    ref= {ref}
                    className= {cn(
            "relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm" ,
            "outline-none transition-colors duration-200" ,
            "text-gray-700 dark:text-gray-200" ,
            "opacity-80 hover:opacity-100" ,
            "hover:bg-gray-100/80 dark:hover:bg-gray-800/80" ,
            "hover:text-gray-900 dark:hover:text-gray-100" ,
            "focus:bg-gray-100/80 dark:focus:bg-gray-800/80" ,
            "focus:text-gray-900 dark:focus:text-gray-100" ,
            "active:bg-gray-200/80 dark:active:bg-gray-700/80" ,
            "data-[disabled]:pointer-events-none data-[disabled]:opacity-50" ,
                    inset && "pl-8" ,
                    className
                    )}
                    {...props}
                /> )) DropdownMenuItem.displayName =
                DropdownMenuPrimitive.Item.displayName const DropdownMenuCheckboxItem =
                React.forwardRef<
    React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
                >(({ className, children, checked, ...props }, ref) => ( <DropdownMenuPrimitive.CheckboxItem
                    ref= {ref}
                    className= {cn(
            "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50" ,
                    className
                    )}
                    checked= {checked}
                    {...props}
                >
                    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
                        <DropdownMenuPrimitive.ItemIndicator>
                            <Check className="h-4 w-4" />
                        </DropdownMenuPrimitive.ItemIndicator>
                    </span>
                {children} </DropdownMenuPrimitive.CheckboxItem> ))
                DropdownMenuCheckboxItem.displayName =
                DropdownMenuPrimitive.CheckboxItem.displayName const DropdownMenuRadioItem =
                React.forwardRef<
    React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
                >(({ className, children, ...props }, ref) => ( <DropdownMenuPrimitive.RadioItem
                    ref= {ref}
                    className= {cn(
            "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50" ,
                    className
                    )}
                    {...props}
                >
                    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
                        <DropdownMenuPrimitive.ItemIndicator>
                            <Circle className="h-2 w-2 fill-current" />
                        </DropdownMenuPrimitive.ItemIndicator>
                    </span>
                {children} </DropdownMenuPrimitive.RadioItem> )) DropdownMenuRadioItem.displayName =
                DropdownMenuPrimitive.RadioItem.displayName const DropdownMenuLabel =
                React.forwardRef<
    React.ElementRef<typeof DropdownMenuPrimitive.Label>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> &
                { inset?: boolean } >(({ className, inset, ...props }, ref) => ( <DropdownMenuPrimitive.Label
                    ref= {ref}
                    className= {cn(
            "px-2 py-1.5 text-sm font-semibold" ,
                    inset && "pl-8" ,
                    className
                    )}
                    {...props}
                /> )) DropdownMenuLabel.displayName =
                DropdownMenuPrimitive.Label.displayName const DropdownMenuSeparator =
                React.forwardRef<
    React.ElementRef<typeof DropdownMenuPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
                >(({ className, ...props }, ref) => ( <DropdownMenuPrimitive.Separator
                    ref= {ref}
                    className= {cn("-mx-1 my-1 h-px bg-muted" , className)}
                    {...props}
                /> )) DropdownMenuSeparator.displayName =
                DropdownMenuPrimitive.Separator.displayName const DropdownMenuShortcut = ({
                className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => { return ( <span
                    className= {cn("ml-auto text-xs tracking-widest opacity-60" , className)}
                    {...props}
                /> ) } DropdownMenuShortcut.displayName = "DropdownMenuShortcut"
                export { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem,
                DropdownMenuCheckboxItem, DropdownMenuRadioItem, DropdownMenuLabel,
                DropdownMenuSeparator, DropdownMenuShortcut, DropdownMenuGroup, DropdownMenuPortal,
                DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger,
                DropdownMenuRadioGroup, }             </document_content>
        </document>
        <document index="16">
            <source>components/ui/icons.tsx</source>
            <document_content> import { Brain, Book, Languages, CreditCard, Settings, Smile, User,
                ArrowRight, Check, ChevronLeft, ChevronRight, ChevronDown, ChevronsUpDown, Plus, X,
                Moon, Sun, Laptop, MessageSquare, Layers, Github, Mail, LucideProps, Loader2, type
                Icon as LucideIcon, } from "lucide-react" export type Icon = LucideIcon export const
                Icons = { brain: Brain, book: Book, languages: Languages, flashcard: CreditCard,
                chat: MessageSquare, integrate: Layers, logo: Brain, close: X, spinner: Loader2,
                chevronLeft: ChevronLeft, chevronRight: ChevronRight, chevronDown: ChevronDown,
                chevronsUpDown: ChevronsUpDown, arrowRight: ArrowRight, user: User, plus: Plus,
                settings: Settings, smile: Smile, sun: Sun, moon: Moon, laptop: Laptop, check:
                Check, github: Github, mail: Mail, openai: (props: LucideProps) => ( <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    {...props}
                >
                    <path
                        d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
                </svg>
                ), claude: (props: LucideProps) => ( <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    {...props}
                >
                    <path d="M12 2L1 7.5L12 13L23 7.5L12 2Z" />
                    <path d="M1 16.5L12 22L23 16.5" />
                    <path d="M1 12L12 17.5L23 12" />
                </svg> ), google: (props:
                LucideProps) => ( <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
                    <path
                        d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                        fill="#4285F4"
                    />
                    <path
                        d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                        fill="#34A853"
                    />
                    <path
                        d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                        fill="#FBBC05"
                    />
                    <path
                        d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                        fill="#EA4335"
                    />
                    <path d="M1 1h22v22H1z" fill="none" />
                </svg> ), mainIcon:
                (props: LucideProps) => ( <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    {...props}
                >
                    <image href="/icon.svg" width="24" height="24" />
                </svg> ), } </document_content>
        </document>
        <document index="17">
            <source>components/ui/input.tsx</source>
            <document_content> import * as React from "react" import { cn } from "@/lib/utils"
                export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}
                const Input = React.forwardRef<HTMLInputElement , InputProps>( ({ className, type, ...props },
                ref) => { return ( <input
                    type= {type}
                    className= {cn(
          "flex h-9 w-full rounded-md border border-neutral-200 bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300" ,
                    className
                    )}
                    ref= {ref}
                    {...props}
                /> ) } ) Input.displayName = "Input" export { Input }             </document_content>
        </document>
        <document index="18">
            <source>components/ui/label.tsx</source>
            <document_content> import * as React from "react" import { cva, type VariantProps } from
                "class-variance-authority" import { cn } from "@/lib/utils" const labelVariants =
                cva( "text-sm font-medium leading-none peer-disabled:cursor-not-allowed
                peer-disabled:opacity-70" ) export interface LabelProps extends
                React.LabelHTMLAttributes<HTMLLabelElement>, VariantProps<typeof labelVariants> { } const Label =
                React.forwardRef<HTMLLabelElement , LabelProps>( ({ className, ...props }, ref) => { return ( <label
                    ref= {ref}
                    className= {cn(labelVariants(), className)}
                    {...props}
                /> ) } ) Label.displayName = "Label" export { Label }             </document_content>
        </document>
        <document index="19">
            <source>components/ui/popover.tsx</source>
            <document_content> "use client" import * as React from "react" import * as
                PopoverPrimitive from "@radix-ui/react-popover" import { cn } from "@/lib/utils"
                const Popover = PopoverPrimitive.Root const PopoverTrigger =
                PopoverPrimitive.Trigger const PopoverContent = React.forwardRef<
    React.ElementRef<typeof
                    PopoverPrimitive.Content>, React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> >(({ className, align = "center",
                sideOffset = 4, ...props }, ref) => ( <PopoverPrimitive.Portal>
                    <PopoverPrimitive.Content
                        ref= {ref}
                        align= {align}
                        sideOffset= {sideOffset}
                        className= {cn(
                "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2" ,
                        className
                        )}
                        {...props}
                    />
                </PopoverPrimitive.Portal> ))
                PopoverContent.displayName = PopoverPrimitive.Content.displayName export { Popover,
                PopoverTrigger, PopoverContent }             </document_content>
        </document>
        <document index="20">
            <source>components/ui/progress.tsx</source>
            <document_content> "use client" import * as React from "react" import * as
                ProgressPrimitive from "@radix-ui/react-progress" import { cn } from "@/lib/utils"
                const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
                React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> >(({ className, value, ...props }, ref) => ( <ProgressPrimitive.Root
                    ref= {ref}
                    className= {cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-neutral-900/20 dark:bg-neutral-50/20" ,
                    className
                    )}
                    {...props}
                >
                    <ProgressPrimitive.Indicator
                        className="h-full w-full flex-1 bg-neutral-900 transition-all dark:bg-neutral-50"
                        style= {{ transform: `translateX(-${100 - (value || 0)}%)` }}
                    />
                </ProgressPrimitive.Root> )) Progress.displayName =
                ProgressPrimitive.Root.displayName export { Progress }             </document_content>
        </document>
        <document index="21">
            <source>components/ui/select.tsx</source>
            <document_content> "use client" import * as React from "react" import * as
                SelectPrimitive from "@radix-ui/react-select" import { Check, ChevronDown } from
                "lucide-react" import { cn } from "@/lib/utils" const Select = SelectPrimitive.Root
                const SelectGroup = SelectPrimitive.Group const SelectValue = SelectPrimitive.Value
                const SelectTrigger = React.forwardRef<
    React.ElementRef<typeof SelectPrimitive.Trigger>,
                React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> >(({ className, children, ...props }, ref) =>
                ( <SelectPrimitive.Trigger
                    ref= {ref}
                    className= {cn(
            "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" ,
                    className
                    )}
                    {...props}
                > {children} <SelectPrimitive.Icon asChild>
                        <ChevronDown className="h-4 w-4 opacity-50" />
                    </SelectPrimitive.Icon>
                </SelectPrimitive.Trigger>
                )) SelectTrigger.displayName = SelectPrimitive.Trigger.displayName const
                SelectContent = React.forwardRef<
    React.ElementRef<typeof SelectPrimitive.Content>,
                React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> >(({ className, children, position =
                "popper", ...props }, ref) => ( <SelectPrimitive.Portal>
                    <SelectPrimitive.Content
                        ref= {ref}
                        className= {cn(
                "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2" ,
                        position=== "popper" &&
                "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
                className
            )}
            position={position}
            {...props}
        >
                        <SelectPrimitive.Viewport
                            className= {cn(
                    "p-1" ,
                            position=== "popper" &&
                    "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
                )}
            >
                {children}
            </SelectPrimitive.Viewport>
                    </SelectPrimitive.Content>
                </SelectPrimitive.Portal>
                )) SelectContent.displayName = SelectPrimitive.Content.displayName const SelectLabel
                = React.forwardRef<
    React.ElementRef<typeof SelectPrimitive.Label>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
                >(({ className, ...props }, ref) => ( <SelectPrimitive.Label
                    ref= {ref}
                    className= {cn("py-1.5 pl-8 pr-2 text-sm font-semibold" , className)}
                    {...props}
                /> )) SelectLabel.displayName = SelectPrimitive.Label.displayName
                const SelectItem = React.forwardRef<
    React.ElementRef<typeof SelectPrimitive.Item>,
                React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item> >(({ className, children, ...props }, ref) =>
                ( <SelectPrimitive.Item
                    ref= {ref}
                    className= {cn(
            "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50" ,
                    className
                    )}
                    {...props}
                >
                    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
                        <SelectPrimitive.ItemIndicator>
                            <Check className="h-4 w-4" />
                        </SelectPrimitive.ItemIndicator>
                    </span>

                    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
                </SelectPrimitive.Item>
                )) SelectItem.displayName = SelectPrimitive.Item.displayName const SelectSeparator =
                React.forwardRef<
    React.ElementRef<typeof SelectPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
                >(({ className, ...props }, ref) => ( <SelectPrimitive.Separator
                    ref= {ref}
                    className= {cn("-mx-1 my-1 h-px bg-muted" , className)}
                    {...props}
                /> )) SelectSeparator.displayName =
                SelectPrimitive.Separator.displayName export { Select, SelectGroup, SelectValue,
                SelectTrigger, SelectContent, SelectLabel, SelectItem, SelectSeparator, }             </document_content>
        </document>
        <document index="22">
            <source>components/ui/slider.tsx</source>
            <document_content> 'use client' import * as React from 'react' import * as
                SliderPrimitive from '@radix-ui/react-slider' import { cn } from '@/lib/utils' const
                Slider = React.forwardRef<
    React.ElementRef<typeof SliderPrimitive.Root>, React.ComponentPropsWithoutRef<typeof
                    SliderPrimitive.Root> >(({ className, ...props }, ref) => ( <SliderPrimitive.Root
                    ref= {ref}
                    className= {cn(
            'relative flex w-full touch-none select-none items-center' ,
                    className
                    )}
                    {...props}
                >
                    <SliderPrimitive.Track
                        className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
                        <SliderPrimitive.Range className="absolute h-full bg-primary" />
                    </SliderPrimitive.Track>
                    <SliderPrimitive.Thumb
                        className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
                </SliderPrimitive.Root>
                )) Slider.displayName = SliderPrimitive.Root.displayName export { Slider } //
                Example usage export default function SliderDemo() { const [value, setValue] =
                React.useState([50]) return ( <div className="w-full max-w-sm space-y-4">
                    <Slider
                        defaultValue= {[50]}
                        max= {100}
                        step= {1}
                        value= {value}
                        onValueChange= {setValue}
                    />
                    <div className="text-center">
                        Current value: {value}
                    </div>
                </div>
                ) }             </document_content>
        </document>
        <document index="23">
            <source>components/ui/switch.tsx</source>
            <document_content> "use client" import * as React from "react" import * as
                SwitchPrimitives from "@radix-ui/react-switch" import { cn } from "@/lib/utils"
                const Switch = React.forwardRef<
    React.ElementRef<typeof SwitchPrimitives.Root>,
                React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> >(({ className, ...props }, ref) => ( <SwitchPrimitives.Root
                    className= {cn(
            "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input" ,
                    className
                    )}
                    {...props}
                    ref= {ref}
                >
                    <SwitchPrimitives.Thumb
                        className= {cn(
                "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
                        )}
                    />
                </SwitchPrimitives.Root> )) Switch.displayName =
                SwitchPrimitives.Root.displayName export { Switch }             </document_content>
        </document>
        <document index="24">
            <source>components/ui/tabs.tsx</source>
            <document_content> "use client" import * as React from "react" import * as TabsPrimitive
                from "@radix-ui/react-tabs" import { cn } from "@/lib/utils" const Tabs =
                TabsPrimitive.Root const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
                React.ComponentPropsWithoutRef<typeof TabsPrimitive.List> >(({ className, ...props }, ref) => ( <TabsPrimitive.List
                    ref= {ref}
                    className= {cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-neutral-100 p-1 text-neutral-500 dark:bg-neutral-800 dark:text-neutral-400" ,
                    className
                    )}
                    {...props}
                /> )) TabsList.displayName = TabsPrimitive.List.displayName const
                TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
                React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger> >(({ className, ...props }, ref) => ( <TabsPrimitive.Trigger
                    ref= {ref}
                    className= {cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:text-neutral-950 data-[state=active]:shadow dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300 dark:data-[state=active]:bg-neutral-950 dark:data-[state=active]:text-neutral-50" ,
                    className
                    )}
                    {...props}
                /> )) TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
                const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
                React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content> >(({ className, ...props }, ref) => ( <TabsPrimitive.Content
                    ref= {ref}
                    className= {cn(
      "mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300" ,
                    className
                    )}
                    {...props}
                /> )) TabsContent.displayName = TabsPrimitive.Content.displayName
                export { Tabs, TabsList, TabsTrigger, TabsContent }             </document_content>
        </document>
        <document index="25">
            <source>components/ui/textarea.tsx</source>
            <document_content> import * as React from "react" import { cn } from "@/lib/utils"
                export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement>
                { } const Textarea = React.forwardRef<HTMLTextAreaElement , TextareaProps>( ({ className, ...props
                }, ref) => { return ( <textarea
                    className= {cn(
          "flex min-h-[60px] w-full rounded-md border border-neutral-200 bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300" ,
                    className
                    )}
                    ref= {ref}
                    {...props}
                /> ) } ) Textarea.displayName = "Textarea" export { Textarea }             </document_content>
        </document>
        <document index="26">
            <source>components/ui/toast.tsx</source>
            <document_content> import * as React from "react" import * as ToastPrimitives from
                "@radix-ui/react-toast" import { cva, type VariantProps } from
                "class-variance-authority" import { X } from "lucide-react" import { cn } from
                "@/lib/utils" const ToastProvider = ToastPrimitives.Provider const ToastViewport =
                React.forwardRef<
    React.ElementRef<typeof ToastPrimitives.Viewport>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
                >(({ className, ...props }, ref) => ( <ToastPrimitives.Viewport
                    ref= {ref}
                    className= {cn(
            "fixed bottom-0 left-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:max-w-[420px]" ,
                    className
                    )}
                    {...props}
                /> )) ToastViewport.displayName = ToastPrimitives.Viewport.displayName
                const toastVariants = cva( "group pointer-events-auto relative flex w-full
                items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8
                shadow-lg transition-all data-[swipe=cancel]:translate-x-0
                data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)]
                data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)]
                data-[swipe=move]:transition-none data-[state=open]:animate-in
                data-[state=closed]:animate-out data-[swipe=end]:animate-out
                data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full
                data-[state=open]:slide-in-from-top-full
                data-[state=open]:sm:slide-in-from-bottom-full", { variants: { variant: { default:
                "border bg-background text-foreground", destructive: "destructive group
                border-destructive bg-destructive text-destructive-foreground", }, },
                defaultVariants: { variant: "default", }, } ) const Toast = React.forwardRef<
    React.ElementRef<typeof
                    ToastPrimitives.Root>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants> >(({ className,
                variant, ...props }, ref) => { return ( <ToastPrimitives.Root
                    ref= {ref}
                    className= {cn(toastVariants({ variant }), className)}
                    {...props}
                /> ) }) Toast.displayName = ToastPrimitives.Root.displayName const
                ToastAction = React.forwardRef<
    React.ElementRef<typeof ToastPrimitives.Action>,
                React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action> >(({ className, ...props }, ref) => ( <ToastPrimitives.Action
                    ref= {ref}
                    className= {cn(
            "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive" ,
                    className
                    )}
                    {...props}
                /> )) ToastAction.displayName = ToastPrimitives.Action.displayName
                const ToastClose = React.forwardRef<
    React.ElementRef<typeof ToastPrimitives.Close>,
                React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close> >(({ className, ...props }, ref) => ( <ToastPrimitives.Close
                    ref= {ref}
                    className= {cn(
            "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600" ,
                    className
                    )}
                    toast-close=""
                    {...props}
                >
                    <X className="h-4 w-4" />
                </ToastPrimitives.Close> ))
                ToastClose.displayName = ToastPrimitives.Close.displayName const ToastTitle =
                React.forwardRef<
    React.ElementRef<typeof ToastPrimitives.Title>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
                >(({ className, ...props }, ref) => ( <ToastPrimitives.Title
                    ref= {ref}
                    className= {cn("text-sm font-semibold" , className)}
                    {...props}
                /> )) ToastTitle.displayName = ToastPrimitives.Title.displayName const
                ToastDescription = React.forwardRef<
    React.ElementRef<typeof ToastPrimitives.Description>,
                React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description> >(({ className, ...props }, ref) => ( <ToastPrimitives.Description
                    ref= {ref}
                    className= {cn("text-sm opacity-90" , className)}
                    {...props}
                /> )) ToastDescription.displayName =
                ToastPrimitives.Description.displayName type ToastProps =
                React.ComponentPropsWithoutRef<typeof Toast> type ToastActionElement = React.ReactElement<typeof
                    ToastAction> export { type ToastProps, type ToastActionElement, ToastProvider,
                ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction, }             </document_content>
        </document>
        <document index="27">
            <source>components/ui/toaster.tsx</source>
            <document_content> "use client" import { Toast, ToastClose, ToastDescription,
                ToastProvider, ToastTitle, ToastViewport, } from "@/app/components/ui/toast" import
                { useToast } from "@/app/components/ui/use-toast" export function Toaster() { const
                { toasts } = useToast() return ( <ToastProvider> {toasts.map(function ({ id, title,
                description, action, ...props }) { return ( <Toast key= {id} {...props}>
                        <div className="grid gap-1"> {title && <ToastTitle>{title}</ToastTitle>}
                {description && ( <ToastDescription>{description}</ToastDescription> )} </div>
                {action} <ToastClose />
                    </Toast> ) })} <ToastViewport />
                </ToastProvider>
                ) } </document_content>
        </document>
        <document index="28">
            <source>components/ui/tooltip.tsx</source>
            <document_content> "use client" import * as React from "react" import * as
                TooltipPrimitive from "@radix-ui/react-tooltip" import { cn } from "@/lib/utils"
                const TooltipProvider = TooltipPrimitive.Provider const Tooltip =
                TooltipPrimitive.Root const TooltipTrigger = TooltipPrimitive.Trigger const
                TooltipContent = React.forwardRef<
    React.ElementRef<typeof TooltipPrimitive.Content>,
                React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> >(({ className, sideOffset = 4, ...props },
                ref) => ( <TooltipPrimitive.Content
                    ref= {ref}
                    sideOffset= {sideOffset}
                    className= {cn(
            "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2" ,
                    className
                    )}
                    {...props}
                /> )) TooltipContent.displayName =
                TooltipPrimitive.Content.displayName export { Tooltip, TooltipTrigger,
                TooltipContent, TooltipProvider }             </document_content>
        </document>
        <document index="29">
            <source>components/ui/use-toast.tsx</source>
            <document_content> import * as React from "react" import type { ToastActionElement,
                ToastProps, } from "@/app/components/ui/toast" const TOAST_LIMIT = 1 const
                TOAST_REMOVE_DELAY = 1000000 type ToasterToast = ToastProps & { id: string title?:
                React.ReactNode description?: React.ReactNode action?: ToastActionElement } const
                actionTypes = { ADD_TOAST: "ADD_TOAST", UPDATE_TOAST: "UPDATE_TOAST", DISMISS_TOAST:
                "DISMISS_TOAST", REMOVE_TOAST: "REMOVE_TOAST", } as const let count = 0 function
                genId() { count = (count + 1) % Number.MAX_VALUE return count.toString() } type
                ActionType = typeof actionTypes type Action = | { type: ActionType["ADD_TOAST"]
                toast: ToasterToast } | { type: ActionType["UPDATE_TOAST"] toast: Partial<ToasterToast>
                } | { type: ActionType["DISMISS_TOAST"] toastId?: ToasterToast["id"] } | { type:
                ActionType["REMOVE_TOAST"] toastId?: ToasterToast["id"] } interface State { toasts:
                ToasterToast[] } const toastTimeouts = new Map<string , ReturnType<typeof setTimeout>>() const
                addToRemoveQueue = (toastId: string) => { if (toastTimeouts.has(toastId)) { return }
                const timeout = setTimeout(() => { toastTimeouts.delete(toastId) dispatch({ type:
                "REMOVE_TOAST", toastId: toastId, }) }, TOAST_REMOVE_DELAY)
                toastTimeouts.set(toastId, timeout) } export const reducer = (state: State, action:
                Action): State => { switch (action.type) { case "ADD_TOAST": return { ...state,
                toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT), } case
                "UPDATE_TOAST": return { ...state, toasts: state.toasts.map((t) => t.id ===
                action.toast.id ? { ...t, ...action.toast } : t ), } case "DISMISS_TOAST": { const {
                toastId } = action // ! Side effects ! - This could be extracted into a
                dismissToast() action, // but I'll keep it here for simplicity if (toastId) {
                addToRemoveQueue(toastId) } else { state.toasts.forEach((toast) => {
                addToRemoveQueue(toast.id) }) } return { ...state, toasts: state.toasts.map((t) =>
                t.id === toastId || toastId === undefined ? { ...t, open: false, } : t ), } } case
                "REMOVE_TOAST": if (action.toastId === undefined) { return { ...state, toasts: [], }
                } return { ...state, toasts: state.toasts.filter((t) => t.id !== action.toastId), }
                } } const listeners: Array<(state: State) => void> = [] let memoryState: State = { toasts: [] }
                function dispatch(action: Action) { memoryState = reducer(memoryState, action)
                listeners.forEach((listener) => { listener(memoryState) }) } type Toast = Omit<ToasterToast
                    , "id"> function toast({ ...props }: Toast) { const id = genId() const update =
                (props: ToasterToast) => dispatch({ type: "UPDATE_TOAST", toast: { ...props, id },
                }) const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id }) dispatch({
                type: "ADD_TOAST", toast: { ...props, id, open: true, onOpenChange: (open) => { if
                (!open) dismiss() }, }, }) return { id: id, dismiss, update, } } function useToast()
                { const [state, setState] = React.useState<State>(memoryState) React.useEffect(() =>
                { listeners.push(setState) return () => { const index = listeners.indexOf(setState)
                if (index > -1) { listeners.splice(index, 1) } } }, [state]) return { ...state,
                toast, dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
                } } export { useToast, toast }             </document_content>
        </document>
        <document index="30">
            <source>components/MainInterface/ClientMainInterface.tsx</source>
            <document_content> 'use client' import { MainInterface } from './MainInterface' export
                default function ClientMainInterface() { return <MainInterface /> } </document_content>
        </document>
        <document index="31">
            <source>components/MainInterface/EpubViewer.tsx</source>
            <document_content> import React, { Suspense, lazy } from 'react'; import { useState }
                from 'react'; interface EpubViewerProps { url: string; location: string | number;
                setLocation: (location: string) => void; } const LazyReactReader = lazy(() =>
                import('react-reader')); const EpubViewer: React.FC<EpubViewerProps> = ({ url,
                location, setLocation }) => { return ( <div style= {{ height: '100%' , position: 'relative' }}>
                    <Suspense fallback= {<div>Loading...</div>}> <LazyReactReader
                            url= {url}
                            location= {location}
                            locationChanged= {(epubcfi: string)=> setLocation(epubcfi)} epubOptions={{
                allowPopups: true, allowScriptedContent: true, }} epubInitOptions={{ openAs: 'epub',
                }} />               </Suspense>
                </div>
                ); }; export default EpubViewer;             </document_content>
        </document>
        <document index="32">
            <source>components/MainInterface/FileViewer.tsx</source>
            <document_content> import React, { useState, useEffect, useCallback, useRef } from
                'react'; import { Upload } from 'lucide-react'; import { Input } from
                '@/components/ui/input'; import { useToast } from '@/components/ui/use-toast';
                import { Viewer, Worker, SpecialZoomLevel } from '@react-pdf-viewer/core'; import {
                defaultLayoutPlugin } from '@react-pdf-viewer/default-layout'; import { ReactReader
                } from "react-reader"; import '@react-pdf-viewer/core/lib/styles/index.css'; import
                '@react-pdf-viewer/default-layout/lib/styles/index.css'; interface FileViewerProps {
                currentFile: File | null; onFileUpload: (event: React.ChangeEvent<HTMLInputElement>)
                => void; onTextSelect: (selectedText: string) => void; onWordDoubleClick: (word:
                string) => void; recentFiles: Array<{ name: string; progress: number }>; onRecentFileClick: (fileName: string) => void;
                } // PDF Viewer Component interface PDFViewerProps { file: string | null;
                onLoadSuccess: (numPages: number) => void; } const PDFViewer: React.FC<PDFViewerProps>
                = ({ file, onLoadSuccess }) => { const defaultLayoutPluginInstance =
                defaultLayoutPlugin({ sidebarTabs: (defaultTabs) => [defaultTabs[0]], }); if (!file)
                { return <div className="flex items-center justify-center h-full">No PDF file
                selected</div>; } return ( <div className="h-full w-full">
                    <Worker workerUrl= {`https:// unpkg.com/ pdfjs-dist@3.11.174/ build/ pdf.worker.min.js`}>
                        <Viewer
                            fileUrl= {file}
                            plugins= {[defaultLayoutPluginInstance]}
                            onDocumentLoad= {(e)=> onLoadSuccess(e.doc.numPages)}
                defaultScale={SpecialZoomLevel.PageFit}
                        />
                    </Worker>
                </div>
                ); }; // EPUB Viewer Component interface EpubViewerProps { url: string; location:
                string | number; setLocation: (location: string) => void; } const EpubViewer:
                React.FC<EpubViewerProps> = ({ url, location, setLocation }) => { return ( <div
                    style= {{ height: "100%" , position: "relative" }}>
                    <ReactReader
                        url= {url}
                        location= {location}
                        locationChanged= {(epubcfi: string)=> setLocation(epubcfi)}
                    epubOptions={{
                    allowPopups: true,
                    allowScriptedContent: true,
                    }}
                    epubInitOptions={{
                    openAs: 'epub',
                    }}
                    />
                </div> ); }; // export const
                FileViewer: React.FC<FileViewerProps> = ({ currentFile, onFileUpload, onTextSelect,
                onWordDoubleClick }) => { export const FileViewer: React.FC<FileViewerProps> = ({
                currentFile, onFileUpload, onTextSelect, onWordDoubleClick, recentFiles,
                onRecentFileClick }) => { const [fileContent, setFileContent] = useState<string>('');
                const [loadingNewPdf, setLoadingNewPdf] = useState(false); const [numPages,
                setNumPages] = useState<number | null>(null); const [pdfKey, setPdfKey] = useState(0);
                const [epubLocation, setEpubLocation] = useState<string | number>(0); const prevFileUrl =
                React.useRef<string | null>(null); const { toast } = useToast(); const fileContainerRef =
                useRef<HTMLDivElement>(null); const handleTextSelection = useCallback((event:
                MouseEvent) => { if (currentFile && (currentFile.type === 'application/pdf' ||
                currentFile.type === 'application/epub+zip')) { const selection =
                window.getSelection(); if (selection &&
                fileContainerRef.current?.contains(selection.anchorNode)) { const selectedText =
                selection.toString().trim(); if (selectedText) { if (event.detail === 2) { // Double
                click onWordDoubleClick(selectedText); } else { onTextSelect(selectedText); } } } }
                }, [currentFile, onTextSelect, onWordDoubleClick]); useEffect(() => { if
                (currentFile && (currentFile.type === 'application/pdf' || currentFile.type ===
                'application/epub+zip')) { document.addEventListener('mouseup',
                handleTextSelection); return () => { document.removeEventListener('mouseup',
                handleTextSelection); }; } }, [currentFile, handleTextSelection]); useEffect(() => {
                if (currentFile) { setLoadingNewPdf(true); if (currentFile.type === 'text/plain') {
                const reader = new FileReader(); reader.onload = (e) => { const content =
                e.target?.result as string; setFileContent(content); setLoadingNewPdf(false); };
                reader.readAsText(currentFile); } else if (currentFile.type === 'application/pdf') {
                prevFileUrl.current = URL.createObjectURL(currentFile); setPdfKey((prevKey) =>
                prevKey + 1); } else if (currentFile.type === 'application/epub+zip') {
                prevFileUrl.current = URL.createObjectURL(currentFile); setEpubLocation(0);
                setLoadingNewPdf(false); toast({ title: 'EPUB Notice', description: `EPUB needs to
                be DRM-free. If content doesn't show, use tools like Calibre to convert EPUB to
                EPUB.`, }); } else { setFileContent(''); setLoadingNewPdf(false); } } },
                [currentFile, toast]); const renderFileContent = () => { if (!currentFile) { return
                ( <div className="flex flex-col items-center justify-center h-full">
                    <Input
                        type="file"
                        onChange= {onFileUpload}
                        className="hidden"
                        id="file-upload"
                        accept=".pdf,.txt,.epub"
                    />
                    <label
                        htmlFor="file-upload"
                        className="flex flex-col items-center justify-center w-64 h-64 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-gray-400 transition-colors duration-200"
                    >
                        <Upload className="w-12 h-12 text-gray-400" />
                        <span className="mt-2 text-sm text-gray-500">Choose a file or drag it here</span>
                    </label>
                {recentFiles.length > 0 && ( <div className="mt-8">
                        <h3 className="text-lg font-semibold mb-2">Recent Files</h3>
                        <ul className="space-y-2"> {recentFiles.map((file, index) => ( <li key= {index}>
                                <button
                                    onClick= {()=> onRecentFileClick(file.name)}
                className="text-blue-500 hover:underline"
                                    >
                                    {file.name}
                                </button>
                            </li>
                ))} </ul>
                    </div> )} </div> ); } switch (currentFile.type) { case
                'text/plain': return ( <div className="bg-white p-4 rounded shadow-inner">
                    <pre className="whitespace-pre-wrap">{fileContent}</pre>
                </div> ); case
                'application/pdf': return ( <div className="h-full w-full">
                    <div ref= {fileContainerRef} className="h-full w-full">
                        <PDFViewer
                            file= {prevFileUrl.current}
                            onLoadSuccess= {(numPages)=> {
                        setNumPages(numPages);
                        setLoadingNewPdf(false);
                        }}
                        />
                    </div>
                </div>
                ); case 'application/epub+zip': return ( <div className="h-full w-full">
                    <div ref= {fileContainerRef} className="h-full w-full">
                        <EpubViewer
                            url= {prevFileUrl.current!}
                            location= {epubLocation}
                            setLocation= {(location: string)=> setEpubLocation(location)}
                        />
                    </div>
                </div>
                ); default: return <p>Unsupported file type</p>; } }; return ( <div
                    className="bg-gray-100 h-full flex flex-col items-center justify-center">
                {renderFileContent()}
                </div> ); }; export { PDFViewer,
                EpubViewer };             </document_content>
        </document>
        <document index="33">
            <source>components/MainInterface/Layout.tsx</source>
            <document_content> import React from 'react'; import Sidebar from './Sidebar'; import
                TopSidebar from './TopSidebar'; import { sharedStyles } from '@/utils/styles'; const
                Layout = ({ children }) => { return ( <div className= {`flex flex-col h-screen ${sharedStyles.card}`}>
                    <TopSidebar />
                    <div className="flex flex-1 overflow-hidden">
                        <Sidebar />
                        <main className="flex-grow overflow-auto p-4">
                            {children}
                        </main>
                    </div>
                </div>
                ); }; export default Layout; </document_content>
        </document>
        <document index="34">
            <source>components/MainInterface/MainInterface.tsx</source>
            <document_content> 'use client' import React, { useState, useEffect, useCallback, useRef
                } from "react" import { Settings } from "lucide-react" import { Button } from
                "@/components/ui/button" import { Dialog, DialogContent, DialogHeader, DialogTitle }
                from "@/components/ui/dialog" import { useToast } from "@/components/ui/use-toast"
                import { FileViewer } from "./FileViewer" import { Sidebar } from "./Sidebar" import
                { TopSidebar } from "./TopSidebar" import { SettingsDialog } from "./SettingsDialog"
                import { useRouter } from 'next/navigation' import { useSelector, useDispatch } from
                'react-redux' import { RootState } from '@/app/store' import { setCurrentFile,
                addRecentFile } from '@/app/slices/fileSlice' import { setApiKey, setSelectedModel,
                setCustomPrompts, SettingsState } from '@/app/slices/settingsSlice' import {
                DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from
                "@/components/ui/dropdown-menu" import SignOutButton from
                "@/components/common/SignOutButton" import { handleGenerateContent } from
                "@/utils/contentUtils" const MainInterface = () => { const [mode, setMode] =
                useState<'language' | 'flashcard' | 'explain'>('language'); const [languageSubMode, setLanguageSubMode] = useState<'english' | 'french'>('english');
                const [settingsOpen, setSettingsOpen] = useState(false); const [explanation,
                setExplanation] = useState(''); const [selectedText, setSelectedText] =
                useState(''); const fileViewerRef = useRef<HTMLDivElement>(null); const dispatch =
                useDispatch(); const { currentFile, recentFiles } = useSelector((state: RootState)
                => state.file); const { apiKey, selectedModel, customPrompts } = useSelector((state:
                RootState) => state.settings); const { toast } = useToast(); const router =
                useRouter(); useEffect(() => { const storedApiKey = localStorage.getItem('apiKey');
                if (storedApiKey) dispatch(setApiKey(storedApiKey)); const handleSelectionChange =
                () => { const selection = window.getSelection(); if (selection) { const
                newSelectedText = selection.toString().trim(); if (newSelectedText)
                setSelectedText(newSelectedText); } }; document.addEventListener('selectionchange',
                handleSelectionChange); return () => {
                document.removeEventListener('selectionchange', handleSelectionChange); }; },
                [dispatch]); const handleContentGeneration = useCallback(async (text: string) => {
                return handleGenerateContent(text, mode, customPrompts, languageSubMode, apiKey,
                selectedModel, dispatch, setExplanation); }, [mode, customPrompts, languageSubMode,
                apiKey, selectedModel, dispatch, setExplanation]); const handleWordDoubleClick =
                useCallback((word: string) => { if (mode === 'language')
                handleContentGeneration(word); }, [mode, handleContentGeneration]); const
                handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => { const file =
                event.target.files?.[0]; if (file) { dispatch(setCurrentFile(file));
                dispatch(addRecentFile({ name: file.name, progress: 0 })); } }; const
                handleRecentFileClick = useCallback((fileName: string) => { // Logic to load the
                selected recent file const file = new File([''], fileName, { type:
                'application/octet-stream' }); dispatch(setCurrentFile(file)); toast({ title:
                'Recent file selected', description: `Loading ${fileName}...` }); // Additional
                logic to load file content can be added here }, [dispatch, toast]); const
                handleSettingsClick = () => setSettingsOpen(true); const handleDashboardClick = ()
                => router.push('/dashboard'); return ( <div className="flex flex-col h-screen">
                    <div className="flex flex-1 overflow-hidden">
                        <div className="flex-grow overflow-auto mr-4" ref= {fileViewerRef}>
                            <FileViewer
                                currentFile= {currentFile}
                                onFileUpload= {handleFileUpload}
                                onTextSelect= {setSelectedText}
                                onWordDoubleClick= {handleWordDoubleClick}
                                recentFiles= {recentFiles}
                                onRecentFileClick= {handleRecentFileClick}
                            />
                        </div>
                        <Sidebar
                            mode= {mode}
                            setMode= {setMode}
                            languageSubMode= {languageSubMode}
                            setLanguageSubMode= {setLanguageSubMode}
                            handleGenerateContent= {()=> handleContentGeneration(selectedText)}
                handleFileUpload={handleFileUpload}
                        explanation={explanation}
                        setExplanation={setExplanation}
                        />
                        <TopSidebar />
                    </div>

                    <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                            <Button
                                className="absolute bottom-4 right-4 bg-white text-black border border-gray-300"
                                size="icon">
                                <Settings className="h-4 w-4" />
                            </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end"
                            className="w-auto min-w-[8rem] bg-white border border-gray-300">
                            <DropdownMenuItem className="w-full text-black hover:bg-gray-100">
                                <SignOutButton />
                            </DropdownMenuItem>
                            <DropdownMenuItem className="w-full text-black hover:bg-gray-100"
                                onClick= {handleDashboardClick}>
                                Dashboard
                            </DropdownMenuItem>
                            <DropdownMenuItem className="w-full text-black hover:bg-gray-100"
                                onClick= {handleSettingsClick}>
                                Settings
                            </DropdownMenuItem>
                        </DropdownMenuContent>
                    </DropdownMenu>

                    <SettingsDialog
                        open= {settingsOpen}
                        onOpenChange= {setSettingsOpen}
                        setApiKey= {(value: string)=> dispatch(setApiKey(value))}
                selectedModel={selectedModel}
                    setSelectedModel={(value: string) => dispatch(setSelectedModel(value))}
                customPrompts={customPrompts}
                    setCustomPrompts={(value: SettingsState['customPrompts']) =>
                dispatch(setCustomPrompts(value))}
                    />

                    {explanation && (
                    <Dialog open= {!!explanation} onOpenChange= {()=> setExplanation('')}> <DialogContent
                            className="sm:max-w-[425px]">
                            <DialogHeader>
                                <DialogTitle>Explanation</DialogTitle>
                            </DialogHeader>
                            <div className="mt-4" dangerouslySetInnerHTML= {{ __html: explanation }} />
                        </DialogContent>
                    </Dialog>
                )}
                </div> ); }; export default
                MainInterface;             </document_content>
        </document>
        <document index="35">
            <source>components/MainInterface/PDFViewer.tsx</source>
            <document_content> 'use client'; import React, { useEffect } from 'react'; import {
                Viewer, Worker, SpecialZoomLevel } from '@react-pdf-viewer/core'; import {
                defaultLayoutPlugin } from '@react-pdf-viewer/default-layout'; import
                '@react-pdf-viewer/core/lib/styles/index.css'; import
                '@react-pdf-viewer/default-layout/lib/styles/index.css'; interface PDFViewerProps {
                file: string | null; onLoadSuccess: (numPages: number) => void; } const PDFViewer:
                React.FC<PDFViewerProps> = ({ file, onLoadSuccess }) => { const
                defaultLayoutPluginInstance = defaultLayoutPlugin({ sidebarTabs: (defaultTabs) =>
                [defaultTabs[0]], }); if (!file) { return <div
                    className="flex items-center justify-center h-full">No PDF file selected</div>;
                } return ( <Worker workerUrl= {`https:// unpkg.com/ pdfjs-dist@3.11.174/ build/ pdf.worker.min.js`}>
                    <Viewer
                        fileUrl= {file}
                        plugins= {[defaultLayoutPluginInstance]}
                        onDocumentLoad= {(e)=> onLoadSuccess(e.doc.numPages)}
                defaultScale={SpecialZoomLevel.PageFit}
                    onDocumentError={(error) => {
                    console.error("Error loading PDF:", error);
                    return
                    <div className="flex items-center justify-center h-full">Error loading PDF</div>;
                }}
                    />
                </Worker> ); }; export default
                PDFViewer; useEffect(() => { return () => { // Cleanup Worker when component
                unmounts // This is a placeholder for any cleanup logic needed for the Worker }; },
                []);             </document_content>
        </document>
        <document index="36">
            <source>components/MainInterface/SettingsDialog.tsx</source>
            <document_content> import React from "react" import { Dialog, DialogContent,
                DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog" import
                { Input } from "@/components/ui/input" import { Textarea } from
                "@/components/ui/textarea" import { useSelector, useDispatch } from 'react-redux'
                import { RootState } from '@/app/store' import { setApiKey, setSelectedModel,
                setCustomPrompts } from '@/app/slices/settingsSlice' interface SettingsDialogProps {
                open: boolean onOpenChange: (open: boolean) => void } export function
                SettingsDialog({ open, onOpenChange, }: SettingsDialogProps) { const dispatch =
                useDispatch() const { apiKey, selectedModel, customPrompts } = useSelector((state:
                RootState) => state.settings) return ( <Dialog open= {open} onOpenChange= {onOpenChange}>
                    <DialogContent
                        className="sm:max-w-[800px] w-[95vw] max-h-[95vh] h-[800px] flex flex-col">
                        <DialogHeader className="pb-4">
                            <DialogTitle>Settings</DialogTitle>
                            <DialogDescription>
                                Configure your API key and customize prompts.
                            </DialogDescription>
                        </DialogHeader>
                        <div className="flex-grow overflow-y-auto pr-6">
                            <div className="grid gap-8 py-4">
                                <div className="grid grid-cols-4 items-center gap-4">
                                    <label htmlFor="api-key" className="text-right">
                                        API Key
                                    </label>
                                    <Input
                                        id="api-key"
                                        value= {apiKey}
                                        onChange= {(e)=> {
                                    dispatch(setApiKey(e.target.value))
                localStorage.setItem("apiKey", e.target.value)
                                    }}
                                    className="col-span-3"
                                    />
                                </div>
                                <div className="grid grid-cols-4 items-center gap-4">
                                    <label htmlFor="model" className="text-right">
                                        Model
                                    </label>
                                    <select
                                        id="model"
                                        value= {selectedModel}
                                        onChange= {(e)=>
                dispatch(setSelectedModel(e.target.value))} className="col-span-3 p-2 border
                border-neutral-200 rounded dark:border-neutral-800" > <option
                                            value="claude-3-5-sonnet-20240620">Claude 3.5 Sonnet</option>
                                <option
                                            value="claude-3-haiku">Claude 3 Haiku</option>
                                    </select>
                                </div>
                                <div className="grid grid-cols-4 items-start gap-4">
                                    <label htmlFor="flashcard-prompt" className="text-right pt-2">
                Flashcard Prompt
                                    </label>
                                    <Textarea
                                        id="flashcard-prompt"
                                        value= {customPrompts.flashcard}
                                        onChange= {(e)=> dispatch(setCustomPrompts({
                ...customPrompts, flashcard: e.target.value }))}
                                    className="col-span-3 min-h-[150px]"
                                    />
                                </div>
                                <div className="grid grid-cols-4 items-start gap-4">
                                    <label htmlFor="explain-prompt" className="text-right pt-2">
                Explain Prompt
                                    </label>
                                    <Textarea
                                        id="explain-prompt"
                                        value= {customPrompts.explain}
                                        onChange= {(e)=> dispatch(setCustomPrompts({
                ...customPrompts, explain: e.target.value }))}
                                    className="col-span-3 min-h-[150px]"
                                    />
                                </div>
                                <div className="grid grid-cols-4 items-start gap-4">
                                    <label htmlFor="language-prompt" className="text-right pt-2">
                Language Prompt
                                    </label>
                                    <Textarea
                                        id="language-prompt"
                                        value= {customPrompts.language}
                                        onChange= {(e)=> dispatch(setCustomPrompts({
                ...customPrompts, language: e.target.value }))}
                                    className="col-span-3 min-h-[150px]"
                                    />
                                </div>
                            </div>
                        </div>
                    </DialogContent>
                </Dialog>
                ) } </document_content>
        </document>
        <document index="37">
            <source>components/MainInterface/Sidebar.tsx</source>
            <document_content> import React, { useRef } from "react" import { Button } from
                "@/components/ui/button" import { Input } from "@/components/ui/input" import {
                FlashcardCollection } from "../Cards/FlashcardCollection" import {
                LanguageCardCollection } from "../Cards/LanguageCardCollection" import {
                useSelector, useDispatch } from 'react-redux' import { RootState } from
                '@/app/store' import { removeFlashcard, clearFlashcards } from
                '@/app/slices/flashcardsSlice' import { removeLanguageCard, clearLanguageCards }
                from '@/app/slices/languageCardsSlice' import { useToast } from
                '@/components/ui/use-toast'; interface SidebarProps { mode: "language" | "flashcard"
                | "explain" setMode: React.Dispatch<React.SetStateAction<"language" | "flashcard" | "explain">> languageSubMode:
                "english" | "french" setLanguageSubMode: React.Dispatch<React.SetStateAction<"english" | "french">>
                handleGenerateContent: () => Promise<any> handleFileUpload: (event:
                React.ChangeEvent<HTMLInputElement>) => void explanation: string setExplanation:
                React.Dispatch<React.SetStateAction<string>> } export function Sidebar({ mode,
                setMode, languageSubMode, setLanguageSubMode, handleGenerateContent,
                handleFileUpload, explanation, setExplanation }: SidebarProps) { const
                [sidebarWidth, setSidebarWidth] = React.useState(30) const sidebarRef = useRef<HTMLDivElement>(null)
                const resizeHandleRef = useRef<HTMLDivElement>(null) const dispatch = useDispatch()
                const flashcards = useSelector((state: RootState) => state.flashcards) const
                languageCards = useSelector((state: RootState) => state.languageCards) const { toast
                } = useToast(); const handleSaveCards = async () => { try { const cardsToSave = mode
                === 'flashcard' ? flashcards : languageCards; if (cardsToSave.length === 0) {
                toast({ title: "No cards to save", description: "Please generate some cards first.",
                }); return; } const response = await fetch('/api/cards', { method: 'POST', headers:
                { 'Content-Type': 'application/json', }, body: JSON.stringify({ type: mode, cards:
                cardsToSave, }), }); if (response.ok) { const { count } = await response.json();
                toast({ title: "Cards saved", description: `${count} card(s) have been saved to the
                database.`, }); // Clear the cards from the Redux store if (mode === 'flashcard') {
                dispatch(clearFlashcards()); } else if (mode === 'language') {
                dispatch(clearLanguageCards()); } } else { throw new Error(`Failed to save cards
                (${cardsToSave.length})`); } } catch (error) { console.error('Error saving cards:',
                error); toast({ title: "Error", description: "Failed to save the cards. Please try
                again.", variant: "destructive", }); } }; const handleMouseDown = (e:
                React.MouseEvent) => { e.preventDefault() document.addEventListener("mousemove",
                handleMouseMove) document.addEventListener("mouseup", handleMouseUp) } const
                handleMouseMove = (e: MouseEvent) => { if (sidebarRef.current &&
                resizeHandleRef.current) { const containerRect =
                sidebarRef.current.parentElement?.getBoundingClientRect() if (containerRect) { const
                newWidth = containerRect.right - e.clientX const newWidthPercentage = (newWidth /
                containerRect.width) * 100 setSidebarWidth(Math.min(Math.max(newWidthPercentage,
                20), 80)) } } } const handleMouseUp = () => {
                document.removeEventListener("mousemove", handleMouseMove)
                document.removeEventListener("mouseup", handleMouseUp) } return ( <div
                    ref= {sidebarRef}
                    className="flex flex-col bg-gray-50 overflow-hidden relative"
                    style= {{ width: `${sidebarWidth}%`, minWidth: "200px" , maxWidth: "80%" }}
                >
                    <div className="flex-grow overflow-y-auto overflow-x-hidden p-4">
                        <div className="space-y-4">
                            <div className="grid grid-cols-3 gap-2">
                                <Button
                                    variant= {mode=== "language" ? "default" : "outline"}
                            onClick={() => setMode("language")}
                        >
                            Language
                        </Button>
                                <Button
                                    variant= {mode=== "flashcard" ? "default" : "outline"}
                            onClick={() => setMode("flashcard")}
                        >
                            Flashcard
                        </Button>
                                <Button
                                    variant= {mode=== "explain" ? "default" : "outline"}
                            onClick={() => setMode("explain")}
                        >
                            Explain
                        </Button>
                            </div>
                {mode === "language" && ( <LanguageCardCollection
                                cards= {languageCards}
                                onRemoveCard= {(index)=> dispatch(removeLanguageCard(index))}
                onAddCard={handleSaveCards} onClearCollection={() => dispatch(clearLanguageCards())}
                /> )} {mode === "flashcard" && ( <FlashcardCollection
                                cards= {flashcards}
                                onRemoveCard= {(index)=> dispatch(removeFlashcard(index))}
                onAddCard={handleSaveCards} onClearCollection={() => dispatch(clearFlashcards())} />
                )}         </div> {mode ===
                "explain" && explanation && ( <div className="mt-4" dangerouslySetInnerHTML= {{ __html: explanation }} /> )} </div>

                    <div className="p-4 border-t">
                        <Button onClick= {handleGenerateContent} className="w-full">
                            {mode === "flashcard" ? "Generate Flashcard" : mode === "explain" ?
                "Generate Explanation" : `Translate to ${languageSubMode === "english" ? "English" :
                "French"}`}
                        </Button>
                    </div>

                    <div
                        ref= {resizeHandleRef}
                        className="w-2 bg-gray-300 hover:bg-gray-400 cursor-ew-resize absolute top-0 left-0 bottom-0 transition-colors"
                        onMouseDown= {handleMouseDown}
                    />

                    <Input
                        type="file"
                        onChange= {handleFileUpload}
                        className="hidden"
                        id="file-upload"
                        accept=".pdf,.txt,.epub"
                    />
                </div> ) }             </document_content>
        </document>
        <document index="38">
            <source>components/MainInterface/TopSidebar.tsx</source>
            <document_content> 'use client' import React from "react"; import { useRouter } from
                "next/navigation"; import { Button } from "@/components/ui/button"; import {
                DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from
                "@/components/ui/dropdown-menu"; import { LayoutDashboard, Dumbbell, User, Moon, Sun
                } from "lucide-react"; import { useDarkMode } from "@/app/hooks/useDarkMode"; export
                function TopSidebar() { const router = useRouter(); const { theme, toggleTheme } =
                useDarkMode(); const SidebarButton = ({ icon, label, onClick, dropdown = false }) =>
                { const ButtonContent = ( <Button
                    variant="ghost"
                    size="icon"
                    className="w-12 h-12 p-2 flex justify-center items-center group relative"
                    onClick= {dropdown ? undefined : onClick}
      >
        {React.cloneElement(icon, { className: "h-5 w-5" })}
                    <span
                        className="absolute left-full ml-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
                {label}
                    </span>
                </Button> ); return dropdown ?
                ( <DropdownMenuTrigger asChild>{ButtonContent}</DropdownMenuTrigger> ) : ( ButtonContent );
                }; const handleDashboardClick = () => { router.push("/dashboard"); }; return ( <div
                    className="fixed left-0 top-0 bottom-0 w-14 flex items-center justify-center z-50">
                    <div className="bg-black/10 py-2 rounded-lg">
                        <div className="space-y-2">
                            <SidebarButton icon= {
                            <LayoutDashboard />} label="Dashboard" onClick={handleDashboardClick} />
                            <SidebarButton
                                icon= {theme=== "light" ?
                            <Moon /> :
                            <Sun />}
                            label="Toggle Theme"
                            onClick={toggleTheme}
                            />
                            <SidebarButton
                                icon= {
                            <Dumbbell />}
                            label="Practice"
                            onClick={() => router.push("/practice")}
                            />
                            <DropdownMenu>
                                <SidebarButton icon= {
                                <User />} label="Profile" dropdown={true} />
                                <DropdownMenuContent align="end">
                                    <DropdownMenuItem onSelect= {()=>
                router.push("/profile")}>Profile</DropdownMenuItem>
                                    <DropdownMenuItem onSelect= {()=>
                router.push("/settings")}>Settings</DropdownMenuItem>
                                    <DropdownMenuItem onSelect= {()=> signOut()}>Sign out</DropdownMenuItem>
                                </DropdownMenuContent>
                            </DropdownMenu>
                        </div>
                    </div>
                </div>
                ); } </document_content>
        </document>
        <document index="39">
            <source>components/Cards/Flashcard.tsx</source>
            <document_content> import React from 'react' import { Card, CardContent } from
                "@/components/ui/card" import { Button } from "@/components/ui/button" import { X }
                from "lucide-react" interface FlashcardProps { question: string answer: string
                onRemove: () => void } function createMarkup(content: string) { return { __html:
                content }; } export default function Flashcard({ question, answer, onRemove }:
                FlashcardProps) { const [isFlipped, setIsFlipped] = React.useState(false) const
                handleClick = (e: React.MouseEvent) => { if (!(e.target as
                HTMLElement).closest('button')) { setIsFlipped(!isFlipped) } } return ( <Card
                    className= {`bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer ${isFlipped ? 'bg-blue-50 dark:bg-blue-900' : ''}`}
            onClick={handleClick}
        >
                    <CardContent className="p-3 relative">
                        <Button
                            variant="ghost"
                            size="icon"
                            className="absolute top-0.5 right-0.5 text-neutral-500 hover:text-red-500 dark:text-neutral-400 dark:hover:text-red-400 z-10"
                            onClick= {(e)=> { e.stopPropagation() onRemove() }} > <X
                                className="h-3 w-3" />
                        </Button>
                        <div className="text-sm"> {isFlipped ? ( <p
                                className="text-blue-800 dark:text-blue-200 break-words font-medium"
                                dangerouslySetInnerHTML= {createMarkup(answer)}
                            /> ) : ( <p
                                className="text-neutral-900 dark:text-neutral-100 break-words"
                                dangerouslySetInnerHTML= {createMarkup(question)}
                            /> )} </div>
                    </CardContent>
                </Card>
                ) } </document_content>
        </document>
        <document index="40">
            <source>components/Cards/FlashcardCollection.tsx</source>
            <document_content> import React from 'react' import { Button } from
                "@/components/ui/button" import { Plus, Trash2 } from "lucide-react" import
                Flashcard from './Flashcard' interface FlashcardCollectionProps { cards: Array<{ question: string; answer: string }>
                onRemoveCard: (index: number) => void onAddCard: () => void onClearCollection: () =>
                void } export function FlashcardCollection({ cards, onRemoveCard, onAddCard,
                onClearCollection, }: FlashcardCollectionProps) { return ( <div
                    className="flex flex-col h-full">
                    <div className="flex-grow overflow-y-auto pr-2">
                        <div className="space-y-1"> {cards.map((card, index) => ( <Flashcard
                                key= {index}
                                question= {card.question}
                                answer= {card.answer}
                                onRemove= {()=> onRemoveCard(index)} /> ))}         </div>
                    </div>
                {cards.length > 0 && ( <div
                        className="flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700">
                        <Button onClick= {onAddCard} size="sm" className="flex items-center">
                            <Plus className="h-4 w-4 mr-1" /> Save Card(s) </Button>
                        <Button onClick= {onClearCollection} size="sm" variant="destructive"
                            className="flex items-center">
                            <Trash2 className="h-4 w-4 mr-1" /> Clear </Button>
                    </div>
                )} </div> ) }             </document_content>
        </document>
        <document index="41">
            <source>components/Cards/LanguageCard.tsx</source>
            <document_content> import React from 'react' import { Card, CardContent } from
                "@/components/ui/card" import { Button } from "@/components/ui/button" import { X }
                from "lucide-react" interface LanguageCardProps { word: string translation: string
                example: string explanation: string onRemove: () => void } function
                createMarkup(content: string) { return { __html: content }; } export default
                function LanguageCard({ word, translation, example, explanation, onRemove }:
                LanguageCardProps) { return ( <Card
                    className="bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
                    <CardContent className="p-3 relative">
                        <Button
                            variant="ghost"
                            size="icon"
                            className="absolute top-0.5 right-0.5 text-neutral-500 hover:text-red-500 dark:text-neutral-400 dark:hover:text-red-400 z-10"
                            onClick= {onRemove}
                        >
                            <X className="h-3 w-3" />
                        </Button>
                        <div className="text-sm space-y-1">
                            <div className="flex items-baseline flex-wrap">
                                <h3
                                    className="text-lg font-bold text-neutral-900 dark:text-neutral-100 mr-2">
                {word}</h3>
                                <p className="text-blue-600 dark:text-blue-400 text-sm">
                ({translation})</p>
                            </div>
                            <p
                                className="text-neutral-700 dark:text-neutral-300 text-xs break-words italic"
                                dangerouslySetInnerHTML= {createMarkup(example)}
                            />
                            <p
                                className="text-green-800 dark:text-green-200 text-xs break-words"
                                dangerouslySetInnerHTML= {createMarkup(explanation)}
                            />
                        </div>
                    </CardContent>
                </Card>
                ) } </document_content>
        </document>
        <document index="42">
            <source>components/Cards/LanguageCardCollection.tsx</source>
            <document_content> import React from 'react' import { Button } from
                "@/components/ui/button" import { Plus, Trash2 } from "lucide-react" import
                LanguageCard from './LanguageCard' interface LanguageCardCollectionProps { cards:
                Array<{ word: string; translation: string; example: string; explanation: string }> onRemoveCard: (index: number) => void onAddCard: () => void
                onClearCollection: () => void } export function LanguageCardCollection({ cards,
                onRemoveCard, onAddCard, onClearCollection, }: LanguageCardCollectionProps) { return
                ( <div className="flex flex-col h-full">
                    <div className="flex-grow overflow-y-auto pr-2">
                        <div className="space-y-1"> {cards.map((card, index) => ( <LanguageCard
                                key= {index}
                                word= {card.word}
                                translation= {card.translation}
                                example= {card.example}
                                explanation= {card.explanation}
                                onRemove= {()=> onRemoveCard(index)} /> ))}         </div>
                    </div>
                {cards.length > 0 && ( <div
                        className="flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700">
                        <Button onClick= {onAddCard} size="sm" className="flex items-center">
                            <Plus className="h-4 w-4 mr-1" /> Save Card(s) </Button>
                        <Button onClick= {onClearCollection} size="sm" variant="destructive"
                            className="flex items-center">
                            <Trash2 className="h-4 w-4 mr-1" /> Clear </Button>
                    </div>
                )} </div> ) }             </document_content>
        </document>
        <document index="43">
            <source>app/globals.css</source>
            <document_content>
                @tailwind base;
                @tailwind components;
                @tailwind utilities;

                :root {
                --background: #ffffff;
                --foreground: #171717;
                }

                @media (prefers-color-scheme: dark) {
                :root {
                --background: #0a0a0a;
                --foreground: #ededed;
                }
                }

                body {
                color: var(--foreground);
                background: var(--background);
                font-family: Arial, Helvetica, sans-serif;
                }

                @layer utilities {
                .text-balance {
                text-wrap: balance;
                }
                }

            </document_content>
        </document>
        <document index="44">
            <source>app/layout.tsx</source>
            <document_content> import type { Metadata } from "next"; import localFont from
                "next/font/local"; import Layout from '@/components/ui/Layout'; import { Toaster }
                from '@/components/ui/toaster'; import { Providers } from
                "@/app/providers/Providers"; import "@/styles/globals.css"; const geistSans =
                localFont({ src: "../public/fonts/GeistVF.woff", variable: "--font-geist-sans",
                weight: "100 900", }); const geistMono = localFont({ src:
                "../public/fonts/GeistMonoVF.woff", variable: "--font-geist-mono", weight: "100
                900", }); export const metadata: Metadata = { title: "Recall AI", description:
                "Learn as you read", icons: { icon: "/icon.svg" }, }; export default function
                RootLayout({ children }: { children: React.ReactNode }) { return ( <html lang="en">
                    <body className= {`${geistSans.variable} ${geistMono.variable} antialiased`}>
                        <Providers>
                            <Layout> {children} <Toaster />
                            </Layout>
                        </Providers>
                    </body>
                </html>
                ); } </document_content>
        </document>
        <document index="45">
            <source>app/page.tsx</source>
            <document_content> 'use client' import { useRef } from 'react' import Link from
                "next/link" import { useSession } from "next-auth/react" import { Button } from
                "@/components/ui/button" import { Input } from "@/components/ui/input" import {
                Textarea } from "@/components/ui/textarea" import { Icons } from
                "@/components/ui/icons" import SignOutButton from
                '@/components/common/SignOutButton' export default function RecallAIPage() { const {
                data: session } = useSession() const featuresRef = useRef<HTMLElement>(null) const
                aboutRef = useRef<HTMLElement>(null) const contactRef = useRef<HTMLElement>(null)
                const scrollToSection = (ref: React.RefObject<HTMLElement>) => { if (ref.current) {
                ref.current.scrollIntoView({ behavior: 'smooth', block: 'start' }) } } return ( <div
                    className="flex flex-col min-h-screen bg-gradient-to-b from-background to-muted">
                    <header
                        className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
                        <div className="container flex h-14 items-center">
                            <Link className="flex items-center justify-center ml-4" href="#">
                                <Icons.mainIcon className="w-8 h-8 mr-2" />
                                <span
                                    className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-pink-500">Recall
                AI</span>
                            </Link>
                            <nav className="ml-auto flex items-center gap-4 sm:gap-6">
                                <Link
                                    href="#features"
                                    onClick= {(e)=> {
                                    e.preventDefault()
                                    scrollToSection(featuresRef)
                                    }}
                                    className="text-sm font-medium hover:text-primary"
                                    >
                                    Features
                                </Link>
            <Link
                                    href="#about"
                                    onClick= {(e)=> {
                                    e.preventDefault()
                                    scrollToSection(aboutRef)
                                    }}
                                    className="text-sm font-medium hover:text-primary"
                                    >
                                    About
                                </Link>
            <Link
                                    href="#contact"
                                    onClick= {(e)=> {
                                    e.preventDefault()
                                    scrollToSection(contactRef)
                                    }}
                                    className="text-sm font-medium hover:text-primary"
                                    >
                                    Contact
                                </Link>
                {session ? ( <SignOutButton /> ) : ( <Button size="sm" variant="outline"
                                    className="bg-black text-white font-bold">
                                    <Link href="/signin">Sign In</Link>
                                </Button>
                )} </nav>
                        </div>
                    </header>
                    <main className="flex-1">
                        <section className="w-full py-12 md:py-24 lg:py-32 xl:py-48">
                            <div className="container px-4 md:px-6">
                                <div
                                    className="grid gap-6 lg:grid-cols-[1fr_400px] lg:gap-12 xl:grid-cols-[1fr_600px]">
                                    <div className="flex flex-col justify-center space-y-8">
                                        <div className="space-y-6">
                                            <h1
                                                className="text-4xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none">
                Learn as you <span className="text-blue-500">read</span>
                                            </h1>
                                            <p
                                                className="max-w-[600px] text-muted-foreground md:text-xl space-y-2">
                                                <span className="block">Turn any document into an
                interactive learning experience with AI.</span>
                                                <span className="block">Read once, remember forever
                ...</span>
                                            </p>
                                        </div>
                                        <div className="flex flex-col gap-4 min-[400px]:flex-row">
                {session ? ( <Button size="lg"
                                                className="bg-green-500 hover:bg-green-600 text-white font-bold">
                                                <Link href="/main">Go to App</Link>
                                            </Button>
                ) : ( <Button size="lg"
                                                className="bg-green-500 hover:bg-green-600 text-white font-bold">
                                                <Link href="/signin">Get Started</Link>
                                            </Button>
                )} <Button
                                                size="lg"
                                                variant="outline"
                                                onClick= {(e)=> {
                                                e.preventDefault()
                                                scrollToSection(featuresRef)
                                                }}
                                                >
                                                Learn More
                                            </Button>
                                        </div>
                                    </div>
                                    <div className="flex items-center justify-center">
                                        <div
                                            className="relative w-[300px] h-[300px] sm:w-[400px] sm:h-[400px]">
                                            <div
                                                className="absolute inset-0 bg-gradient-to-r from-blue-500 to-teal-500 rounded-full blur-2xl opacity-20 animate-pulse"></div>
                                            <div
                                                className="relative bg-background border rounded-lg shadow-2xl p-6 backdrop-blur-sm">
                                                <div className="space-y-2">
                                                    <div
                                                        className="h-4 w-3/4 bg-muted-foreground/20 rounded"></div>
                                                    <div
                                                        className="h-4 w-1/2 bg-muted-foreground/20 rounded"></div>
                                                    <div
                                                        className="h-4 w-5/6 bg-muted-foreground/20 rounded"></div>
                                                </div>
                                                <div className="mt-4 grid grid-cols-2 gap-2">
                                                    <div className="h-8 bg-primary/20 rounded"></div>
                                                    <div className="h-8 bg-primary/20 rounded"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </section>
                        <section id="features" ref= {featuresRef} className="w-full py-12 md:py-24 lg:py-32">
                            <div className="container px-4 md:px-6">
                                <h2
                                    className="text-3xl font-bold tracking-tighter sm:text-5xl text-center mb-12">
                Features</h2>
                                <div className="grid gap-10 sm:grid-cols-2 lg:grid-cols-3">
                                    <div
                                        className="flex flex-col items-center space-y-4 text-center">
                                        <div className="p-4 bg-primary/10 rounded-full">
                                            <Icons.book className="h-10 w-10 text-primary" />
                                        </div>
                                        <h3 className="text-xl font-bold">Multi-format Document
                Support</h3>
                                        <p className="text-muted-foreground">Read PDF and EPUB files
                within the app with a smooth, integrated viewing experience.</p>
                                    </div>
                                    <div
                                        className="flex flex-col items-center space-y-4 text-center">
                                        <div className="p-4 bg-primary/10 rounded-full">
                                            <Icons.languages className="h-10 w-10 text-primary" />
                                        </div>
                                        <h3 className="text-xl font-bold">Language Learning on the
                Fly</h3>
                                        <p className="text-muted-foreground">Generate translations
                and create language flashcards instantly as you read.</p>
                                    </div>
                                    <div
                                        className="flex flex-col items-center space-y-4 text-center">
                                        <div className="p-4 bg-primary/10 rounded-full">
                                            <Icons.flashcard className="h-10 w-10 text-primary" />
                                        </div>
                                        <h3 className="text-xl font-bold">Dynamic Flashcard Creation</h3>
                                        <p className="text-muted-foreground">Generate customizable
                flashcards from selected text as you read for personalized learning.</p>
                                    </div>
                                    <div
                                        className="flex flex-col items-center space-y-4 text-center">
                                        <div className="p-4 bg-primary/10 rounded-full">
                                            <Icons.chat className="h-10 w-10 text-primary" />
                                        </div>
                                        <h3 className="text-xl font-bold">Contextual Explanations</h3>
                                        <p className="text-muted-foreground">Get instant
                explanations for complex concepts and discuss content with AI-powered chat.</p>
                                    </div>
                                    <div
                                        className="flex flex-col items-center space-y-4 text-center">
                                        <div className="p-4 bg-primary/10 rounded-full">
                                            <Icons.brain className="h-10 w-10 text-primary" />
                                        </div>
                                        <h3 className="text-xl font-bold">Active Recall Learning</h3>
                                        <p className="text-muted-foreground">Review generated
                flashcards with a spaced repetition system for optimized learning and retention.</p>
                                    </div>
                                    <div
                                        className="flex flex-col items-center space-y-4 text-center">
                                        <div className="p-4 bg-primary/10 rounded-full">
                                            <Icons.integrate className="h-10 w-10 text-primary" />
                                        </div>
                                        <h3 className="text-xl font-bold">Seamless Integration</h3>
                                        <p className="text-muted-foreground">Switch effortlessly
                between reading and learning modes while maintaining context.</p>
                                    </div>
                                </div>
                            </div>
                        </section>
                        <section id="about" ref= {aboutRef}
                            className="w-full py-12 md:py-24 lg:py-32 bg-muted">
                            <div className="container px-4 md:px-6">
                                <h2
                                    className="text-3xl font-bold tracking-tighter sm:text-5xl text-center mb-12">About
                Recall AI</h2>
                                <div className="max-w-3xl mx-auto space-y-6">
                                    <p className="text-xl text-muted-foreground">
                                        Recall AI is an innovative reading and learning application
                designed to enhance your knowledge acquisition and retention while reading digital
                documents.
                                    </p>
                                    <p className="text-muted-foreground">
                                        Our mission is to transform passive reading into an active,
                engaging learning experience. By allowing users to interact with content in
                real-time, create personalized learning materials, and reinforce their knowledge
                through active recall, Recall AI helps users to not just read, but truly absorb and
                retain information from their digital documents.
                                    </p>
                                    <p className="text-muted-foreground">
                                        Whether you're a student studying for exams, a professional
                staying up-to-date in your field, or a lifelong learner exploring new subjects,
                Recall AI provides the tools you need to maximize your learning efficiency and
                effectiveness.
                                    </p>
                                    <h3 className="text-2xl font-bold mt-8 mb-4">Our Team</h3>
                                    <p className="text-muted-foreground">
                                        Recall AI was founded by a team of passionate educators,
                technologists, and lifelong learners. We combine expertise in cognitive science,
                artificial intelligence, and user experience design to create a tool that truly
                enhances the learning process.
                                    </p>
                                    <h3 className="text-2xl font-bold mt-8 mb-4">Our Technology</h3>
                                    <p className="text-muted-foreground">
                                        Recall AI leverages cutting-edge AI technologies to provide
                features like instant translations, contextual explanations, and dynamic flashcard
                creation. We're constantly innovating to bring you the best learning experience
                possible.
                                    </p>
                                </div>
                            </div>
                        </section>
                        <section className="w-full py-12 md:py-24 lg:py-32 bg-muted">
                            <div className="container px-4 md:px-6">
                                <h2
                                    className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl text-center mb-12">
                Powered by AI
                                </h2>
                                <div
                                    className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8 place-items-center">
                                    <Icons.openai className="h-16 w-16 text-[#412991]" />
                                    <Icons.claude className="h-16 w-16 text-[#7C3AED]" />
                                </div>
                            </div>
                        </section>
                        <section id="contact" ref= {contactRef} className="w-full py-12 md:py-24 lg:py-32">
                            <div className="container px-4 md:px-6">
                                <h2
                                    className="text-3xl font-bold tracking-tighter sm:text-5xl text-center mb-12">Contact
                Us</h2>
                                <div className="max-w-2xl mx-auto space-y-6">
                                    <p className="text-xl text-muted-foreground text-center mb-8">
                Have questions or feedback? We'd love to hear from you. Fill out the form below and
                we'll get back to you as soon as possible.
                                    </p>
                                    <form className="space-y-4">
                                        <div className="grid grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <label htmlFor="first-name"
                                                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">First
                name</label>
                                                <Input id="first-name"
                                                    placeholder="Enter your first name" />
                                            </div>
                                            <div className="space-y-2">
                                                <label htmlFor="last-name"
                                                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Last
                name</label>
                                                <Input id="last-name"
                                                    placeholder="Enter your last name" />
                                            </div>
                                        </div>
                                        <div className="space-y-2">
                                            <label htmlFor="email"
                                                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                Email</label>
                                            <Input id="email" placeholder="Enter your email"
                                                type="email" />
                                        </div>
                                        <div className="space-y-2">
                                            <label htmlFor="message"
                                                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                Message</label>
                                            <Textarea id="message" placeholder="Enter your message" />
                                        </div>
                                        <Button type="submit" className="w-full">Send Message</Button>
                                    </form>
                                </div>
                            </div>
                        </section>
                    </main>
                    <footer className="border-t bg-background">
                        <div
                            className="container flex flex-col gap-2 sm:flex-row py-6 w-full shrink-0 items-center px-4 md:px-6">
                            <p className="text-xs text-muted-foreground">© 2023 Recall AI. All
                rights reserved.</p>
                            <nav className="sm:ml-auto flex gap-4 sm:gap-6">
                                <Link className="text-xs hover:underline underline-offset-4"
                                    href="#">
                                    Terms of Service
                                </Link>
                                <Link className="text-xs hover:underline underline-offset-4"
                                    href="#">
                                    Privacy
                                </Link>
                            </nav>
                        </div>
                    </footer>
                </div>
                ) }             </document_content>
        </document>
        <document index="46">
            <source>app/store.ts</source>
            <document_content> import { configureStore, ThunkAction, Action } from
                '@reduxjs/toolkit'; import flashcardsReducer from './slices/flashcardsSlice'; import
                languageCardsReducer from './slices/languageCardsSlice'; import settingsReducer from
                './slices/settingsSlice'; import fileReducer from './slices/fileSlice'; export const
                store = configureStore({ reducer: { flashcards: flashcardsReducer, languageCards:
                languageCardsReducer, settings: settingsReducer, file: fileReducer, }, }); export
                type RootState = ReturnType<typeof store.getState>; export type AppDispatch = typeof
                store.dispatch; export type AppThunk<ReturnType = void> = ThunkAction<
    ReturnType ,
                    RootState,
                    unknown,
                    Action<string> >;             </document_content>
        </document>
        <document index="47">
            <source>app/api/generate/route.ts</source>
            <document_content>
                import { NextRequest, NextResponse } from 'next/server';
                import Anthropic from '@anthropic-ai/sdk';

                export async function POST(req: NextRequest) {
                console.log('API called');

                const { apiKey, model, prompt } = await req.json();

                if (!apiKey || !model || !prompt) {
                return NextResponse.json({ message: 'Missing required parameters' }, { status: 400
                });
                }

                const anthropic = new Anthropic({
                apiKey: apiKey,
                });

                try {
                const response = await anthropic.messages.create({
                model: model,
                max_tokens: 1024,
                messages: [{ role: 'user', content: prompt }],
                });

                return NextResponse.json({ content: response.content[0].text });
                } catch (error) {
                console.error('Error calling Anthropic API:', error);
                return NextResponse.json({ message: 'Error generating content' }, { status: 500 });
                }
                }
</document_content>
        </document>
        <document index="48">
            <source>app/api/cards/route.ts</source>
            <document_content>
                import { NextResponse } from 'next/server';
                import { PrismaClient } from "@prisma/client"
                import { getServerSession } from "next-auth/next";
                import { authOptions } from "../auth/[...nextauth]/route";

                export async function POST(req: Request) {
                const session = await getServerSession(authOptions);
                if (!session || !session.user) {
                return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
                }

                const { type, cards } = await req.json();
                const prisma = new PrismaClient()

                try {
                const savedCards = await prisma.flashcard.createMany({
                data: cards.map((card: any) => ({
                type,
                question: card.question,
                answer: card.answer,
                example: card.example,
                explanation: card.explanation,
                userId: session.user.id,
                })),
                });

                return NextResponse.json({ count: savedCards.count });
                } catch (error) {
                console.error('Error saving cards:', error);
                return NextResponse.json({ error: `Failed to save cards (${cards.length})` }, {
                status: 500 });
                }
                }
</document_content>
        </document>
        <document index="49">
            <source>app/api/auth/[...nextauth]/route.ts</source>
            <document_content>
                import NextAuth from "next-auth"
                import GoogleProvider from "next-auth/providers/google"
                import GitHubProvider from "next-auth/providers/github"
                import { PrismaAdapter } from "@next-auth/prisma-adapter"
                import { PrismaClient } from "@prisma/client"
                import { AuthOptions } from "next-auth"

                const prisma = new PrismaClient()

                export const authOptions: AuthOptions = {
                adapter: PrismaAdapter(prisma),
                providers: [
                GoogleProvider({
                clientId: process.env.GOOGLE_CLIENT_ID!,
                clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
                }),
                GitHubProvider({
                clientId: process.env.GITHUB_ID!,
                clientSecret: process.env.GITHUB_SECRET!,
                }),
                ],
                pages: {
                signIn: '/signin',
                },
                callbacks: {
                async session({ session, token }) {
                if (session.user) {
                session.user.id = token.sub;
                }
                return session;
                },
                async jwt({ token, user }) {
                if (user) {
                token.id = user.id;
                }
                return token;
                },
                async redirect({ url, baseUrl }) {
                if (url === '/signin') {
                return `${baseUrl}/main`
                }
                return url
                },
                },
                events: {
                async createUser({ user }) {
                await prisma.learningStats.create({
                data: {
                userId: user.id,
                },
                });
                },
                },
                secret: process.env.NEXTAUTH_SECRET,
                session: {
                strategy: "jwt",
                },
                jwt: {
                secret: process.env.NEXTAUTH_SECRET,
                },
                debug: process.env.NODE_ENV === 'development',
                }

                const handler = NextAuth(authOptions)

                export { handler as GET, handler as POST }
</document_content>
        </document>
        <document index="50">
            <source>app/dashboard/page.tsx</source>
            <document_content> 'use client' import { useState, useEffect, useMemo, useCallback }
                from 'react' import { Card, CardContent, CardHeader, CardTitle } from
                "@/components/ui/card" import { Button } from "@/components/ui/button" import {
                Progress } from "@/components/ui/progress" import { Calendar } from
                "@/components/ui/calendar" import { Bar, BarChart, ResponsiveContainer, XAxis,
                YAxis, Tooltip as RechartsTooltip, PieChart, Pie, Cell, LineChart, Line } from
                "recharts" import { motion, AnimatePresence } from "framer-motion" import confetti
                from 'canvas-confetti' import { Flame, Brain, Zap, Trophy, TrendingUp, Quote,
                Calendar as CalendarIcon, Info, ChevronLeft, ChevronRight, Clock, PieChart as
                PieChartIcon, Target, Award, Sparkles, BookOpen, Lightbulb } from 'lucide-react'
                import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from
                "@/components/ui/select" import { Tooltip, TooltipContent, TooltipProvider,
                TooltipTrigger } from "@/components/ui/tooltip" import { format, subMonths,
                addMonths, isSameMonth, isSameYear, startOfYear, endOfYear, addDays } from
                'date-fns' import { Tabs, TabsContent, TabsList, TabsTrigger } from
                "@/components/ui/tabs" import { Badge } from "@/components/ui/badge" import {
                Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar" import { Slider
                } from "@/components/ui/slider" // Utility functions const generateActivityData = ()
                => { const startDate = startOfYear(new Date()) const endDate = endOfYear(new Date())
                const days = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 3600 *
                24)) return Array.from({ length: days }, (_, i) => { const date = addDays(startDate,
                i) return { date: format(date, 'yyyy-MM-dd'), count: Math.floor(Math.random() * 10)
                } }) } const weeklyProgress = [ { name: 'Mon', cards: 12 }, { name: 'Tue', cards: 18
                }, { name: 'Wed', cards: 15 }, { name: 'Thu', cards: 25 }, { name: 'Fri', cards: 20
                }, { name: 'Sat', cards: 30 }, { name: 'Sun', cards: 22 }, ] const studyTimeData = [
                { name: 'Morning', value: 30 }, { name: 'Afternoon', value: 45 }, { name: 'Evening',
                value: 25 }, ] const retentionData = [ { day: 1, retention: 95 }, { day: 7,
                retention: 80 }, { day: 30, retention: 70 }, { day: 90, retention: 60 }, ] const
                COLORS = ['#0088FE', '#00C49F', '#FFBB28'] // Component for stat cards const
                StatCard = ({ title, icon: Icon, value, subtext, color, onClick }) => ( <Card
                    className="overflow-hidden">
                    <CardHeader
                        className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">{title}</CardTitle>
                        <Icon className= {`h-4 w-4 text-${color}-500`} aria-hidden="true" />
                    </CardHeader>
                    <CardContent>
                        <div className="flex items-center justify-between">
                            <motion.div
                                className= {`text-3xl font-bold text-${color}-500`}
                                initial= {{ scale: 0 }}
                                animate= {{ scale: 1 }}
                                transition= {{ type: "spring" , stiffness: 260, damping: 20 }}
                            >
                                {value}
                            </motion.div> {onClick && ( <Button
                                size="sm" onClick= {onClick}>
                                +1 (Demo)
                            </Button> )} </div>
                        <p className="text-xs text-muted-foreground">{subtext}</p>
                    </CardContent>
                </Card>
                ) // Daily Challenge component const DailyChallenge = ({ onComplete }) => { const
                [completed, setCompleted] = useState(false) const handleComplete = useCallback(() =>
                { setCompleted(true) onComplete() }, [onComplete]) return ( <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Sparkles className="h-5 w-5 text-yellow-500" /> Daily Challenge </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p className="mb-4">Review 20 cards in under 10 minutes</p> {!completed ? ( <Button
                            onClick= {handleComplete}>Complete Challenge</Button> ) : ( <Badge variant="success">
                Completed</Badge> )} </CardContent>
                </Card> ) } // Learning Path
                Progress component const LearningPathProgress = () => { const [currentLevel,
                setCurrentLevel] = useState(3) const totalLevels = 10 return ( <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <TrendingUp className="h-5 w-5 text-blue-500" /> Learning Path Progress </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="space-y-2">
                            <div className="flex justify-between">
                                <span>Level {currentLevel}</span>
                                <span>{currentLevel}/{totalLevels}</span>
                            </div>
                            <Progress value= {(currentLevel / totalLevels) * 100} className="w-full" />
                        </div>
                    </CardContent>
                </Card>
                ) } // Study Reminder component const StudyReminder = () => { const [reminderTime,
                setReminderTime] = useState(20) const handleSetReminder = useCallback(() => { //
                Implement reminder logic here alert(`Reminder set for ${reminderTime}:00`) },
                [reminderTime]) return ( <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Clock className="h-5 w-5 text-indigo-500" /> Study Reminder </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="space-y-4">
                            <p>Set a daily reminder to study</p>
                            <div className="flex items-center space-x-2">
                                <Slider
                                    value= {[reminderTime]}
                                    onValueChange= {(value)=> setReminderTime(value[0])}
                                max={23}
                                step={1}
                                />
                                <span>{reminderTime}:00</span>
                            </div>
                            <Button onClick= {handleSetReminder}>Set Reminder</Button>
                        </div>
                    </CardContent>
                </Card>
                ) } // Main UserDashboard component export default function UserDashboard() { const
                [progress, setProgress] = useState(0) const [streakDays, setStreakDays] =
                useState(0) const [heatmapView, setHeatmapView] = useState('month') const
                [currentMonth, setCurrentMonth] = useState(new Date()) const [activeTab,
                setActiveTab] = useState('progress') const [showAchievement, setShowAchievement] =
                useState(false) const [xp, setXp] = useState(0) const userName = "Alice" // Replace
                with actual user name const activityData = useMemo(() => generateActivityData(), [])
                useEffect(() => { const timer = setTimeout(() => setProgress(78), 500) return () =>
                clearTimeout(timer) }, []) useEffect(() => { setStreakDays(5) if (streakDays === 5)
                { confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } })
                setShowAchievement(true) } }, [streakDays]) const getHeatmapData = useCallback(() =>
                { const today = new Date() const oneYearAgo = new Date(today.getFullYear() - 1,
                today.getMonth(), today.getDate()) return activityData.filter(d => { const date =
                new Date(d.date) return date >= oneYearAgo && date <= today &&
                (heatmapView === 'year' || (heatmapView === 'month' && isSameMonth(date, currentMonth) && isSameYear(date, currentMonth)))
        })
    }, [activityData, heatmapView, currentMonth])

    const handlePrevMonth = useCallback(() => { setCurrentMonth(prevMonth =>
                subMonths(prevMonth, 1)) }, []) const handleNextMonth = useCallback(() => {
                setCurrentMonth(prevMonth => addMonths(prevMonth, 1)) }, []) const
                handleStreakIncrement = useCallback(() => { setStreakDays(s => s + 1) }, []) const
                handleChallengeComplete = useCallback(() => { setXp(prevXp => prevXp + 50)
                confetti({ particleCount: 50, spread: 60, origin: { y: 0.8 } }) }, []) const
                renderHeaderSection = () => ( <motion.div
                    className="flex items-center justify-between"
                    initial= {{ opacity: 0, y: -20 }}
                    animate= {{ opacity: 1, y: 0 }}
                    transition= {{ duration: 0.5 }}
                >
                    <h1 className="text-3xl font-bold flex items-center gap-2">
                        <Brain className="w-8 h-8 text-primary" aria-hidden="true" /> Welcome back,
                {userName}! </h1>
                    <div className="flex items-center gap-4">
                        <Badge variant="outline" className="px-3 py-1">
                            <Target className="w-4 h-4 mr-2" /> Level 5 Learner </Badge>
                        <Badge variant="secondary" className="px-3 py-1">
                            <Sparkles className="w-4 h-4 mr-2" /> {xp} XP </Badge>
                        <Avatar>
                            <AvatarImage src="/placeholder.svg?height=40&width=40" alt= {userName} />
                            <AvatarFallback>{userName.charAt(0)}</AvatarFallback>
                        </Avatar>
                    </div>
                </motion.div>
                ) const renderAchievementNotification = () => ( <AnimatePresence> {showAchievement
                && ( <motion.div
                        initial= {{ opacity: 0, y: -50 }}
                        animate= {{ opacity: 1, y: 0 }}
                        exit= {{ opacity: 0, y: -50 }}
                        className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded"
                        role="alert"
                    >
                        <div className="flex items-center">
                            <Award className="h-6 w-6 mr-2" />
                            <p className="font-bold">Achievement Unlocked: 5-Day Streak!</p>
                        </div>
                        <p className="text-sm">Keep up the great work! You're on fire!</p>
                        <button
                            onClick= {()=> setShowAchievement(false)}
                            className="absolute top-0 right-0 mt-2 mr-2 text-green-700
                hover:text-green-900"
                            >
                            &times;
                        </button>
                    </motion.div>
                )} </AnimatePresence> ) const renderStatCards = () => ( <motion.div
                    className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4"
                    initial= {{ opacity: 0 }}
                    animate= {{ opacity: 1 }}
                    transition= {{ duration: 0.5, delay: 0.2 }}
                >
                    <Card>
                        <CardHeader
                            className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Weekly Goal</CardTitle>
                            <Trophy className="h-4 w-4 text-muted-foreground" aria-hidden="true" />
                        </CardHeader>
                        <CardContent>
                            <div className="space-y-2">
                                <Progress value= {progress} className="w-full" />
                                <div className="flex items-center justify-between">
                                    <p className="text-2xl font-bold">{progress}%</p>
                                    <p className="text-xs text-muted-foreground">78 of 100 cards</p>
                                </div>
                            </div>
                        </CardContent>
                    </Card>

                    <StatCard
                        title="Streak"
                        icon= {Flame}
                        value= {`${streakDays} days`}
                        color="orange"
                        onClick= {handleStreakIncrement}
                    />

                    <StatCard
                        title="Cards Created"
                        icon= {Brain}
                        value="142"
                        subtext="total cards"
                        color="purple"
                    />

                    <StatCard
                        title="Learning Speed"
                        icon= {Zap}
                        value="Fast"
                        subtext="10 cards/day avg"
                        color="yellow"
                    />
                </motion.div> ) const renderLearningAnalytics
                = () => ( <Card className="md:col-span-2">
                    <CardHeader>
                        <CardTitle>Learning Analytics</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <Tabs value= {activeTab} onValueChange= {setActiveTab}>
                            <TabsList>
                                <TabsTrigger value="progress">Weekly Progress</TabsTrigger>
                                <TabsTrigger value="time">Study Time</TabsTrigger>
                                <TabsTrigger value="retention">Retention</TabsTrigger>
                            </TabsList>
                            <TabsContent value="progress">
                                <div className="h-[300px]">
                                    <ResponsiveContainer width="100%" height="100%">
                                        <BarChart data= {weeklyProgress}>
                                            <XAxis dataKey="name" />
                                            <YAxis />
                                            <RechartsTooltip />
                                            <Bar
                                                dataKey="cards"
                                                fill="#3b82f6"
                                                radius= {[4, 4, 0, 0]}
                                                label= {{ position: 'top' , fill: '#6b7280' , fontSize: 12 }}
                                            />
                                        </BarChart>
                                    </ResponsiveContainer>
                                </div>
                            </TabsContent>
                            <TabsContent value="time">
                                <div className="h-[300px]">
                                    <ResponsiveContainer width="100%" height="100%">
                                        <PieChart>
                                            <Pie
                                                data= {studyTimeData}
                                                cx="50%"
                                                cy="50%"
                                                labelLine= {false}
                                                outerRadius= {80}
                                                fill="#8884d8"
                                                dataKey="value"
                                                label= {({ name, percent })=> `${name} ${(percent *
                100).toFixed(0)}%`} > {studyTimeData.map((entry, index) => ( <Cell key= {`cell-${index}`} fill= {COLORS[index % COLORS.length]} />
                ))} </Pie>
                                            <RechartsTooltip />
                                        </PieChart>
                                    </ResponsiveContainer>
                                </div>
                            </TabsContent>
                            <TabsContent value="retention">
                                <div className="h-[300px]">
                                    <ResponsiveContainer width="100%" height="100%">
                                        <LineChart data= {retentionData}>
                                            <XAxis dataKey="day" />
                                            <YAxis />
                                            <RechartsTooltip />
                                            <Line type="monotone" dataKey="retention"
                                                stroke="#8884d8" />
                                        </LineChart>
                                    </ResponsiveContainer>
                                </div>
                            </TabsContent>
                        </Tabs>
                    </CardContent>
                </Card>
                ) const renderActivityHeatmap = () => ( <Card className="md:col-span-2">
                    <CardHeader>
                        <div className="flex items-center justify-between">
                            <CardTitle className="flex items-center gap-2">
                                <CalendarIcon className="h-4 w-4" aria-hidden="true" /> Activity
                Heatmap </CardTitle>
                            <div className="flex items-center gap-2">
                                <Select value= {heatmapView} onValueChange= {setHeatmapView}>
                                    <SelectTrigger className="w-[180px]">
                                        <SelectValue placeholder="Select view" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="month">Month View</SelectItem>
                                        <SelectItem value="year">Year View</SelectItem>
                                    </SelectContent>
                                </Select>
                                <TooltipProvider>
                                    <Tooltip>
                                        <TooltipTrigger asChild>
                                            <Button variant="ghost" size="icon"
                                                aria-label="Heatmap Info">
                                                <Info className="h-4 w-4" />
                                            </Button>
                                        </TooltipTrigger>
                                        <TooltipContent>
                                            <p>Colors indicate activity level:</p>
                                            <ul className="list-disc list-inside">
                                                <li>Green: High (8-10 cards)</li>
                                                <li>Yellow: Medium (4-7 cards)</li>
                                                <li>Orange: Low (1-3 cards)</li>
                                            </ul>
                                        </TooltipContent>
                                    </Tooltip>
                                </TooltipProvider>
                            </div>
                        </div>
                    </CardHeader>
                    <CardContent>
                        <div className="h-[240px] overflow-y-auto">
                            <div className="flex items-center justify-between mb-4">
                                <Button onClick= {handlePrevMonth} variant="outline" size="icon"
                                    aria-label="Previous month">
                                    <ChevronLeft className="h-4 w-4" />
                                </Button>
                                <h2 className="text-lg font-semibold">{format(currentMonth, 'MMMM
                yyyy')}</h2>
                                <Button onClick= {handleNextMonth} variant="outline" size="icon"
                                    aria-label="Next month">
                                    <ChevronRight className="h-4 w-4" />
                                </Button>
                            </div>
                            <AnimatePresence mode="wait">
                                <motion.div
                                    key= {currentMonth.toISOString()}
                                    initial= {{ opacity: 0 }}
                                    animate= {{ opacity: 1 }}
                                    exit= {{ opacity: 0 }}
                                    transition= {{ duration: 0.3 }}
                                >
                                    <Calendar
                                        mode="multiple"
                                        selected= {getHeatmapData().map(d=> new Date(d.date))}
                month={currentMonth}
                                    className="rounded-md border"
                                    modifiers={{
                                    high: (date) => {
                                    const activity = activityData.find(d => d.date === format(date,
                'yyyy-MM-dd'))
                                    return activity ? activity.count > 7 : false
                                    },
                                    medium: (date) => {
                                    const activity = activityData.find(d => d.date === format(date,
                'yyyy-MM-dd'))
                                    return activity ? activity.count > 3 && activity.count
                                    <= 7 : false
                                    },
                                    low: (date) => {
                                    const activity = activityData.find(d => d.date === format(date,
                'yyyy-MM-dd'))
                                    return activity ? activity.count > 0 && activity.count
                                    <= 3 : false
                                    },
                                }}
                                modifiersStyles={{
                                    high: { backgroundColor: 'rgba(34, 197, 94, 0.9)' },
                                    medium: { backgroundColor: 'rgba(234, 179, 8, 0.9)' },
                                    low: { backgroundColor: 'rgba(249, 115, 22, 0.9)' },
                                }}
                            />
                                </motion.div>
                            </AnimatePresence>
                        </div>
                    </CardContent>
                </Card>
                ) const renderDailyInspiration = () => ( <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0">
                        <CardTitle className="flex items-center gap-2">
                            <Quote className="h-4 w-4" aria-hidden="true" /> Daily Inspiration </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <motion.p
                            className="text-lg font-semibold text-center"
                            initial= {{ opacity: 0 }}
                            animate= {{ opacity: 1 }}
                            transition= {{ delay: 0.5 }}
                        >
                            "The capacity to learn is a gift; the ability to learn is a skill; the
                willingness to learn is a choice." - Brian Herbert
                        </motion.p>
                    </CardContent>
                </Card>
                ) const renderUpcomingReviews = () => ( <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <BookOpen className="h-5 w-5 text-green-500" /> Upcoming Reviews </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <ul className="space-y-2"> {[...Array(5)].map((_, index) => ( <li key= {index}
                                className="flex items-center justify-between">
                                <span>{format(addDays(new Date(), index + 1), 'MMM dd')}</span>
                                <Badge>{Math.floor(Math.random() * 20) + 5} cards</Badge>
                            </li>
                ))} </ul>
                    </CardContent>
                </Card> ) const
                renderStudyTips = () => ( <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Lightbulb className="h-5 w-5 text-yellow-500" /> Study Tips </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <ul className="list-disc list-inside space-y-2 text-sm">
                            <li>Review cards regularly to reinforce learning</li>
                            <li>Use mnemonics for difficult concepts</li>
                            <li>Take short breaks to improve focus</li>
                            <li>Explain concepts to others to solidify understanding</li>
                        </ul>
                    </CardContent>
                </Card>
                ) return ( <div className="container mx-auto p-4 space-y-6"> {renderHeaderSection()}
                {renderAchievementNotification()} {renderStatCards()} <motion.div
                        className="grid gap-4 md:grid-cols-3"
                        initial= {{ opacity: 0 }}
                        animate= {{ opacity: 1 }}
                        transition= {{ duration: 0.5, delay: 0.4 }}
                    > {renderLearningAnalytics()} <div className="space-y-4">
                            <DailyChallenge onComplete= {handleChallengeComplete} />
                            <LearningPathProgress />
                            <StudyReminder />
                        </div>
                {renderDailyInspiration()} {renderUpcomingReviews()} {renderStudyTips()}
                {renderActivityHeatmap()} </motion.div>
                </div> ) }             </document_content>
        </document>
        <document index="51">
            <source>app/hooks/useDarkMode.ts</source>
            <document_content>
                "use client";
                import { useState, useEffect } from "react";

                export function useDarkMode() {
                const [theme, setTheme] = useState("light");

                useEffect(() => {
                const savedTheme = localStorage.getItem("theme");
                if (savedTheme) {
                setTheme(savedTheme);
                document.documentElement.classList.add(savedTheme);
                } else {
                const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
                const defaultTheme = prefersDark ? "dark" : "light";
                setTheme(defaultTheme);
                document.documentElement.classList.add(defaultTheme);
                }
                }, []);

                const toggleTheme = () => {
                const newTheme = theme === "light" ? "dark" : "light";
                document.documentElement.classList.remove(theme);
                document.documentElement.classList.add(newTheme);
                setTheme(newTheme);
                localStorage.setItem("theme", newTheme);
                };

                return { theme, toggleTheme };
                }

            </document_content>
        </document>
        <document index="52">
            <source>app/practice/page.tsx</source>
            <document_content> 'use client' import React, { useState, useCallback, useEffect } from
                'react' import { X, MoreVertical, Eye, EyeOff, Shuffle } from 'lucide-react' import
                { Volume2 } from 'lucide-react' import { Button } from "@/components/ui/button"
                import { Checkbox } from "@/components/ui/checkbox" import { Label } from
                "@/components/ui/label" import { Switch } from "@/components/ui/switch" import {
                Input } from "@/components/ui/input" import { Dialog, DialogContent, DialogHeader,
                DialogTitle, DialogTrigger, } from "@/components/ui/dialog" type Flashcard = { id:
                number word: string translation: string example: string notes: string category:
                string } type ExerciseType = 'Classic' | 'MultipleChoice' | 'FillInTheBlank' |
                'Audio' | 'Matching' const exerciseTypes: ExerciseType[] = ['Classic',
                'MultipleChoice', 'FillInTheBlank', 'Audio', 'Matching'] const initialFlashcards:
                Flashcard[] = [ { id: 1, word: 'Impetus', translation: 'động lực', example: 'The new
                policy provided the <b>impetus</b> for change.', notes: 'A force that causes
                something to happen or move forward.', category: 'Academic' }, { id: 2, word:
                'Meticulously', translation: 'tỉ mỉ', example: 'She <b>meticulously</b> checked
                every detail of the report.', notes: 'Done with extreme care and precision.',
                category: 'Academic' }, { id: 3, word: 'Testament', translation: 'di chúc, di sản',
                example: 'His success is a <b>testament</b> to his hard work.', notes: 'Something
                that serves as evidence or proof.', category: 'Academic' } ] export default function
                Component() { const [flashcards, setFlashcards] = useState<Flashcard []>(initialFlashcards)
                const [selectedExercises, setSelectedExercises] = useState<ExerciseType []>(['Classic'])
                const [isSessionStarted, setIsSessionStarted] = useState(false) const
                [currentFlashcardIndex, setCurrentFlashcardIndex] = useState(0) const [showInfo,
                setShowInfo] = useState(false) const [showTranslation, setShowTranslation] =
                useState(false) const [isShuffled, setIsShuffled] = useState(false) const [progress,
                setProgress] = useState(0) const [showAnswerButtons, setShowAnswerButtons] =
                useState(false) const [matchingPairs, setMatchingPairs] = useState<{ word: string; translation: string }[]>([]) const
                [selectedPair, setSelectedPair] = useState<string []>([]) const [matchedPairs,
                setMatchedPairs] = useState<string []>([]) const [multipleChoiceOptions,
                setMultipleChoiceOptions] = useState<string []>([]) const [selectedAnswer,
                setSelectedAnswer] = useState<string | null>(null) const [fillInTheBlankAnswer,
                setFillInTheBlankAnswer] = useState('') const [fillInTheBlankFeedback,
                setFillInTheBlankFeedback] = useState<string | null>(null) const handleExerciseToggle =
                (exerciseType: ExerciseType) => { setSelectedExercises(prev =>
                prev.includes(exerciseType) ? prev.filter(type => type !== exerciseType) : [...prev,
                exerciseType] ) } const handleAnswer = (correct: boolean) => { setProgress(prev =>
                Math.min(prev + (100 / flashcards.length), 100)) setCurrentFlashcardIndex(prev =>
                (prev + 1) % flashcards.length) setShowTranslation(false)
                setShowAnswerButtons(false) setSelectedAnswer(null) setFillInTheBlankAnswer('')
                setFillInTheBlankFeedback(null) if (selectedExercises.includes('MultipleChoice')) {
                generateMultipleChoiceOptions() } } const startSession = useCallback(() => {
                setIsSessionStarted(true) setProgress(0) setCurrentFlashcardIndex(0) if (isShuffled)
                { setFlashcards(prevCards => [...prevCards].sort(() => Math.random() - 0.5)) } if
                (selectedExercises.includes('Matching')) { const pairs = flashcards.map(card => ({
                word: card.word, translation: card.translation })) setMatchingPairs(pairs.sort(() =>
                Math.random() - 0.5)) } if (selectedExercises.includes('MultipleChoice')) {
                generateMultipleChoiceOptions() } setMatchedPairs([]) }, [isShuffled, flashcards,
                selectedExercises]) const endSession = () => { setIsSessionStarted(false)
                setProgress(0) } const toggleShuffle = () => { setIsShuffled(prev => !prev) } const
                speakWord = (word: string) => { const utterance = new SpeechSynthesisUtterance(word)
                window.speechSynthesis.speak(utterance) } const navigateFlashcard = (direction:
                'prev' | 'next') => { setCurrentFlashcardIndex(prev => { if (direction === 'prev') {
                return prev === 0 ? flashcards.length - 1 : prev - 1 } else { return (prev + 1) %
                flashcards.length } }) setShowTranslation(false) setShowAnswerButtons(false)
                setSelectedAnswer(null) setFillInTheBlankAnswer('') setFillInTheBlankFeedback(null)
                if (selectedExercises.includes('MultipleChoice')) { generateMultipleChoiceOptions()
                } } const handlePairSelection = (item: string) => { setSelectedPair(prev => { if
                (prev.length === 0) return [item] if (prev.length === 1) { const pair =
                matchingPairs.find(p => p.word === prev[0] || p.translation === prev[0]) if (pair &&
                (pair.word === item || pair.translation === item)) { setMatchingPairs(prevPairs =>
                prevPairs.filter(p => p !== pair)) setMatchedPairs(prevMatched => [...prevMatched,
                pair.word, pair.translation]) return [] } return [] } return [item] }) } const
                generateMultipleChoiceOptions = () => { const currentFlashcard =
                flashcards[currentFlashcardIndex] const otherTranslations = flashcards .filter(card
                => card.id !== currentFlashcard.id) .map(card => card.translation) const options =
                [currentFlashcard.translation, ...otherTranslations.slice(0, 3)]
                setMultipleChoiceOptions(options.sort(() => Math.random() - 0.5)) } const
                handleFillInTheBlankSubmit = () => { const currentFlashcard =
                flashcards[currentFlashcardIndex] if (fillInTheBlankAnswer.toLowerCase() ===
                currentFlashcard.word.toLowerCase()) { setFillInTheBlankFeedback('Correct!') } else
                { setFillInTheBlankFeedback(`Incorrect. The correct answer is
                "${currentFlashcard.word}".`) } } useEffect(() => { if (matchingPairs.length === 0
                && isSessionStarted) { setProgress(100) } }, [matchingPairs, isSessionStarted])
                const renderSetupSession = () => ( <div
                    className="bg-white rounded-lg shadow-lg p-8">
                    <h2 className="text-3xl font-bold mb-6 text-blue-800">Choose Exercise Types</h2>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-6 mb-8">
                {exerciseTypes.map((type) => ( <div key= {type} className="flex items-center space-x-3">
                            <Checkbox
                                id= {type}
                                checked= {selectedExercises.includes(type)}
                                onCheckedChange= {()=> handleExerciseToggle(type)}
                            />
                            <Label htmlFor= {type} className="text-lg text-gray-700">{type}</Label>
                        </div> ))} </div>
                    <div className="flex items-center justify-between mb-8">
                        <div className="flex items-center space-x-3">
                            <Switch
                                id="shuffle"
                                checked= {isShuffled}
                                onCheckedChange= {setIsShuffled}
                            />
                            <Label htmlFor="shuffle" className="text-lg text-gray-700">Shuffle Cards</Label>
                        </div>
                    </div>
                    <Button
                        onClick= {startSession}
                        className="w-full py-4 bg-blue-600 text-white text-xl font-semibold rounded-lg hover:bg-blue-700 transition-colors shadow-md"
                        disabled= {flashcards.length=== 0 || selectedExercises.length === 0}
            >
                Start Session
            </Button>
                </div> ) const
                renderExercise = () => { if (flashcards.length === 0) { return <div
                    className="text-center text-gray-600">No flashcards available.</div> } if
                (selectedExercises.includes('Matching') && matchingPairs.length > 0) { return ( <div
                    className="space-y-6">
                    <h2 className="text-3xl font-bold text-center text-blue-800">Matching Exercise</h2>
                    <div className="grid grid-cols-2 gap-4"> {['word', 'translation'].map((type) =>
                ( <div key= {type} className="space-y-4"> {matchingPairs.map((pair, index) => ( <button
                                key= {`${type}-${index}`}
                                onClick= {()=> handlePairSelection(pair[type as keyof typeof
                pair])}
                                className={`w-full p-4 text-lg rounded-lg transition-colors
                ${selectedPair.includes(pair[type as keyof typeof pair])
                                ? 'bg-blue-500 text-white'
                                : 'bg-white hover:bg-blue-100'
                                } ${matchedPairs.includes(pair[type as keyof typeof pair])
                                ? 'bg-green-500 text-white'
                                : ''
                                } shadow-md`}
                                disabled={matchedPairs.includes(pair[type as keyof typeof pair])}
                                >
                                {pair[type as keyof typeof pair]}
                            </button>
                ))} </div> ))} </div>
                </div> ) } const currentFlashcard =
                flashcards[currentFlashcardIndex] return ( <div className="space-y-8">
                    <div className="text-center">
                        <h2 className="text-4xl mb-4 flex items-center justify-center">
                            <button
                                className="text-blue-600 mr-4 hover:text-blue-800 transition-colors"
                                onClick= {()=> speakWord(currentFlashcard.word)} > <Volume2
                                    size= {32} />
                            </button>
                            <span className="font-bold text-blue-900">
                {selectedExercises.includes('FillInTheBlank') ? '________' : currentFlashcard.word}
                            </span>
                        </h2>
                {showTranslation && ( <p className="text-xl text-emerald-600 italic mt-2">
                {currentFlashcard.translation}</p> )} </div>
                <div
                        dangerouslySetInnerHTML= {{ __html: currentFlashcard.example }}
                        className="text-lg text-gray-700 bg-white p-6 rounded-lg shadow-md"
                    />
                {selectedExercises.includes('FillInTheBlank') ? ( <div className="space-y-4">
                        <div className="flex justify-center space-x-4">
                            <input
                                value= {fillInTheBlankAnswer}
                                onChange= {(e)=> setFillInTheBlankAnswer(e.target.value)}
                placeholder="Type your answer"
                            className="max-w-xs p-3 text-lg border-2 border-blue-300 rounded-md
                focus:outline-none focus:border-blue-500"
                            />
                            <Button onClick= {handleFillInTheBlankSubmit} className="text-lg">Submit</Button>
                        </div>
                {fillInTheBlankFeedback && ( <p className= {`text-xl text-center ${fillInTheBlankFeedback.startsWith('Correct' ) ? 'text-green-500' : 'text-red-500'}`}>
                                {fillInTheBlankFeedback}
                            </p> )} </div> ) :
                selectedExercises.includes('MultipleChoice') ? ( <div className="space-y-4">
                {multipleChoiceOptions.map((option, index) => ( <button
                            key= {index}
                            onClick= {()=> setSelectedAnswer(option)}
                            className={`w-full p-4 text-lg rounded-lg transition-colors
                ${selectedAnswer !== null
                            ? option === currentFlashcard.translation
                            ? 'bg-green-500 text-white'
                            : selectedAnswer === option
                            ? 'bg-red-500 text-white'
                            : 'bg-white'
                            : 'bg-white hover:bg-blue-100'
                            } shadow-md`}
                            disabled={selectedAnswer !== null}
                            >
                            {option}
                        </button>
                ))} </div> ) : ( <div className="flex justify-center"> {!showTranslation && ( <Button
                            onClick= {()=> {
                            setShowTranslation(true)
                            setShowAnswerButtons(true)
                            }}
                            className="w-full max-w-md p-4 text-xl bg-blue-600 text-white
                font-semibold rounded-lg hover:bg-blue-700 transition-colors"
                            >
                            Show Translation
                        </Button>
                )} </div> )} {showInfo && ( <div
                        className="bg-white rounded-lg p-6 shadow-lg text-blue-800 text-lg">
                {currentFlashcard.notes}
                    </div> )} </div>
                ) } return ( <div
                    className="flex flex-col h-screen bg-gradient-to-br from-blue-100 to-sky-200 font-sans text-gray-900">
                {isSessionStarted ? ( <>
                        <header className="border-b-2 border-blue-300 p-6">
                            <div className="max-w-4xl mx-auto flex items-center justify-between">
                                <button
                                    className="text-blue-700 hover:text-blue-900 transition-colors"
                                    onClick= {endSession}>
                                    <X size= {28} />
                                </button>
                                <div
                                    className="flex-grow mx-6 bg-white h-6 rounded-full shadow-md overflow-hidden">
                                    <div
                                        className="bg-blue-600 h-full rounded-full transition-all duration-500 ease-in-out"
                                        style= {{ width: `${progress}%` }}></div>
                                </div>
                                <Dialog>
                                    <DialogTrigger asChild>
                                        <button
                                            className="text-blue-700 hover:text-blue-900 transition-colors">
                                            <MoreVertical size= {28} />
                                        </button>
                                    </DialogTrigger>
                                    <DialogContent>
                                        <DialogHeader>
                                            <DialogTitle>Session Settings</DialogTitle>
                                        </DialogHeader>
                                        <div className="space-y-4">
                                            <div className="flex items-center space-x-2">
                                                <Switch
                                                    id="shuffle"
                                                    checked= {isShuffled}
                                                    onCheckedChange= {setIsShuffled}
                                                />
                                                <Label htmlFor="shuffle">Shuffle Cards</Label>
                                            </div>
                                        </div>
                                    </DialogContent>
                                </Dialog>
                            </div>
                        </header>
                        <main className="flex-grow overflow-y-auto py-8">
                            <div className="max-w-4xl mx-auto px-6">
                                <h3 className="text-blue-800 mb-8 uppercase text-lg font-semibold">Practice
                Session</h3> {renderExercise()} </div>
                        </main>
                        <footer className="border-t-2 border-blue-300 p-6">
                            <div
                                className="max-w-4xl mx-auto flex justify-between items-center space-x-6">
                                <button
                                    className="p-3 border-2 border-blue-400 rounded-full hover:bg-blue-200 transition-colors text-blue-800"
                                    onClick= {()=> setShowInfo(!showInfo)} > {showInfo ? <EyeOff
                                        size= {24} /> : <Eye size= {24} />} </button>
                                <button
                                    className="p-3 border-2 border-blue-400 rounded-full hover:bg-blue-200 transition-colors text-blue-800"
                                    onClick= {toggleShuffle}
                                >
                                    <Shuffle size= {24} />
                                </button>
                                <button
                                    className="flex-grow py-3 px-6 bg-blue-600 text-white text-xl font-semibold rounded-lg hover:bg-blue-700 transition-colors shadow-md"
                                    onClick= {()=> navigateFlashcard('next')}
                                    >
                                    Continue
                                </button>
                            </div>
                        </footer>
                    </>
                ) : ( <main className="flex-grow flex items-center justify-center p-6">
                        <div className="w-full max-w-2xl">
                            {renderSetupSession()}
                        </div>
                    </main>
                )} </div> ) }             </document_content>
        </document>
        <document index="53">
            <source>app/manager/constants.ts</source>
            <document_content>
                export const initialFlashcards = [
                { id: 1, word: 'Bonjour', translation: 'Hello', category: 'Greetings', status:
                'Learning', notes: 'Used as a greeting during the day', lastReviewed: '2023-06-01'
                },
                { id: 6, word: 'Trois', translation: 'Three', category: 'Numbers', status:
                'Mastered', notes: 'Third cardinal number', lastReviewed: '2023-06-04' },
                ]

                export const STATUSES = ['All', 'New', 'Learning', 'Mastered']
                export const FONT_SIZES = ['small', 'medium', 'large']
</document_content>
        </document>
        <document index="54">
            <source>app/manager/page.tsx</source>
            <document_content> 'use client' import { useState, useEffect, useRef } from 'react'
                import { Button } from "@/components/ui/button" import { Input } from
                "@/components/ui/input" import { Select, SelectTrigger, SelectValue, SelectContent,
                SelectItem } from "@/components/ui/select" import { Card, CardContent } from
                "@/components/ui/card" import { Progress } from "@/components/ui/progress" import {
                Switch } from "@/components/ui/switch" import { Tabs, TabsList, TabsTrigger } from
                "@/components/ui/tabs" import { Badge } from "@/components/ui/badge" import {
                Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from
                "@/components/ui/dialog" import { Label } from "@/components/ui/label" import {
                Textarea } from "@/components/ui/textarea" import { Checkbox } from
                "@/components/ui/checkbox" import { Search, Plus, Edit2, Trash2, Star, Volume2,
                Settings, Download, Upload, Filter } from 'lucide-react' import { useToast } from
                "@/components/ui/use-toast" import { initialFlashcards, STATUSES, FONT_SIZES } from
                './constants' import { addCategory, toggleCategory, changeCardCategory, deleteCard,
                updateCardStatus, saveCard, exportToCSV, importFromCSV, pronounceWord,
                toggleCardSelection, handleBulkAction, selectAllCards } from './utils' export
                default function FlashcardManager() { const [flashcards, setFlashcards] =
                useState(initialFlashcards) const [searchTerm, setSearchTerm] = useState('') const
                [selectedCategories, setSelectedCategories] = useState(['All']) const
                [selectedStatus, setSelectedStatus] = useState('All') const [viewMode, setViewMode]
                = useState('grid') const [newCategory, setNewCategory] = useState('') const
                [darkMode, setDarkMode] = useState(false) const [editingCard, setEditingCard] =
                useState(null) const [isAddingCard, setIsAddingCard] = useState(false) const
                [isSettingsOpen, setIsSettingsOpen] = useState(false) const [fontSize, setFontSize]
                = useState('medium') const [reviewInterval, setReviewInterval] = useState(7) const
                [selectedCards, setSelectedCards] = useState([]) const [isFilterOpen,
                setIsFilterOpen] = useState(false) const { toast } = useToast() const fileInputRef =
                useRef(null) const categories = ['All', ...new Set(flashcards.map(card =>
                card.category))] const filteredFlashcards = flashcards.filter(card =>
                card.word.toLowerCase().includes(searchTerm.toLowerCase()) &&
                (selectedCategories.includes('All') || selectedCategories.includes(card.category))
                && (selectedStatus === 'All' || card.status === selectedStatus) ) const stats = {
                total: flashcards.length, new: flashcards.filter(card => card.status ===
                'New').length, learning: flashcards.filter(card => card.status ===
                'Learning').length, mastered: flashcards.filter(card => card.status ===
                'Mastered').length, } useEffect(() => { document.body.classList.toggle('dark',
                darkMode) }, [darkMode]) return ( <div className= {`flex h-screen ${darkMode ? 'dark bg-gray-900 text-white' : 'bg-gray-100'}`}>
            {/* Main Content */}
            <div
                        className="flex-1 p-8 overflow-auto">
                        <h1 className="text-3xl font-bold mb-6">Flashcard Manager</h1> {/*
                Navigation and Filtering */} <div className="flex items-center space-x-4 mb-6">
                            <div className="relative flex-1">
                                <Input
                                    type="text"
                                    placeholder="Search flashcards..."
                                    value= {searchTerm}
                                    onChange= {(e)=> setSearchTerm(e.target.value)}
                className={`pl-10 ${darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}`}
                                />
                                <Search
                                    className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
                                    size= {20} />
                            </div>
                            <Select value= {selectedStatus} onValueChange= {setSelectedStatus}>
                                <SelectTrigger className= {`w-[180px] ${darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}`}>
                                    <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                                <SelectContent className= {darkMode ? 'bg-gray-800 text-white border-gray-700' : ''}>
                            {STATUSES.map(status => (
                                <SelectItem key= {status} value= {status}>{status}</SelectItem>
                ))} </SelectContent>
                            </Select>
                            <Button variant="outline" size="icon" onClick= {()=>
                exportToCSV(flashcards)} className={darkMode ? 'bg-gray-800 text-white
                border-gray-700' : ''}> <Download size= {20} />
                            </Button>
                            <Button variant="outline" size="icon" onClick= {()=>
                fileInputRef.current.click()} className={darkMode ? 'bg-gray-800 text-white
                border-gray-700' : ''}> <Upload size= {20} />
                            </Button>
                            <input
                                type="file"
                                ref= {fileInputRef}
                                onChange= {(e)=> importFromCSV(e, setFlashcards)}
                            style={{ display: 'none' }}
                            accept=".csv"
                            />
                            <Button variant="outline" size="icon" onClick= {()=>
                setIsSettingsOpen(true)} className={darkMode ? 'bg-gray-800 text-white
                border-gray-700' : ''}> <Settings size= {20} />
                            </Button>
                            <Button variant="outline" size="icon" onClick= {()=>
                setIsFilterOpen(true)} className={darkMode ? 'bg-gray-800 text-white
                border-gray-700' : ''}> <Filter size= {20} />
                            </Button>
                        </div> {/* Bulk Actions
                */} <div className="mb-4 flex items-center space-x-2">
                            <Checkbox
                                checked= {selectedCards.length=== filteredFlashcards.length}
                        onCheckedChange={() => selectAllCards(filteredFlashcards, selectedCards, setSelectedCards)}
                        className={darkMode ? 'border-gray-600' : ''}
                    />
                            <span>Select All</span>
                            {selectedCards.length > 0 && (
                            <>
                                <span>{selectedCards.length} cards selected</span>
                                <Button onClick= {()=> handleBulkAction('delete', selectedCards,
                flashcards, setFlashcards, setSelectedCards)} variant="destructive">Delete Selected</Button>
                                <Button onClick= {()=> handleBulkAction('export', selectedCards,
                flashcards, setFlashcards, setSelectedCards)}>Export Selected</Button>
                            </>
                )}
                        </div>
                {/* Flashcard Display */} <Tabs value= {viewMode} onValueChange= {setViewMode} className="mb-6">
                            <TabsList className= {darkMode ? 'bg-gray-800' : ''}>
                                <TabsTrigger value="grid" className= {darkMode ? 'data-[state=active]:bg-gray-700' : ''}>Grid View</TabsTrigger>
                                <TabsTrigger value="list" className= {darkMode ? 'data-[state=active]:bg-gray-700' : ''}>List View</TabsTrigger>
                            </TabsList>
                        </Tabs>

                <div
                            className= {`grid gap-4 ${viewMode=== 'grid' ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' : 'grid-cols-1'}`}>
                    {filteredFlashcards.map((card) => (
                        <Card key= {card.id} className= {`flex flex-col ${darkMode ? 'bg-gray-800 border-gray-700' : ''} ${selectedCards.includes(card.id) ? 'ring-2 ring-primary' : ''}`}>
                                <CardContent className="flex-1 p-4">
                                    <div className="flex justify-between items-start mb-2">
                                        <div className="flex items-center">
                                            <Checkbox
                                                checked= {selectedCards.includes(card.id)}
                                                onCheckedChange= {()=>
                toggleCardSelection(card.id, selectedCards, setSelectedCards)}
                                            className={`mr-2 ${darkMode ? 'border-gray-600' : ''}`}
                />
                                            <h3 className= {`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>{card.word}</h3>
                                        </div>
                                        <div className="flex space-x-1">
                                            <Button variant="ghost" size="icon">
                                                <Star size= {16} className= {darkMode ? 'text-yellow-400' : 'text-yellow-500'} />
                                            </Button>
                                            <Button variant="ghost" size="icon" onClick= {()=>
                pronounceWord(card.word)}> <Volume2 size= {16} className= {darkMode ? 'text-blue-400' : 'text-blue-500'} />
                                            </Button>
                                        </div>
                                    </div>
                                    <p className= {`${darkMode ? 'text-gray-300' : 'text-gray-600'} mb-2`}>{card.translation}</p>
                                    <p className= {`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-2`}>Category: {card.category}</p>
                                    <p className= {`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-2`}>Last Reviewed: {card.lastReviewed || 'Never'}</p>
                                    <div className="flex justify-between items-center">
                                        <Select value= {card.status} onValueChange= {(value)=>
                updateCardStatus(card.id, value, setFlashcards)}> <SelectTrigger className= {`w-[120px] ${darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}`}>
                                                <SelectValue placeholder="Status" />
                                            </SelectTrigger>
                                        <SelectContent
                                                className= {darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
                                            {STATUSES.filter(status => status !== 'All').map(status => (
                                                <SelectItem key= {status} value= {status}>{status}</SelectItem>
                ))} </SelectContent>
                                        </Select>
                                        <div className="flex space-x-1">
                                            <Button variant="ghost" size="icon" onClick= {()=>
                setEditingCard(card)}> <Edit2 size= {16} className= {darkMode ? 'text-gray-300' : 'text-gray-600'} />
                                            </Button>
                                            <Button variant="ghost" size="icon" onClick= {()=>
                deleteCard(card.id, setFlashcards)}> <Trash2 size= {16} className= {darkMode ? 'text-red-400' : 'text-red-500'} />
                                            </Button>
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                ))} </div> {/* Add New Flashcard Button */} <Button className= {`fixed bottom-8 right-8 rounded-full shadow-lg ${darkMode ? 'bg-blue-600 hover:bg-blue-700' : ''}`} onClick={() => setIsAddingCard(true)}>
                    <Plus size= {24}
                                className="mr-2" /> Add New Flashcard </Button>
                    </div>
                {/* Right Sidebar */} <div className= {`w-80 ${darkMode ? 'bg-gray-800 border-l border-gray-700' : 'bg-white'} p-4 shadow-md overflow-y-auto`}>
                        <h2 className="text-xl font-bold mb-4">Deck Statistics</h2>
                        <div className="grid grid-cols-2 gap-4 mb-6">
                            <div className= {`${darkMode ? 'bg-gray-700' : 'bg-gray-100'} p-3 rounded`}>
                                <p className= {`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Total Cards</p>
                                <p className="text-2xl font-bold">{stats.total}</p>
                            </div>
                            <div className= {`${darkMode ? 'bg-blue-900' : 'bg-blue-100'} p-3 rounded`}>
                                <p className= {`text-sm ${darkMode ? 'text-blue-300' : 'text-blue-600'}`}>New</p>
                                <p className="text-2xl font-bold">{stats.new}</p>
                            </div>
                            <div className= {`${darkMode ? 'bg-yellow-900' : 'bg-yellow-100'} p-3 rounded`}>
                                <p className= {`text-sm ${darkMode ? 'text-yellow-300' : 'text-yellow-600'}`}>Learning</p>
                                <p className="text-2xl font-bold">{stats.learning}</p>
                            </div>
                            <div className= {`${darkMode ? 'bg-green-900' : 'bg-green-100'} p-3 rounded`}>
                                <p className= {`text-sm ${darkMode ? 'text-green-300' : 'text-green-600'}`}>Mastered</p>
                                <p className="text-2xl font-bold">{stats.mastered}</p>
                            </div>
                        </div>

                        <h3 className="font-semibold mb-2">Progress</h3>
                        <Progress value= {(stats.mastered / stats.total) * 100} className= {`mb-4 ${darkMode ? 'bg-gray-700' : ''}`} />
                        <p className= {`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'} mb-6`}>{Math.round((stats.mastered / stats.total) * 100)}% of flashcards mastered</p>

                        <h3 className="font-semibold mb-2">Categories</h3>
                        <div className="space-y-2 mb-4"> {categories.map(category => ( <Badge
                                key= {category}
                                variant= {selectedCategories.includes(category) ? "default" : "outline"}
                            className={`cursor-pointer mr-2 mb-2 ${darkMode ? 'hover:bg-gray-700 text-white' : 'hover:bg-gray-100'}`}
                            onClick={() => toggleCategory(category, selectedCategories, setSelectedCategories)}
                        >
                            {category}
                        </Badge> ))} </div>
                        <div className="flex space-x-2">
                            <Input
                                type="text"
                                placeholder="New category"
                                value= {newCategory}
                                onChange= {(e)=> setNewCategory(e.target.value)}
                className={darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}
                            />
                            <Button onClick= {()=> addCategory(newCategory, categories,
                setFlashcards)}>Add</Button>
                        </div>
                    </div> {/* Edit/Add Card
                Dialog */} <Dialog open= {editingCard !== null || isAddingCard} onOpenChange={() => { setEditingCard(null); setIsAddingCard(false); }}>
                        <DialogContent className= {darkMode ? 'bg-gray-800 text-white' : ''}>
                            <DialogHeader>
                                <DialogTitle>{isAddingCard ? 'Add New Flashcard' : 'Edit Flashcard'}</DialogTitle>
                            </DialogHeader>
                            <form onSubmit= {(e)=> { e.preventDefault(); const formData = new
                FormData(e.target); const card = Object.fromEntries(formData.entries());
                saveCard(card, isAddingCard, setFlashcards, setIsAddingCard, setEditingCard); }}> <div
                                    className="grid gap-4 py-4">
                                    <div className="grid grid-cols-4 items-center gap-4">
                                        <Label htmlFor="word" className="text-right">
                                            Word
                                        </Label>
                                        <Input id="word" name="word" defaultValue= {editingCard?.word || ''} className={`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`} />
                                    </div>
                                    <div className="grid grid-cols-4 items-center gap-4">
                                        <Label htmlFor="translation" className="text-right">
                Translation
                                        </Label>
                                        <Input id="translation" name="translation" defaultValue= {editingCard?.translation || ''} className={`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`} />
                                    </div>
                                    <div className="grid grid-cols-4 items-center gap-4">
                                        <Label htmlFor="category" className="text-right">
                                            Category
                                        </Label>
                                        <Select defaultValue= {editingCard?.category || categories[1]} name="category">
                                            <SelectTrigger className= {`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>
                                                <SelectValue placeholder="Select category" />
                                            </SelectTrigger>
                                            <SelectContent className= {darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
                                        {categories.filter(cat => cat !== 'All').map(category => (
                                            <SelectItem key= {category} value= {category}>
                {category}</SelectItem> ))} </SelectContent>
                                        </Select>
                                    </div>
                                    <div className="grid grid-cols-4 items-center gap-4">
                                        <Label htmlFor="status" className="text-right">
                                            Status
                                        </Label>
                                        <Select defaultValue= {editingCard?.status || 'New'} name="status">
                                            <SelectTrigger className= {`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>
                                                <SelectValue placeholder="Select status" />
                                            </SelectTrigger>
                                            <SelectContent className= {darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
                                        {STATUSES.filter(status => status !== 'All').map(status => (
                                            <SelectItem key= {status} value= {status}>
                {status}</SelectItem> ))} </SelectContent>
                                        </Select>
                                    </div>
                                    <div className="grid grid-cols-4 items-center gap-4">
                                        <Label htmlFor="notes" className="text-right">
                                            Notes
                                        </Label>
                                        <Textarea id="notes" name="notes" defaultValue= {editingCard?.notes || ''} className={`col-span-3 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`} />
                                    </div>
                                </div>
                        <DialogTrigger
                                    asChild>
                                    <Button type="submit" className= {darkMode ? 'bg-blue-600 hover:bg-blue-700' : ''}>{isAddingCard ? 'Add Card' : 'Save Changes'}</Button>
                                </DialogTrigger>
                            </form>
                        </DialogContent>
                    </Dialog>
                {/* Settings Dialog */} <Dialog open= {isSettingsOpen} onOpenChange= {setIsSettingsOpen}>
                        <DialogContent className= {darkMode ? 'bg-gray-800 text-white' : ''}>
                            <DialogHeader>
                                <DialogTitle>Settings</DialogTitle>
                            </DialogHeader>
                            <div className="py-4">
                                <div className="flex items-center justify-between mb-4">
                                    <span className="text-sm">Dark Mode</span>
                                    <Switch checked= {darkMode} onCheckedChange= {setDarkMode} />
                                </div>
                                <div className="flex items-center justify-between mb-4">
                                    <span className="text-sm">Font Size</span>
                                    <Select value= {fontSize} onValueChange= {setFontSize}>
                                        <SelectTrigger className= {`w-[120px] ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>
                                            <SelectValue placeholder="Font size" />
                                        </SelectTrigger>
                                        <SelectContent className= {darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
                                    {FONT_SIZES.map(size => (
                                        <SelectItem key= {size} value= {size}>
                {size}</SelectItem> ))} </SelectContent>
                                    </Select>
                                </div>
                                <div className="flex items-center justify-between mb-4">
                                    <span className="text-sm">Review Interval (days)</span>
                                    <Input
                                        type="number"
                                        value= {reviewInterval}
                                        onChange= {(e)=> setReviewInterval(e.target.value)}
                className={`w-20 text-right ${darkMode ? 'bg-gray-700 border-gray-600 text-white' :
                ''}`}
                                    min="1"
                                    max="30"
                                    />
                                </div>
                            </div>
                        </DialogContent>
                    </Dialog>
                {/* Filter Dialog */} <Dialog open= {isFilterOpen} onOpenChange= {setIsFilterOpen}>
                        <DialogContent className= {darkMode ? 'bg-gray-800 text-white' : ''}>
                            <DialogHeader>
                                <DialogTitle>Filter Flashcards</DialogTitle>
                            </DialogHeader>
                            <div className="py-4">
                                <h3 className="font-semibold mb-2">Categories</h3>
                                <div className="space-y-2 mb-4"> {categories.map(category => ( <div
                                        key= {category} className="flex items-center">
                                        <Checkbox
                                            id= {`category-${category}`}
                                            checked= {selectedCategories.includes(category)}
                                            onCheckedChange= {()=> toggleCategory(category,
                selectedCategories, setSelectedCategories)}
                                        className={`mr-2 ${darkMode ? 'border-gray-600' : ''}`}
                                        />
                                        <Label htmlFor= {`category-${category}`}>{category}</Label>
                                    </div>
                ))} </div>
                                <h3 className="font-semibold mb-2">Status</h3>
                                <Select value= {selectedStatus} onValueChange= {setSelectedStatus}>
                                    <SelectTrigger className= {`w-full ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>
                                        <SelectValue placeholder="Select status" />
                                    </SelectTrigger>
                                    <SelectContent className= {darkMode ? 'bg-gray-700 text-white border-gray-600' : ''}>
                                {STATUSES.map(status => (
                                    <SelectItem key= {status} value= {status}>{status}</SelectItem>
                ))} </SelectContent>
                                </Select>
                            </div>
                        </DialogContent>
                    </Dialog>
                </div>
                ) } </document_content>
        </document>
        <document index="55">
            <source>app/manager/utils.ts</source>
            <document_content>
                import { toast } from "@/components/ui/use-toast"

                export const addCategory = (newCategory, categories, setFlashcards) => {
                if (newCategory && !categories.includes(newCategory)) {
                setFlashcards(prev => [...prev, { id: Date.now(), word: '', translation: '',
                category: newCategory, status: 'New', notes: '', lastReviewed: null }])
                toast({
                title: "Category Added",
                description: `New category "${newCategory}" has been added.`,
                })
                }
                }

                export const toggleCategory = (category, selectedCategories, setSelectedCategories)
                => {
                setSelectedCategories(prev => {
                if (category === 'All') {
                return ['All']
                } else {
                const newCategories = prev.includes(category)
                ? prev.filter(c => c !== category)
                : [...prev.filter(c => c !== 'All'), category]
                return newCategories.length === 0 ? ['All'] : newCategories
                }
                })
                }

                export const changeCardCategory = (cardId, newCategory, setFlashcards) => {
                setFlashcards(prev => prev.map(card =>
                card.id === cardId ? { ...card, category: newCategory } : card
                ))
                }

                export const deleteCard = (cardId, setFlashcards) => {
                setFlashcards(prev => prev.filter(card => card.id !== cardId))
                toast({
                title: "Card Deleted",
                description: "The flashcard has been deleted.",
                variant: "destructive",
                })
                }

                export const updateCardStatus = (cardId, newStatus, setFlashcards) => {
                setFlashcards(prev => prev.map(card =>
                card.id === cardId ? { ...card, status: newStatus, lastReviewed: new
                Date().toISOString().split('T')[0] } : card
                ))
                toast({
                title: "Status Updated",
                description: `Card status changed to ${newStatus}.`,
                })
                }

                export const saveCard = (card, isAddingCard, setFlashcards, setIsAddingCard,
                setEditingCard) => {
                if (isAddingCard) {
                setFlashcards(prev => [...prev, { ...card, id: Date.now(), lastReviewed: null }])
                setIsAddingCard(false)
                toast({
                title: "Card Added",
                description: "New flashcard has been added.",
                })
                } else {
                setFlashcards(prev => prev.map(c => c.id === card.id ? card : c))
                setEditingCard(null)
                toast({
                title: "Card Updated",
                description: "Flashcard has been updated.",
                })
                }
                }

                export const exportToCSV = (flashcards) => {
                const csvContent = [
                ['id', 'word', 'translation', 'category', 'status', 'notes', 'lastReviewed'],
                ...flashcards.map(card => [card.id, card.word, card.translation, card.category,
                card.status, card.notes, card.lastReviewed])
                ].map(e => e.join(',')).join('\n')

                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
                const link = document.createElement('a')
                if (link.download !== undefined) {
                const url = URL.createObjectURL(blob)
                link.setAttribute('href', url)
                link.setAttribute('download', 'flashcards.csv')
                link.style.visibility = 'hidden'
                document.body.appendChild(link)
                link.click()
                document.body.removeChild(link)
                }
                }

                export const importFromCSV = (event, setFlashcards) => {
                const file = event.target.files[0]
                if (file) {
                const reader = new FileReader()
                reader.onload = (e) => {
                const content = e.target.result
                const lines = content.split('\n')
                const headers = lines[0].split(',')
                const newFlashcards = lines.slice(1).map(line => {
                const values = line.split(',')
                return headers.reduce((obj, header, index) => {
                obj[header] = values[index]
                return obj
                }, {})
                })
                setFlashcards(newFlashcards)
                toast({
                title: "Import Successful",
                description: `${newFlashcards.length} flashcards have been imported.`,
                })
                }
                reader.readAsText(file)
                }
                }

                export const pronounceWord = (word) => {
                const utterance = new SpeechSynthesisUtterance(word)
                speechSynthesis.speak(utterance)
                }

                export const toggleCardSelection = (cardId, selectedCards, setSelectedCards) => {
                setSelectedCards(prev =>
                prev.includes(cardId) ? prev.filter(id => id !== cardId) : [...prev, cardId]
                )
                }

                export const handleBulkAction = (action, selectedCards, flashcards, setFlashcards,
                setSelectedCards) => {
                switch (action) {
                case 'delete':
                setFlashcards(prev => prev.filter(card => !selectedCards.includes(card.id)))
                toast({
                title: "Bulk Delete",
                description: `${selectedCards.length} cards have been deleted.`,
                variant: "destructive",
                })
                break
                case 'export':
                const selectedFlashcards = flashcards.filter(card =>
                selectedCards.includes(card.id))
                exportToCSV(selectedFlashcards)
                toast({
                title: "Bulk Export",
                description: `${selectedCards.length} cards have been exported.`,
                })
                break
                default:
                break
                }
                setSelectedCards([])
                }

                export const selectAllCards = (filteredFlashcards, selectedCards, setSelectedCards)
                => {
                if (selectedCards.length === filteredFlashcards.length) {
                setSelectedCards([])
                } else {
                setSelectedCards(filteredFlashcards.map(card => card.id))
                }
                }
</document_content>
        </document>
        <document index="56">
            <source>app/slices/fileSlice.ts</source>
            <document_content> import { createSlice, PayloadAction } from '@reduxjs/toolkit';
                interface FileState { currentFile: File | null; recentFiles: Array<{ name: string; progress: number }>; } const
                initialState: FileState = { currentFile: null, recentFiles: [], }; const fileSlice =
                createSlice({ name: 'file', initialState, reducers: { setCurrentFile: (state,
                action: PayloadAction<File | null>) => { state.currentFile = action.payload; },
                addRecentFile: (state, action: PayloadAction<{ name: string; progress: number }>) => { state.recentFiles = [
                action.payload, ...state.recentFiles.filter(f => f.name !==
                action.payload.name).slice(0, 4) ]; }, }, }); export const { setCurrentFile,
                addRecentFile } = fileSlice.actions; export default fileSlice.reducer;             </document_content>
        </document>
        <document index="57">
            <source>app/slices/flashcardsSlice.ts</source>
            <document_content> import { createSlice, PayloadAction } from '@reduxjs/toolkit';
                interface Flashcard { id?: string; question: string; answer: string; } const
                initialState: Flashcard[] = []; const flashcardsSlice = createSlice({ name:
                'flashcards', initialState, reducers: { addFlashcard: (state, action: PayloadAction<Flashcard>)
                => { state.push(action.payload); }, removeFlashcard: (state, action: PayloadAction<number>)
                => { state.splice(action.payload, 1); }, clearFlashcards: (state) => { return []; },
                }, }); export const { addFlashcard, removeFlashcard, clearFlashcards } =
                flashcardsSlice.actions; export default flashcardsSlice.reducer;             </document_content>
        </document>
        <document index="58">
            <source>app/slices/languageCardsSlice.ts</source>
            <document_content> import { createSlice, PayloadAction } from '@reduxjs/toolkit';
                interface LanguageCard { id?: string; word: string; translation: string; example:
                string; explanation: string; } const initialState: LanguageCard[] = []; const
                languageCardsSlice = createSlice({ name: 'languageCards', initialState, reducers: {
                addLanguageCard: (state, action: PayloadAction<LanguageCard>) => {
                state.push(action.payload); }, removeLanguageCard: (state, action: PayloadAction<number>)
                => { state.splice(action.payload, 1); }, clearLanguageCards: (state) => { return [];
                }, }, }); export const { addLanguageCard, removeLanguageCard, clearLanguageCards } =
                languageCardsSlice.actions; export default languageCardsSlice.reducer;             </document_content>
        </document>
        <document index="59">
            <source>app/slices/settingsSlice.ts</source>
            <document_content> import { createSlice, PayloadAction } from '@reduxjs/toolkit'; import
                { DEFAULT_PROMPTS, DEFAULT_MODEL } from '@/components/config'; export interface
                SettingsState { apiKey: string; selectedModel: string; customPrompts: { flashcard:
                string; explain: string; language: string; }; } const initialState: SettingsState =
                { apiKey: '', selectedModel: DEFAULT_MODEL, customPrompts: DEFAULT_PROMPTS, }; const
                settingsSlice = createSlice({ name: 'settings', initialState, reducers: { setApiKey:
                (state, action: PayloadAction<string>) => { state.apiKey = action.payload; },
                setSelectedModel: (state, action: PayloadAction<string>) => { state.selectedModel =
                action.payload; }, setCustomPrompts: (state, action: PayloadAction<SettingsState ['customPrompts' ]>)
                => { state.customPrompts = action.payload; }, }, }); export const { setApiKey,
                setSelectedModel, setCustomPrompts } = settingsSlice.actions; export default
                settingsSlice.reducer;             </document_content>
        </document>
        <document index="60">
            <source>app/signin/page.tsx</source>
            <document_content> 'use client' import { signIn } from 'next-auth/react' import { Button
                } from '@/components/ui/button' import { Icons } from '@/components/ui/icons' import
                { CardTitle } from '@/components/ui/card' import Link from 'next/link' export
                default function SignIn() { const handleSignIn = (provider: string) => {
                signIn(provider, { callbackUrl: '/main' }) } return ( <div
                    className="flex min-h-screen bg-background relative overflow-hidden">
                    <div
                        className="absolute inset-0 bg-gradient-to-r from-blue-500 to-teal-500 opacity-20 blur-3xl"></div>
                    <div
                        className="flex flex-col justify-center w-full px-4 py-12 sm:px-6 lg:flex-none lg:px-20 xl:px-24 relative z-10">
                        <div
                            className="w-full max-w-sm mx-auto lg:w-96 bg-white/80 backdrop-blur-sm rounded-lg shadow-lg p-8">
                            <div className="flex justify-center mb-8">
                                <Link href="/" className="flex items-center space-x-2">
                                    <Icons.mainIcon className="w-8 h-8" />
                                    <span
                                        className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-pink-500">Recall
                AI</span>
                                </Link>
                            </div>
                            <div className="text-center mb-8">
                                <CardTitle className="text-2xl font-semibold text-center">Sign in to
                your account</CardTitle>
                                <p className="mt-2 text-sm text-muted-foreground"> Don't have an
                account?{" "} <Link href="/signup"
                                        className="font-medium text-primary hover:underline">
                                        Sign up
                                    </Link>
                                </p>
                            </div>
                            <div className="space-y-6">
                                <div className="grid grid-cols-1 gap-4">
                                    <Button
                                        onClick= {()=> handleSignIn('google')} variant="outline"
                className="w-full bg-white/90 hover:bg-white/95 text-gray-800 border-gray-300" > <Icons.google
                                            className="w-4 h-4 mr-2" /> Sign in with Google </Button>
                                    <Button
                                        onClick= {()=> handleSignIn('github')} variant="outline"
                className="w-full bg-white/90 hover:bg-white/95 text-gray-800 border-gray-300" > <Icons.github
                                            className="w-4 h-4 mr-2" /> Sign in with GitHub </Button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="relative flex-1 hidden w-0 lg:block">
                        <div
                            className="absolute inset-0 bg-gradient-to-r from-blue-500 to-teal-500 opacity-20 blu.eca3xl"></div>
                    </div>
                </div>
                ) } </document_content>
        </document>
        <document index="61">
            <source>app/main/page.tsx</source>
            <document_content> import { getServerSession } from "next-auth/next" import { redirect }
                from 'next/navigation' import { authOptions } from '../api/auth/[...nextauth]/route'
                import ClientMainInterface from '@/components/MainInterface/ClientMainInterface'
                export default async function Main() { try { const session = await
                getServerSession(authOptions) if (!session) { console.log("No session found,
                redirecting to signin") redirect('/signin') } console.log("Session found:",
                JSON.stringify(session, null, 2)) return <ClientMainInterface /> } catch (error) {
                console.error("Error in Main component:", error)
                redirect('/signin?error=SessionError') } } </document_content>
        </document>
        <document index="62">
            <source>app/leaderboard/page.tsx</source>
            <document_content> 'use client' import { useState, useEffect } from 'react' import {
                Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card" import {
                Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar" import { Badge }
                from "@/components/ui/badge" import { Button } from "@/components/ui/button" import
                { Progress } from "@/components/ui/progress" import { Tabs, TabsContent, TabsList,
                TabsTrigger } from "@/components/ui/tabs" import { Select, SelectContent,
                SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select" import {
                Input } from "@/components/ui/input" import { motion, AnimatePresence } from
                "framer-motion" import confetti from 'canvas-confetti' import { Trophy, Medal, Star,
                Zap, Target, Sparkles, BookOpen, Brain, Flame, Gift, TrendingUp, Users, Award,
                Crown, Rocket, ArrowUp, ArrowDown, Swords, Lightbulb, Hexagon, ChevronUp,
                ChevronDown, Search } from 'lucide-react' // Mock data for learners (expanded with
                more fields) const learnersData = [ { id: 1, name: "Alice", avatar:
                "/placeholder.svg?height=40&width=40", xp: 1200, streak: 15, cardsLearned: 450,
                level: 8, badges: ["Polyglot", "Night Owl"], lastActive: "2 hours ago", rank: 1,
                rankChange: 0, powerups: ["Double XP", "Streak Shield"] }, { id: 2, name: "Bob",
                avatar: "/placeholder.svg?height=40&width=40", xp: 980, streak: 7, cardsLearned:
                320, level: 6, badges: ["Early Bird"], lastActive: "1 day ago", rank: 2, rankChange:
                1, powerups: ["Streak Freeze"] }, { id: 3, name: "Charlie", avatar:
                "/placeholder.svg?height=40&width=40", xp: 1500, streak: 21, cardsLearned: 600,
                level: 10, badges: ["Polyglot", "Streak Master"], lastActive: "5 minutes ago", rank:
                3, rankChange: -1, powerups: ["XP Boost", "Infinite Lives"] }, { id: 4, name:
                "Diana", avatar: "/placeholder.svg?height=40&width=40", xp: 800, streak: 5,
                cardsLearned: 250, level: 5, badges: [], lastActive: "3 hours ago", rank: 4,
                rankChange: 0, powerups: [] }, { id: 5, name: "Ethan", avatar:
                "/placeholder.svg?height=40&width=40", xp: 1100, streak: 12, cardsLearned: 400,
                level: 7, badges: ["Quiz Ace"], lastActive: "1 hour ago", rank: 5, rankChange: 2,
                powerups: ["Time Warp"] }, ] const achievements = [ { name: "Consistent Learner",
                icon: Flame, description: "Maintain a 7-day streak", progress: 85 }, { name:
                "Knowledge Explorer", icon: BookOpen, description: "Learn 100 new cards", progress:
                60 }, { name: "XP Milestone", icon: Zap, description: "Reach 1000 XP", progress: 100
                }, { name: "Level Up", icon: Target, description: "Reach level 5", progress: 100 },
                { name: "Dedication", icon: Medal, description: "Study for 30 days in total",
                progress: 40 }, ] export default function Component() { const [learners,
                setLearners] = useState(learnersData) const [sortBy, setSortBy] = useState('xp')
                const [timeFrame, setTimeFrame] = useState('all') const [showConfetti,
                setShowConfetti] = useState(false) const [selectedLearner, setSelectedLearner] =
                useState(null) const [userRank, setUserRank] = useState(3) // Assuming the current
                user is Charlie const [showDuelModal, setShowDuelModal] = useState(false) const
                [duelOpponent, setDuelOpponent] = useState(null) const [expandedLearner,
                setExpandedLearner] = useState(null) const [searchQuery, setSearchQuery] =
                useState('') useEffect(() => { const sortedLearners = [...learners].sort((a, b) =>
                b[sortBy] - a[sortBy]) setLearners(sortedLearners) }, [sortBy]) useEffect(() => { if
                (showConfetti) { confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } })
                setTimeout(() => setShowConfetti(false), 3000) } }, [showConfetti]) const
                filteredLearners = learners.filter(learner =>
                learner.name.toLowerCase().includes(searchQuery.toLowerCase()) ) const
                renderLeaderboardHeader = () => ( <div
                    className="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
                    <h1 className="text-3xl font-bold">Learning Arena</h1>
                    <div className="flex flex-col md:flex-row gap-4 w-full md:w-auto">
                        <div className="relative w-full md:w-64">
                            <Search
                                className="absolute left-2 top-1/2 transform -translate-y-1/2 text-muted-foreground" />
                            <Input
                                type="text"
                                placeholder="Search users..."
                                value= {searchQuery}
                                onChange= {(e)=> setSearchQuery(e.target.value)}
                            className="pl-8"
                            />
                        </div>
                        <Select value= {sortBy} onValueChange= {setSortBy}>
                            <SelectTrigger className="w-full md:w-[180px]">
                                <SelectValue placeholder="Sort by" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="xp">XP</SelectItem>
                                <SelectItem value="streak">Streak</SelectItem>
                                <SelectItem value="cardsLearned">Cards Learned</SelectItem>
                                <SelectItem value="level">Level</SelectItem>
                            </SelectContent>
                        </Select>
                        <Select value= {timeFrame} onValueChange= {setTimeFrame}>
                            <SelectTrigger className="w-full md:w-[180px]">
                                <SelectValue placeholder="Time frame" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="all">All Time</SelectItem>
                                <SelectItem value="month">This Month</SelectItem>
                                <SelectItem value="week">This Week</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                </div>
                ) const renderLeaderboard = () => ( <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Trophy className="h-6 w-6 text-yellow-500" /> Top Learners </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <AnimatePresence> {filteredLearners.map((learner, index) => ( <motion.div
                                key= {learner.id}
                                initial= {{ opacity: 0, y: 20 }}
                                animate= {{ opacity: 1, y: 0 }}
                                exit= {{ opacity: 0, y: -20 }}
                                transition= {{ duration: 0.3, delay: index * 0.1 }}
                                className= {`flex flex-col p-4 border-b last:border-b-0 hover:bg-muted/ 50 cursor-pointer ${learner.rank=== userRank ? 'bg-primary/10' : ''}`}
                            onClick={() => setExpandedLearner(expandedLearner === learner.id ? null : learner.id)}
                        >
                            <div
                                    className="flex items-center justify-between">
                                    <div className="flex items-center gap-4">
                                        <span
                                            className="text-2xl font-bold text-muted-foreground w-8">
                {index === 0 && <Crown className="h-6 w-6 text-yellow-500" />} {index === 1 && <Crown
                                                className="h-6 w-6 text-gray-400" />} {index === 2
                && <Crown className="h-6 w-6 text-amber-600" />} {index > 2 && learner.rank} </span>
                                        <Avatar>
                                            <AvatarImage src= {learner.avatar} alt= {learner.name} />
                                            <AvatarFallback>{learner.name[0]}</AvatarFallback>
                                        </Avatar>
                                        <div>
                                            <p className="font-semibold">{learner.name}</p>
                                            <p className="text-sm text-muted-foreground">Level
                {learner.level}</p>
                                        </div>
                                    </div>
                                    <div className="flex items-center gap-4">
                                        <Badge variant="secondary"
                                            className="flex items-center gap-1">
                                            <Zap className="h-4 w-4" /> {learner.xp} XP </Badge>
                                    <Badge
                                            variant="outline" className="flex items-center gap-1">
                                            <Flame className="h-4 w-4" /> {learner.streak} day
                streak </Badge>
                                    <Badge variant="outline" className="flex items-center gap-1">
                                            <BookOpen className="h-4 w-4" /> {learner.cardsLearned}
                cards </Badge> {learner.rankChange !== 0 && ( <Badge variant= {learner.rankChange> 0 ? "success" :
                "destructive"} className="flex items-center gap-1"> {learner.rankChange > 0 ? <ArrowUp
                                                className="h-4 w-4" /> : <ArrowDown
                                                className="h-4 w-4" />}
                {Math.abs(learner.rankChange)} </Badge> )} <Button
                                            variant="outline"
                                            size="sm"
                                            onClick= {(e)=> { e.stopPropagation()
                setDuelOpponent(learner) setShowDuelModal(true) }} > <Swords
                                                className="h-4 w-4 mr-2" /> Duel </Button>
                {expandedLearner === learner.id ? <ChevronUp className="h-4 w-4" /> : <ChevronDown
                                            className="h-4 w-4" />} </div>
                                </div>
                {expandedLearner === learner.id && ( <motion.div
                                    initial= {{ opacity: 0, height: 0 }}
                                    animate= {{ opacity: 1, height: 'auto' }}
                                    exit= {{ opacity: 0, height: 0 }}
                                    transition= {{ duration: 0.3 }}
                                    className="mt-4 space-y-4"
                                >
                                    <div className="grid grid-cols-3 gap-4">
                                        <Card>
                                            <CardContent
                                                className="flex flex-col items-center justify-center p-4">
                                                <Zap className="h-8 w-8 text-yellow-500 mb-2" />
                                                <h3 className="text-xl font-bold">{learner.xp}</h3>
                                                <p className="text-sm text-muted-foreground">Total
                XP</p>
                                            </CardContent>
                                        </Card>
                                        <Card>
                                            <CardContent
                                                className="flex flex-col items-center justify-center p-4">
                                                <Flame className="h-8 w-8 text-orange-500 mb-2" />
                                                <h3 className="text-xl font-bold">{learner.streak}</h3>
                                                <p className="text-sm text-muted-foreground">Day
                Streak</p>
                                            </CardContent>
                                        </Card>
                                        <Card>
                                            <CardContent
                                                className="flex flex-col items-center justify-center p-4">
                                                <BookOpen className="h-8 w-8 text-green-500 mb-2" />
                                                <h3 className="text-xl font-bold">
                {learner.cardsLearned}</h3>
                                                <p className="text-sm text-muted-foreground">Cards
                Learned</p>
                                            </CardContent>
                                        </Card>
                                    </div>
                                    <div>
                                        <h3 className="text-lg font-semibold mb-2">Badges</h3>
                                        <div className="flex flex-wrap gap-2">
                {learner.badges.map((badge, index) => ( <Badge key= {index} variant="secondary"
                                                className="flex items-center gap-1">
                                                <Award className="h-4 w-4" /> {badge} </Badge> ))} </div>
                                    </div>
                                    <div>
                                        <h3 className="text-lg font-semibold mb-2">Active Power-ups</h3>
                                        <div className="flex flex-wrap gap-2">
                {learner.powerups.map((powerup, index) => ( <Badge key= {index} variant="outline"
                                                className="flex items-center gap-1">
                                                <Hexagon className="h-4 w-4" /> {powerup} </Badge>
                ))} </div>
                                    </div>
                                </motion.div>
                )} </motion.div> ))} </AnimatePresence>
                    </CardContent>
                </Card>
                ) const renderAchievements = () => ( <Card className="mt-8">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Star className="h-6 w-6 text-yellow-500" /> Recent Achievements </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {achievements.map((achievement, index) => ( <Card key= {index} className="bg-muted">
                                <CardContent className="flex flex-col gap-4 p-4">
                                    <div className="flex items-center gap-4">
                                        <achievement.icon className="h-8 w-8 text-primary" />
                                        <div>
                                            <h3 className="font-semibold">{achievement.name}</h3>
                                            <p className="text-sm text-muted-foreground">
                {achievement.description}</p>
                                        </div>
                                    </div>
                                    <Progress value= {achievement.progress} className="w-full h-2" />
                                    <p className="text-sm text-right">{achievement.progress}%
                complete</p>
                                </CardContent>
                            </Card>
                ))} </div>
                    </CardContent>
                </Card> ) const
                renderCommunityStats = () => ( <Card className="mt-8">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Brain className="h-6 w-6 text-blue-500" /> Community Stats </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <Card>
                                <CardContent
                                    className="flex flex-col items-center justify-center p-6">
                                    <Zap className="h-12 w-12 text-yellow-500 mb-2" />
                                    <h3 className="text-2xl font-bold">54,321</h3>
                                    <p className="text-muted-foreground">Total XP Earned</p>
                                </CardContent>
                            </Card>
                            <Card>
                                <CardContent
                                    className="flex flex-col items-center justify-center p-6">
                                    <BookOpen className="h-12 w-12 text-green-500 mb-2" />
                                    <h3 className="text-2xl font-bold">12,345</h3>
                                    <p className="text-muted-foreground">Cards Learned Today</p>
                                </CardContent>
                            </Card>
                            <Card>
                                <CardContent
                                    className="flex flex-col items-center justify-center p-6">
                                    <Flame className="h-12 w-12 text-orange-500 mb-2" />
                                    <h3 className="text-2xl font-bold">789</h3>
                                    <p className="text-muted-foreground">Active Streaks</p>
                                </CardContent>
                            </Card>
                        </div>
                    </CardContent>
                </Card>
                ) const renderCommunityChallenge = () => ( <Card className="mt-8">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Target className="h-6 w-6 text-red-500" /> Community Challenge </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <h3 className="text-xl font-semibold mb-2">Learn 100,000 Cards This Week</h3>
                        <p className="text-muted-foreground mb-4">Join forces with other learners to
                reach our community goal!</p>
                        <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                                <span>Progress: 73,450 / 100,000</span>
                                <span>73%</span>
                            </div>
                            <Progress value= {73} className="w-full h-2" />
                        </div>
                        <Button className="mt-4" onClick= {()=> setShowConfetti(true)}>
                Contribute Now
                        </Button>
                    </CardContent>
                </Card>
                ) const renderDailyChallenge = () => ( <Card className="mt-8">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Gift className="h-6 w-6 text-purple-500" /> Daily Challenge </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <h3 className="text-xl font-semibold mb-2">Learn 50 New Words</h3>
                        <p className="text-muted-foreground mb-4">Complete today's challenge to earn
                bonus XP and a special badge!</p>
                        <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                                <span>Progress: 32 / 50</span>
                                <span>64%</span>
                            </div>
                            <Progress value= {64} className="w-full h-2" />
                        </div>
                        <Button className="mt-4" variant="outline">
                            Start Learning
                        </Button>
                    </CardContent>
                </Card>
                ) const renderTrendingTopics = () => ( <Card className="mt-8">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <TrendingUp className="h-6 w-6 text-green-500" /> Trending Topics </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {['Spanish Verbs', 'JavaScript Basics', 'World Capitals', 'Chemistry Elements', 'Art
                History'].map((topic, index) => ( <Button key= {index} variant="outline"
                                className="justify-start">
                                <Sparkles className="h-4 w-4 mr-2" /> {topic} </Button> ))} </div>
                    </CardContent>
                </Card>
                ) const renderUserProgress = () => ( <Card className="mt-8">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Rocket className="h-6 w-6 text-blue-500" /> Your Progress </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="flex items-center justify-between mb-4">
                            <div>
                                <h3 className="text-xl font-semibold">Current Rank: {userRank}</h3>
                                <p className="text-muted-foreground">Keep going! You're doing great!</p>
                            </div>
                            <Button variant="outline">View Detailed Stats</Button>
                        </div>
                        <div className="space-y-4">
                            <div>
                                <div className="flex justify-between text-sm mb-1">
                                    <span>XP to next level</span>
                                    <span>750 / 1000</span>
                                </div>
                                <Progress value= {75} className="w-full h-2" />
                            </div>
                            <div>
                                <div className="flex justify-between text-sm mb-1">
                                    <span>Daily goal progress</span>
                                    <span>4 / 5 sessions</span>
                                </div>
                                <Progress value= {80} className="w-full h-2" />
                            </div>
                        </div>
                    </CardContent>
                </Card>
                ) const renderDuelModal = () => ( showDuelModal && duelOpponent && ( <div
                    className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <Card className="w-96">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <Swords className="h-6 w-6 text-red-500" /> Learning Duel </CardTitle>
                        </CardHeader>
                        <CardContent>
                            <p className="mb-4">Challenge {duelOpponent.name} to a learning duel!</p>
                            <div className="flex justify-between items-center mb-4">
                                <Avatar>
                                    <AvatarImage src="/placeholder.svg?height=40&width=40"
                                        alt="Your Avatar" />
                                    <AvatarFallback>You</AvatarFallback>
                                </Avatar>
                                <Swords className="h-8 w-8 text-red-500" />
                                <Avatar>
                                    <AvatarImage src= {duelOpponent.avatar} alt= {duelOpponent.name} />
                                    <AvatarFallback>{duelOpponent.name[0]}</AvatarFallback>
                                </Avatar>
                            </div>
                            <div className="space-y-2">
                                <Button className="w-full" onClick= {()=>
                setShowDuelModal(false)}>
                                    Start Duel
                                </Button>
                                <Button className="w-full" variant="outline" onClick= {()=>
                setShowDuelModal(false)}>
                                    Cancel
                                </Button>
                            </div>
                        </CardContent>
                    </Card>
                </div>
                ) ) return ( <div className="container mx-auto p-4 space-y-6">
                {renderLeaderboardHeader()} <Tabs defaultValue="leaderboard">
                        <TabsList className="mb-4">
                            <TabsTrigger value="leaderboard">Leaderboard</TabsTrigger>
                            <TabsTrigger value="achievements">Achievements</TabsTrigger>
                            <TabsTrigger value="community">Community</TabsTrigger>
                            <TabsTrigger value="challenges">Challenges</TabsTrigger>
                            <TabsTrigger value="progress">Your Progress</TabsTrigger>
                        </TabsList>
                        <TabsContent value="leaderboard">
                            {renderLeaderboard()}
                        </TabsContent>
                        <TabsContent value="achievements">
                            {renderAchievements()}
                        </TabsContent>
                        <TabsContent value="community">
                            {renderCommunityStats()}
                            {renderCommunityChallenge()}
                            {renderTrendingTopics()}
                        </TabsContent>
                        <TabsContent value="challenges">
                            {renderDailyChallenge()}
                            {renderCommunityChallenge()}
                        </TabsContent>
                        <TabsContent value="progress">
                            {renderUserProgress()}
                        </TabsContent>
                    </Tabs>
                {renderDuelModal()} </div> ) } </document_content>
        </document>
        <document index="63">
            <source>app/providers/Providers.tsx</source>
            <document_content> "use client"; import { SessionProvider } from "next-auth/react";
                import { Provider } from "react-redux"; import { store } from "@/app/store"; export
                function Providers({ children }: { children: React.ReactNode }) { return ( <SessionProvider>
                    <Provider store= {store}>{children}</Provider>
                </SessionProvider> ); } </document_content>
        </document>
        <document index="64">
            <source>utils/contentUtils.ts</source>
            <document_content> import { toast } from "@/components/ui/use-toast" import {
                AppDispatch } from "@/app/store" import { addFlashcard } from
                "@/app/slices/flashcardsSlice" import { addLanguageCard } from
                "@/app/slices/languageCardsSlice" interface ParsedContent { word: string;
                translation: string; example: string; explanation: string; } export const
                handleGenerateContent = async ( text: string, mode: "language" | "flashcard" |
                "explain", customPrompts: { flashcard: string; explain: string; language: string },
                languageSubMode: "english" | "french", apiKey: string, selectedModel: string,
                dispatch: AppDispatch, setExplanation: (explanation: string) => void ): Promise<ParsedContent
                    | null> => { if (!text) { toast({ title: "No text selected", description: "Please
                select some text before generating content.", }) console.log("No text selected.
                Current text:", text) return null; } console.log("Generating content with text:",
                text) if (!apiKey) { toast({ title: "API Key Missing", description: "Please set your
                Anthropic API key in the settings.", }) return null; } let prompt = "" if (mode ===
                "flashcard") { prompt = customPrompts.flashcard.replace("[TEXT]", text) } else if
                (mode === "explain") { prompt = customPrompts.explain.replace("[TEXT]", text) } else
                if (mode === "language") { prompt = `${customPrompts.language} Please provide the
                following for the word or phrase "[TEXT]": <W>The word or phrase itself</W>
            <T>The
                translation in [LANGUAGE]</T>
            <E>An example sentence using the word or phrase</E>
            <X>A
                short explanation or definition</X>` .replace("[TEXT]", text) .replace("[LANGUAGE]",
                languageSubMode === "english" ? "French" : "English") } try { const content = await
                generateContent(apiKey, selectedModel, prompt); parseAndAddCards(content, mode,
                dispatch, setExplanation); // const parsedContent = parseGeneratedContent(content);
                // return parsedContent; } catch (error) { console.error("Error generating
                content:", error); toast({ title: "Error", description: "An error occurred while
                generating content. Please try again.", }); return null; } } export const
                parseAndAddCards = ( content: string, mode: "language" | "flashcard" | "explain",
                dispatch: AppDispatch, setExplanation: (explanation: string) => void ) => { if (mode
                === "flashcard" || mode === "language") { try { const parsedContent =
                parseGeneratedContent(content); console.log("Response : ", parsedContent) if (mode
                === "flashcard") { dispatch(addFlashcard({ question: parsedContent.question, answer:
                parsedContent.answer })); } else { dispatch(addLanguageCard(parsedContent)); } }
                catch (error) { console.error("Error parsing content:", error); toast({ title:
                "Error", description: "An error occurred while parsing the generated content. Please
                try again.", }); } } else if (mode === "explain") { setExplanation(content); } };
                async function generateContent(apiKey: string, model: string, prompt: string):
                Promise<string> { const response = await fetch('/api/generate', { method: 'POST',
                headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ apiKey,
                model, prompt, }), }); if (!response.ok) { throw new Error('Failed to generate
                content'); } const data = await response.json(); console.log(model, prompt);
                console.log(data.content); return data.content; } function
                parseGeneratedContent(content: any): ParsedContent { const contentString = typeof
                content === 'string' ? content : JSON.stringify(content); const wordMatch =
                contentString.match(/<W>(.*?)<\/W>/s); const translationMatch = contentString.match(/<T>
                (.*?)<\/T>/s); const exampleMatch = contentString.match(/<E>(.*?)<\/E>/s); const
                explanationMatch = contentString.match(/<X>(.*?)<\/X>/s); if (!wordMatch ||
                !translationMatch || !exampleMatch || !explanationMatch) { console.error('Invalid
                content format:', contentString); throw new Error('Invalid content format'); }
                return { word: wordMatch[1].trim(), translation: translationMatch[1].trim(),
                example: exampleMatch[1].trim(), explanation: explanationMatch[1].trim(), }; }             </document_content>
        </document>
        <document index="65">
            <source>utils/styles.ts</source>
            <document_content>
                export const sharedStyles = {
                button: 'px-4 py-2 rounded-md font-semibold focus:outline-none focus:ring-2
                focus:ring-offset-2',
                card: 'bg-white dark:bg-neutral-800 border border-neutral-200
                dark:border-neutral-700 shadow-sm rounded-lg',
                cardContent: 'p-4',
                header: 'text-lg font-bold text-gray-900 dark:text-white',
                input: 'w-full px-3 py-2 border rounded-md focus:ring focus:ring-blue-500
                dark:bg-neutral-700 dark:text-white dark:border-neutral-600',
                label: 'block text-sm font-medium text-gray-700 dark:text-gray-200',
                checkbox: 'h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500
                dark:bg-neutral-700 dark:border-neutral-600',
                // Add more shared styles as needed
                };

            </document_content>
        </document>
        <document index="66">
            <source>tailwind.config.ts</source>
            <document_content>
                import type { Config } from "tailwindcss";

                const config: Config = {
                darkMode: "class",
                content: [
                "./pages/**/*.{js,ts,jsx,tsx,mdx}",
                "./components/**/*.{js,ts,jsx,tsx,mdx}",
                "./app/**/*.{js,ts,jsx,tsx,mdx}",
                ],
                theme: {
                extend: {
                colors: {
                background: "var(--background)",
                foreground: "var(--foreground)",
                },
                },
                },
                plugins: [],
                };
                export default config;
</document_content>
        </document>
    </documents>

</code-files>

<output_format>
    <![CDATA[ 
{
  "deletedFiles": [
    // path/to/deletedFiles
  ],
  ],
  "filesContent": [
    {
      "file": "path/to/file",
      "action": "create" | "update",
      "description": "Description of the new file and its purpose.",
      "fullCode": "/* Complete code for the new file */"
    },
  ]
}
    ]]>
</output_format>