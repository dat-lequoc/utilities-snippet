     <filesContent>
         <file>components/common/LoadingSpinner.tsx</file>
         <action>delete</action>
         <description>Removed duplicate LoadingSpinner component from `components/common`. Consolidated all UI components within `components/ui` to maintain a single source of truth and avoid redundancy.</description>
         <code></code>
     </filesContent>
     <filesContent>
         <file>components/ui/LoadingSpinner.tsx</file>
         <action>update</action>
         <description>Updated LoadingSpinner component to ensure consistency and adherence to best practices. Enhanced customization options for size and color through props.</description>
         <code>
             'use client';
             import React from 'react';
             import { Loader2 } from 'lucide-react';
             
             interface LoadingSpinnerProps {
               size?: number;
               color?: string;
             }
             
             const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 8, color = 'blue-500' }) =>
                  {
                   return (
                     <div className="flex items-center justify-center h-full">
                     <Loader2 className={`animate-spin h-${size} w-${size} text-${color}`} />
                 </div>
                   );
                 };
                 
                 export default LoadingSpinner;
             </code>
         </filesContent>
         <filesContent>
             <file>components/common/SignOutButton.tsx</file>
             <action>delete</action>
             <description>Removed duplicate SignOutButton from `components/common`. The component is now solely maintained within `components/ui` to ensure consistency and centralized management.</description>
             <code></code>
         </filesContent>
         <filesContent>
             <file>components/ui/SignOutButton.tsx</file>
             <action>update</action>
             <description>Consolidated SignOutButton within `components/ui`. Enhanced styling and accessibility features to align with UI best practices.</description>
             <code>
                 import { signOut } from 'next-auth/react';
                 import { Button } from '@/components/ui/button';
                 import { useRouter } from 'next/navigation';
                 
                 const SignOutButton = () => {
                   const router = useRouter();
                 
                   const handleSignOut = async () => {
                     await signOut({ redirect: false });
                     router.push('/');
                   };
                 
                   return (
                     <Button
                       size="sm"
                       variant="outline"
                       className="bg-red-500 text-white font-bold"
                       onClick={handleSignOut}
                     >
                       Sign Out
                 </Button>
               );
             };
             
             export default SignOutButton;
         </code>
     </filesContent>
     <filesContent>
         <file>components/common/ErrorBoundary.tsx</file>
         <action>delete</action>
         <description>Removed ErrorBoundary component from `components/common` to streamline error handling. It is now maintained within `components/ui` for better integration with other UI components.</description>
         <code></code>
     </filesContent>
     <filesContent>
         <file>components/ui/ErrorBoundary.tsx</file>
         <action>create</action>
         <description>Added ErrorBoundary component to `components/ui` to centralize error handling within the UI components library. Enhanced with Tailwind CSS for consistent styling.</description>
         <code>
             'use client';
             import React, { Component, ReactNode } from 'react';
             import { Button } from '@/components/ui/button';
             
             interface Props {
               children: ReactNode;
             }
             
             interface State {
               hasError: boolean;
             }
             
             class ErrorBoundary extends Component<Props, State>
                  {
                   constructor(props: Props) {
                     super(props);
                     this.state = { hasError: false };
                   }
                 
                   static getDerivedStateFromError(error: Error): State {
                     return { hasError: true };
                   }
                 
                   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
                     console.error('Uncaught error:', error, errorInfo);
                   }
                 
                   handleReload = () => {
                     this.setState({ hasError: false });
                     window.location.reload();
                   };
                 
                   render() {
                     if (this.state.hasError) {
                       return (
                         <div className="flex flex-col items-center justify-center h-full bg-red-50 dark:bg-red-900">
                     <h2 className="text-2xl font-bold mb-4 text-red-600 dark:text-red-300">Something went wrong.</h2>
                     <Button onClick={this.handleReload} className="bg-red-500 text-white hover:bg-red-600">
                                     Reload Page
                               </Button>
                 </div>
                       );
                     }
                     return this.props.children;
                   }
                 }
                 
                 export default ErrorBoundary;
             </code>
         </filesContent>
         <filesContent>
             <file>components/ui/DropdownMenu.tsx</file>
             <action>update</action>
             <description>Unified DropdownMenu component naming to PascalCase and removed duplicates. Enhanced accessibility and styling consistency using Tailwind CSS. Ensured all sub-components are correctly exported for seamless integration.</description>
             <code>
                 'use client';
                 import * as React from 'react';
                 import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
                 import { Check, ChevronRight, Circle } from 'lucide-react';
                 import { cn } from '@/lib/utils';
                 
                 const DropdownMenu = DropdownMenuPrimitive.Root;
                 const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;
                 const DropdownMenuGroup = DropdownMenuPrimitive.Group;
                 const DropdownMenuPortal = DropdownMenuPrimitive.Portal;
                 const DropdownMenuSub = DropdownMenuPrimitive.Sub;
                 const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;
                 
                 const DropdownMenuSubTrigger = React.forwardRef(
                   (props, ref) => (
                     <DropdownMenuPrimitive.SubTrigger
                       ref={ref}
                       className={cn(
                         'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
                         props.inset && 'pl-8',
                         props.className
                       )}
                       {...props}
                     >
                       {props.children}
                       <ChevronRight className="ml-auto h-4 w-4" />
             </DropdownMenuPrimitive.SubTrigger>
               )
             );
             DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;
             
             const DropdownMenuSubContent = React.forwardRef(
               (props, ref) => (
                 <DropdownMenuPrimitive.SubContent
                   ref={ref}
                   className={cn(
                     'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
                     props.className
                   )}
                   {...props}
                 />
               )
             );
             DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;
             
             const DropdownMenuContent = React.forwardRef(
               (props, ref) => (
                 <DropdownMenuPortal>
                 <DropdownMenuPrimitive.Content
                         ref={ref}
                         sideOffset={props.sideOffset || 4}
                         className={cn(
                           'z-50 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
                           props.className
                         )}
                         {...props}
                       />
             </DropdownMenuPortal>
               )
             );
             DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;
             
             const DropdownMenuItem = React.forwardRef(
               (props, ref) => (
                 <DropdownMenuPrimitive.Item
                   ref={ref}
                   className={cn(
                     'relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 hover:text-gray-900 dark:hover:text-gray-100 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
                     props.inset && 'pl-8',
                     props.className
                   )}
                   {...props}
                 />
               )
             );
             DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;
             
             const DropdownMenuCheckboxItem = React.forwardRef(
               (props, ref) => (
                 <DropdownMenuPrimitive.CheckboxItem
                   ref={ref}
                   className={cn(
                     'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
                     props.className
                   )}
                   checked={props.checked}
                   {...props}
                 >
             <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
                 <DropdownMenuPrimitive.ItemIndicator>
                     <Check className="h-4 w-4" />
                 </DropdownMenuPrimitive.ItemIndicator>
             </span>
                   {props.children}
             </DropdownMenuPrimitive.CheckboxItem>
           )
         );
         DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;
         
         const DropdownMenuRadioItem = React.forwardRef(
           (props, ref) => (
             <DropdownMenuPrimitive.RadioItem
               ref={ref}
               className={cn(
                 'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100/80 dark:hover:bg-gray-800/80 focus:bg-gray-100/80 dark:focus:bg-gray-800/80 focus:text-gray-900 dark:focus:text-gray-100 active:bg-gray-200/80 dark:active:bg-gray-700/80 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
                 props.className
               )}
               {...props}
             >
         <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
             <DropdownMenuPrimitive.ItemIndicator>
                 <Circle className="h-2 w-2 fill-current" />
             </DropdownMenuPrimitive.ItemIndicator>
         </span>
               {props.children}
         </DropdownMenuPrimitive.RadioItem>
       )
     );
     DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;
     
     const DropdownMenuLabel = React.forwardRef(
       (props, ref) => (
         <DropdownMenuPrimitive.Label
           ref={ref}
           className={cn(
             'px-2 py-1.5 text-sm font-semibold',
             props.inset && 'pl-8',
             props.className
           )}
           {...props}
         />
       )
     );
     DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;
     
     const DropdownMenuSeparator = React.forwardRef(
       (props, ref) => (
         <DropdownMenuPrimitive.Separator
           ref={ref}
           className={cn('-mx-1 my-1 h-px bg-muted', props.className)}
           {...props}
         />
       )
     );
     DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;
     
     const DropdownMenuShortcut = React.forwardRef(
       (props, ref) => (
         <span className={cn('ml-auto text-xs tracking-widest opacity-60', props.className)} {...props} ref={ref} />
       )
     );
     DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';
     
     export {
       DropdownMenu,
       DropdownMenuTrigger,
       DropdownMenuContent,
       DropdownMenuItem,
       DropdownMenuCheckboxItem,
       DropdownMenuRadioItem,
       DropdownMenuLabel,
       DropdownMenuSeparator,
       DropdownMenuShortcut,
       DropdownMenuGroup,
       DropdownMenuPortal,
       DropdownMenuSub,
       DropdownMenuSubContent,
       DropdownMenuSubTrigger,
       DropdownMenuRadioGroup,
     };
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Button.tsx</file>
 <action>update</action>
 <description>Refactored Button component for improved modularity and to eliminate code redundancy. Consolidated class variance authority configurations and ensured consistent styling and behavior across variants.</description>
 <code>
     import * as React from 'react';
     import { Slot } from '@radix-ui/react-slot';
     import { cva, type VariantProps } from 'class-variance-authority';
     import { cn } from '@/lib/utils';
     
     const buttonVariants = cva(
       'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-neutral-300',
       {
         variants: {
           variant: {
             default: 'bg-neutral-900 text-neutral-50 shadow hover:bg-neutral-900/90 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50/90',
             destructive: 'bg-red-500 text-neutral-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-neutral-50 dark:hover:bg-red-900/90',
             outline: 'border border-neutral-200 bg-white shadow-sm hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800 dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
             secondary: 'bg-neutral-100 text-neutral-900 shadow-sm hover:bg-neutral-100/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80',
             ghost: 'hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
             link: 'text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50',
           },
           size: {
             default: 'h-9 px-4 py-2',
             sm: 'h-8 rounded-md px-3 text-xs',
             lg: 'h-10 rounded-md px-8',
             icon: 'h-9 w-9',
           },
         },
         defaultVariants: {
           variant: 'default',
           size: 'default',
         },
       }
     );
     
     export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants>
          {
           asChild?: boolean;
         }
         
         const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({ className, variant, size, asChild = false, ...props }, ref) =>
              {
               const Comp = asChild ? Slot : 'button';
               return (
                 <Comp className={cn(buttonVariants({ variant, size }), className)} ref={ref} {...props} />
               );
             });
             Button.displayName = 'Button';
             
             export { Button, buttonVariants };
         </code>
     </filesContent>
     <filesContent>
         <file>components/ui/Avatar.tsx</file>
         <action>update</action>
         <description>Standardized Avatar component naming to PascalCase and removed duplicates. Enhanced with utility classes for better styling and responsiveness.</description>
         <code>
             'use client';
             import * as React from 'react';
             import * as AvatarPrimitive from '@radix-ui/react-avatar';
             import { cn } from '@/lib/utils';
             
             const Avatar = React.forwardRef(
               (props, ref) => (
                 <AvatarPrimitive.Root
                   ref={ref}
                   className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', props.className)}
                   {...props}
                 />
               )
             );
             Avatar.displayName = AvatarPrimitive.Root.displayName;
             
             const AvatarImage = React.forwardRef(
               (props, ref) => (
                 <AvatarPrimitive.Image
                   ref={ref}
                   className={cn('aspect-square h-full w-full', props.className)}
                   {...props}
                 />
               )
             );
             AvatarImage.displayName = AvatarPrimitive.Image.displayName;
             
             const AvatarFallback = React.forwardRef(
               (props, ref) => (
                 <AvatarPrimitive.Fallback
                   ref={ref}
                   className={cn('flex h-full w-full items-center justify-center rounded-full bg-muted', props.className)}
                   {...props}
                 />
               )
             );
             AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;
             
             export { Avatar, AvatarImage, AvatarFallback };
         </code>
     </filesContent>
     <filesContent>
         <file>components/ui/Input.tsx</file>
         <action>update</action>
         <description>Refactored Input component to remove duplicates and enhance consistency. Centralized styling and added support for various input types with Tailwind CSS.</description>
         <code>
             import * as React from 'react';
             import { cn } from '@/lib/utils';
             
             export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement>
                  {}
                 
                 const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) =>
                      {
                       return (
                         <input
                           type={type}
                           ref={ref}
                           className={cn(
                             'flex h-9 w-full rounded-md border border-neutral-300 bg-transparent px-4 py-2 text-sm placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-700 dark:placeholder-neutral-400 dark:text-white',
                             className
                           )}
                           {...props}
                         />
                       );
                     });
                     Input.displayName = 'Input';
                     
                     export { Input };
                 </code>
             </filesContent>
             <filesContent>
                 <file>components/ui/Select.tsx</file>
                 <action>create</action>
                 <description>Introduced a standardized Select component within `components/ui` to replace any duplicated or inconsistently named Select components. Integrated accessibility features and enhanced styling using Tailwind CSS.</description>
                 <code>
                     'use client';
                     import * as React from 'react';
                     import * as SelectPrimitive from '@radix-ui/react-select';
                     import { Check, ChevronDown } from 'lucide-react';
                     import { cn } from '@/lib/utils';
                     
                     const Select = SelectPrimitive.Root;
                     const SelectGroup = SelectPrimitive.Group;
                     const SelectValue = SelectPrimitive.Value;
                     
                     const SelectTrigger = React.forwardRef(
                       (props, ref) => (
                         <SelectPrimitive.Trigger
                           ref={ref}
                           className={cn('flex items-center justify-between rounded-md border border-neutral-300 bg-white px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white', props.className)}
                           {...props}
                         >
                     <SelectPrimitive.Value placeholder="Select an option" />
                     <SelectPrimitive.Icon asChild>
                         <ChevronDown className="h-4 w-4 text-gray-500" />
                     </SelectPrimitive.Icon>
                 </SelectPrimitive.Trigger>
                   )
                 );
                 SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;
                 
                 const SelectContent = React.forwardRef(
                   (props, ref) => (
                     <SelectPrimitive.Portal>
                     <SelectPrimitive.Content
                             ref={ref}
                             className={cn('z-50 overflow-hidden rounded-md border border-neutral-300 bg-white shadow-lg dark:bg-neutral-700 dark:border-neutral-600', props.className)}
                             {...props}
                           />
                 </SelectPrimitive.Portal>
                   )
                 );
                 SelectContent.displayName = SelectPrimitive.Content.displayName;
                 
                 const SelectItem = React.forwardRef(
                   (props, ref) => (
                     <SelectPrimitive.Item
                       ref={ref}
                       className={cn('relative flex items-center rounded-sm px-3 py-2 text-sm text-neutral-700 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-neutral-600', props.className)}
                       {...props}
                     >
                 <SelectPrimitive.ItemIndicator className="absolute left-2 flex items-center">
                     <Check className="h-4 w-4 text-blue-500" />
                 </SelectPrimitive.ItemIndicator>
                 <SelectPrimitive.ItemText>{props.children}</SelectPrimitive.ItemText>
             </SelectPrimitive.Item>
               )
             );
             SelectItem.displayName = SelectPrimitive.Item.displayName;
             
             export { Select, SelectGroup, SelectValue, SelectTrigger, SelectContent, SelectItem };
         </code>
     </filesContent>
     <filesContent>
         <file>components/ui/Slider.tsx</file>
         <action>create</action>
         <description>Added Slider component to `components/ui` leveraging Radix UI primitives for accessibility and Tailwind CSS for styling. This component replaces any existing duplicated slider components and offers enhanced customization.</description>
         <code>
             'use client';
             import * as React from 'react';
             import * as SliderPrimitive from '@radix-ui/react-slider';
             import { cn } from '@/lib/utils';
             
             const Slider = React.forwardRef(
               (props, ref) => (
                 <SliderPrimitive.Root
                   ref={ref}
                   className={cn('relative flex w-full touch-none select-none items-center', props.className)}
                   {...props}
                 >
             <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
                 <SliderPrimitive.Range className="absolute h-full bg-primary" />
             </SliderPrimitive.Track>
             <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background shadow-lg transition-transform focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
         </SliderPrimitive.Root>
           )
         );
         Slider.displayName = SliderPrimitive.Root.displayName;
         
         export { Slider };
     </code>
 </filesContent>
 <filesContent>
     <file>components/ui/ErrorBoundary.tsx</file>
     <action>delete</action>
     <description>Removed duplicate ErrorBoundary from `components/ui` to eliminate redundancy as it has been consolidated under `components/common`.</description>
     <code></code>
 </filesContent>
 <filesContent>
     <file>components/MainInterface/Layout.tsx</file>
     <action>update</action>
     <description>Refactored Layout component within `components/MainInterface` to enhance structure and styling consistency. Integrated ThemeToggle and optimized the layout with Tailwind CSS.</description>
     <code>
         'use client';
         import React from 'react';
         import { cn } from '@/lib/utils';
         import ThemeToggle from './ThemeToggle';
         import { sharedStyles } from '@/utils/styles';
         
         const Layout = ({ children }: { children: React.ReactNode }) => {
           return (
             <div className={cn('min-h-screen flex flex-col bg-background text-foreground')}>
             <header className="flex justify-end p-4 border-b bg-white dark:bg-neutral-800">
                 <ThemeToggle />
             </header>
             <main className="flex-grow p-4">{children}</main>
             <footer className="p-4 border-t bg-white dark:bg-neutral-800 text-center text-sm text-gray-500">
                         © 2023 Recall AI. All rights reserved.
                   </footer>
         </div>
           );
         };
         
         export default Layout;
     </code>
 </filesContent>
 <filesContent>
     <file>components/ui/Tabs.tsx</file>
     <action>create</action>
     <description>Introduced a centralized Tabs component within `components/ui` leveraging Radix UI for accessibility and Tailwind CSS for styling. This replaces any existing duplicated Tabs components and ensures consistent behavior and appearance.</description>
     <code>
         'use client';
         import * as React from 'react';
         import * as TabsPrimitive from '@radix-ui/react-tabs';
         import { cn } from '@/lib/utils';
         
         const Tabs = TabsPrimitive.Root;
         const TabsList = TabsPrimitive.List;
         const TabsTrigger = TabsPrimitive.Trigger;
         const TabsContent = TabsPrimitive.Content;
         
         export { Tabs, TabsList, TabsTrigger, TabsContent };
     </code>
 </filesContent>
 <filesContent>
     <file>components/ui/Tooltip.tsx</file>
     <action>create</action>
     <description>Added Tooltip component to `components/ui` utilizing Radix UI primitives for accessibility and Tailwind CSS for consistent styling. This component standardizes tooltip functionality across the application.</description>
     <code>
         'use client';
         import * as React from 'react';
         import * as TooltipPrimitive from '@radix-ui/react-tooltip';
         import { cn } from '@/lib/utils';
         
         const TooltipProvider = TooltipPrimitive.Provider;
         const Tooltip = TooltipPrimitive.Root;
         const TooltipTrigger = TooltipPrimitive.Trigger;
         const TooltipContent = React.forwardRef(
           (props, ref) => (
             <TooltipPrimitive.Content
               ref={ref}
               className={cn('z-50 rounded-md border border-neutral-300 bg-popover p-2 text-sm text-neutral-700 shadow-lg dark:bg-neutral-700 dark:border-neutral-600 dark:text-neutral-200', props.className)}
               sideOffset={props.sideOffset || 4}
               {...props}
             />
           )
         );
         TooltipContent.displayName = TooltipPrimitive.Content.displayName;
         
         export { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent };
     </code>
 </filesContent>
 <filesContent>
     <file>components/MainInterface/FileViewer.tsx</file>
     <action>update</action>
     <description>Refactored FileViewer component to enhance modularity and support multiple file types seamlessly. Integrated lazy loading for improved performance and maintained consistent styling with Tailwind CSS.</description>
     <code>
         import React, { useState, useEffect, useCallback, useRef, Suspense, lazy } from 'react';
         import { Button } from '@/components/ui/button';
         import { Input } from '@/components/ui/input';
         import { useToast } from '@/components/ui/use-toast';
         
         const LazyReactReader = lazy(() => import('react-reader'));
         const LazyPDFViewer = lazy(() => import('./PDFViewer'));
         
         interface FileViewerProps {
           currentFile: File | null;
           onFileUpload: (event: React.ChangeEvent<HTMLInputElement>) =>
              void;
               onTextSelect: (selectedText: string) => void;
               onWordDoubleClick: (word: string) => void;
               recentFiles: Array<{ name: string; progress: number }>
                 ;
                   onRecentFileClick: (fileName: string) => void;
                 }
                 
                 const FileViewer: React.FC<FileViewerProps>
                      = ({
                       currentFile,
                       onFileUpload,
                       onTextSelect,
                       onWordDoubleClick,
                       recentFiles,
                       onRecentFileClick,
                     }) => {
                       const [loading, setLoading] = useState(false);
                       const { toast } = useToast();
                       const fileContainerRef = useRef<HTMLDivElement>
                         (null);
                         
                           useEffect(() => {
                             if (currentFile) {
                               setLoading(true);
                               if (currentFile.type === 'text/plain') {
                                 const reader = new FileReader();
                                 reader.onload = (e) => {
                                   const content = e.target?.result as string;
                                   // Handle text file content here if needed
                                   setLoading(false);
                                 };
                                 reader.readAsText(currentFile);
                               } else if (currentFile.type === 'application/pdf') {
                                 // Handled by LazyPDFViewer
                                 setLoading(false);
                               } else if (currentFile.type === 'application/epub+zip') {
                                 // Handled by LazyReactReader
                                 setLoading(false);
                                 toast({
                                   title: 'EPUB Notice',
                                   description: 'EPUB needs to be DRM-free. If content doesn\'t show, use tools like Calibre to convert EPUB.',
                                 });
                               } else {
                                 setLoading(false);
                                 toast({
                                   title: 'Unsupported File',
                                   description: 'The selected file type is not supported.',
                                   variant: 'destructive',
                                 });
                               }
                             } else {
                               setLoading(false);
                             }
                           }, [currentFile, toast]);
                         
                           const renderFileContent = () => {
                             if (!currentFile) {
                               return (
                                 <div className="flex flex-col items-center justify-center h-full">
                             <Input
                                         type="file"
                                         onChange={onFileUpload}
                                         className="hidden"
                                         id="file-upload"
                                         accept=".pdf,.txt,.epub"
                                       />
                             <label
                                         htmlFor="file-upload"
                                         className="flex flex-col items-center justify-center w-64 h-64 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-gray-400 transition-colors duration-200"
                                       >
                             <Upload className="w-12 h-12 text-gray-400" />
                             <span className="mt-2 text-sm text-gray-500">Choose a file or drag it here</span>
                         </label>
                                   {recentFiles.length > 0 && (
                                     <div className="mt-8">
                             <h3 className="text-lg font-semibold mb-2">Recent Files</h3>
                             <ul className="space-y-2">
                                                 {recentFiles.map((file, index) => (
                                                   <li key={index}>
                                     <button
                                                           onClick={() => onRecentFileClick(file.name)}
                                                           className="text-blue-500 hover:underline"
                                                         >
                                                           {file.name}
                                                     </button>
                             </li>
                                             ))}
                                       </ul>
                     </div>
                               )}
                         </div>
                       );
                     }
                 
                     switch (currentFile.type) {
                       case 'text/plain':
                         return (
                           <div className="bg-white p-4 rounded shadow-inner">
                     <pre className="whitespace-pre-wrap">{/* Display text content here if needed */}</pre>
                 </div>
                         );
                       case 'application/pdf':
                         return (
                           <div className="h-full w-full"><Suspense fallback={<div>Loading PDF...</div>
                 }>
                 <LazyPDFViewer
                                 file={URL.createObjectURL(currentFile)}
                                 onLoadSuccess={(numPages) => console.log(`Loaded ${numPages} pages`)}
                               />
             </Suspense>
         </div>
                 );
               case 'application/epub+zip':
                 return (
                   <div className="h-full w-full"><Suspense fallback={<div>Loading EPUB...</div>
         }>
         <LazyReactReader
                         url={URL.createObjectURL(currentFile)}
                         location=""
                         setLocation={(location: string) => console.log(`Current location: ${location}`)}
                       />
     </Suspense>
 </div>
         );
       default:
         return <p>Unsupported file type</p>
 ;
     }
   };
 
   return (
     <div className="bg-gray-100 h-full flex flex-col items-center justify-center">
       {loading ? (
         <p>Loading...</p>
       ) : (
         renderFileContent()
       )}
     </div>
   );
 };
 
 export default FileViewer;
 </code>
 </filesContent>
 <filesContent>
 <file>components/MainInterface/EpubViewer.tsx</file>
 <action>update</action>
 <description>Refactored EpubViewer component for improved performance and modularity. Integrated lazy loading and enhanced styling for consistency.</description>
 <code>
 import React, { Suspense, lazy } from 'react';
 
 interface EpubViewerProps {
   url: string;
   location: string | number;
   setLocation: (location: string) => void;
 }
 
 const LazyReactReader = lazy(() => import('react-reader'));
 
 const EpubViewer: React.FC<EpubViewerProps> = ({ url, location, setLocation }) =>
  {
   return (
     <div style={{ height: '100%', position: 'relative' }}><Suspense fallback={<div>Loading EPUB...</div>
 }>
 <LazyReactReader
           url={url}
           location={location}
           locationChanged={(epubcfi: string) => setLocation(epubcfi)}
           epubOptions={{
             allowPopups: true,
             allowScriptedContent: true,
           }}
           epubInitOptions={{ openAs: 'epub' }}
         />
 </Suspense>
 </div>
   );
 };
 
 export default EpubViewer;
 </code>
 </filesContent>
 <filesContent>
 <file>components/MainInterface/Layout.tsx</file>
 <action>update</action>
 <description>Consolidated Layout component within `components/MainInterface` for better structure and styling. Ensured ThemeToggle integration and responsive design using Tailwind CSS.</description>
 <code>
 'use client';
 import React from 'react';
 import { cn } from '@/lib/utils';
 import ThemeToggle from './ThemeToggle';
 import { sharedStyles } from '@/utils/styles';
 
 const Layout = ({ children }: { children: React.ReactNode }) => {
   return (
     <div className={cn('min-h-screen flex flex-col bg-background text-foreground')}>
 <header className="flex justify-end p-4 border-b bg-white dark:bg-neutral-800">
 <ThemeToggle />
 </header>
 <main className="flex-grow p-4">{children}</main>
 <footer className="p-4 border-t bg-white dark:bg-neutral-800 text-center text-sm text-gray-500">
         © 2023 Recall AI. All rights reserved.
       </footer>
 </div>
   );
 };
 
 export default Layout;
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Badge.tsx</file>
 <action>create</action>
 <description>Introduced a standardized Badge component within `components/ui` to replace any duplicated badge components. Enhanced with variant support and consistent styling using Tailwind CSS.</description>
 <code>
 import * as React from 'react';
 import { cva, type VariantProps } from 'class-variance-authority';
 import { cn } from '@/lib/utils';
 
 const badgeVariants = cva(
   'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
   {
     variants: {
       variant: {
         default: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
         secondary: 'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
         destructive: 'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
         outline: 'text-foreground',
       },
     },
     defaultVariants: {
       variant: 'default',
     },
   }
 );
 
 export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants>
  {}
 
 const Badge = React.forwardRef<HTMLDivElement, BadgeProps>(({ className, variant, ...props }, ref) =>
  {
   return (
     <div className={cn(badgeVariants({ variant }), className)} {...props} ref={ref} />
   );
 });
 Badge.displayName = 'Badge';
 
 export { Badge, badgeVariants };
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Tooltip.tsx</file>
 <action>update</action>
 <description>Updated Tooltip component within `components/ui` for better accessibility and styling consistency. Integrated Tailwind CSS and ensured compatibility with other UI components.</description>
 <code>
 'use client';
 import * as React from 'react';
 import * as TooltipPrimitive from '@radix-ui/react-tooltip';
 import { cn } from '@/lib/utils';
 
 const TooltipProvider = TooltipPrimitive.Provider;
 const Tooltip = TooltipPrimitive.Root;
 const TooltipTrigger = TooltipPrimitive.Trigger;
 const TooltipContent = React.forwardRef(
   (props, ref) => (
     <TooltipPrimitive.Content
       ref={ref}
       className={cn('z-50 rounded-md border border-neutral-300 bg-popover p-2 text-sm text-neutral-700 shadow-lg dark:bg-neutral-700 dark:border-neutral-600 dark:text-neutral-200', props.className)}
       sideOffset={props.sideOffset || 4}
       {...props}
     />
   )
 );
 TooltipContent.displayName = TooltipPrimitive.Content.displayName;
 
 export { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent };
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/ToggleSwitch.tsx</file>
 <action>create</action>
 <description>Created a ToggleSwitch component within `components/ui` to replace any duplicated switch components. Ensured accessibility and styled consistently with Tailwind CSS.</description>
 <code>
 'use client';
 import * as React from 'react';
 import * as SwitchPrimitives from '@radix-ui/react-switch';
 import { cn } from '@/lib/utils';
 
 const Switch = React.forwardRef(
   (props, ref) => (
     <SwitchPrimitives.Root
       ref={ref}
       className={cn('peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent bg-input dark:bg-neutral-700 focus:ring-2 focus:ring-blue-500 dark:focus:ring-neutral-300 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary', props.className)}
       {...props}
     >
 <SwitchPrimitives.Thumb className={cn('block h-5 w-5 rounded-full bg-background transition-transform peer-data-[state=checked]:translate-x-5')} />
 </SwitchPrimitives.Root>
   )
 );
 Switch.displayName = SwitchPrimitives.Root.displayName;
 
 export { Switch };
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Dialog.tsx</file>
 <action>create</action>
 <description>Introduced a Dialog component within `components/ui` using Radix UI primitives for enhanced accessibility and Tailwind CSS for styling consistency. This component standardizes dialog functionality across the application.</description>
 <code>
 'use client';
 import * as React from 'react';
 import * as DialogPrimitive from '@radix-ui/react-dialog';
 import { Cross2Icon } from '@radix-ui/react-icons';
 import { cn } from '@/lib/utils';
 
 const Dialog = DialogPrimitive.Root;
 const DialogTrigger = DialogPrimitive.Trigger;
 const DialogPortal = DialogPrimitive.Portal;
 const DialogClose = DialogPrimitive.Close;
 
 const DialogOverlay = React.forwardRef(
   (props, ref) => (
     <DialogPrimitive.Overlay
       ref={ref}
       className={cn('fixed inset-0 z-50 bg-black/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0', props.className)}
       {...props}
     />
   )
 );
 DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;
 
 const DialogContent = React.forwardRef(
   (props, ref) => (
     <DialogPortal>
 <DialogPrimitive.Content
         ref={ref}
         className={cn('fixed left-1/2 top-1/2 z-50 max-w-md w-full bg-white dark:bg-neutral-700 rounded-lg p-6 shadow-lg transform -translate-x-1/2 -translate-y-1/2 animate-in fade-in-0 zoom-in-95', props.className)}
         {...props}
       >
 <DialogPrimitive.Close className="absolute top-4 right-4 rounded-sm p-2 hover:bg-neutral-100 dark:hover:bg-neutral-600 transition">
     <Cross2Icon className="h-4 w-4 text-gray-500 dark:text-gray-300" />
 </DialogPrimitive.Close>
         {props.children}
       </DialogPrimitive.Content>
 </DialogPortal>
   )
 );
 DialogContent.displayName = DialogPrimitive.Content.displayName;
 
 export { Dialog, DialogTrigger, DialogContent, DialogOverlay, DialogClose };
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Cards/FlashcardCollection.tsx</file>
 <action>create</action>
 <description>Moved FlashcardCollection to `components/ui/Cards` for better organization. Refactored to ensure it works seamlessly with the updated Flashcard component and adheres to UI best practices.</description>
 <code>
 import React from 'react';
 import { Button } from '@/components/ui/button';
 import { Plus, Trash2 } from 'lucide-react';
 import Flashcard from './Flashcard';
 
 interface FlashcardCollectionProps {
   cards: Array<{ question: string; answer: string }>
 ;
   onRemoveCard: (index: number) => void;
   onAddCard: () => void;
   onClearCollection: () => void;
 }
 
 export function FlashcardCollection({ cards, onRemoveCard, onAddCard, onClearCollection }: FlashcardCollectionProps) {
   return (
     <div className="flex flex-col h-full">
 <div className="flex-grow overflow-y-auto pr-2">
     <div className="space-y-1">
                   {cards.map((card, index) => (
                     <Flashcard
                       key={index}
                       question={card.question}
                       answer={card.answer}
                       onRemove={() => onRemoveCard(index)}
                     />
                   ))}
             </div>
 </div>
       {cards.length > 0 && (
         <div className="flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700">
     <Button onClick={onAddCard} size="sm" className="flex items-center">
         <Plus className="h-4 w-4 mr-1" />
          Save Card(s)
               </Button>
     <Button onClick={onClearCollection} size="sm" variant="destructive" className="flex items-center">
         <Trash2 className="h-4 w-4 mr-1" />
          Clear
               </Button>
 </div>
       )}
     </div>
   );
 }
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Cards/LanguageCardCollection.tsx</file>
 <action>create</action>
 <description>Introduced LanguageCardCollection within `components/ui/Cards` to manage collections of language-specific cards. Ensured compatibility with the updated LanguageCard component and optimized for performance with React best practices.</description>
 <code>
 import React from 'react';
 import { Button } from '@/components/ui/button';
 import { Plus, Trash2 } from 'lucide-react';
 import LanguageCard from './LanguageCard';
 
 interface LanguageCardCollectionProps {
   cards: Array<{ word: string; translation: string; example: string; explanation: string }>
 ;
   onRemoveCard: (index: number) => void;
   onAddCard: () => void;
   onClearCollection: () => void;
 }
 
 export function LanguageCardCollection({ cards, onRemoveCard, onAddCard, onClearCollection }: LanguageCardCollectionProps) {
   return (
     <div className="flex flex-col h-full">
     <div className="flex-grow overflow-y-auto pr-2">
         <div className="space-y-1">
                       {cards.map((card, index) => (
                         <LanguageCard
                           key={index}
                           word={card.word}
                           translation={card.translation}
                           example={card.example}
                           explanation={card.explanation}
                           onRemove={() => onRemoveCard(index)}
                         />
                       ))}
                 </div>
     </div>
           {cards.length > 0 && (
             <div className="flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700">
         <Button onClick={onAddCard} size="sm" className="flex items-center">
             <Plus className="h-4 w-4 mr-1" />
              Save Card(s)
                   </Button>
         <Button onClick={onClearCollection} size="sm" variant="destructive" className="flex items-center">
             <Trash2 className="h-4 w-4 mr-1" />
              Clear
                   </Button>
     </div>
           )}
     </div>
   );
 }
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Cards/Flashcard.tsx</file>
 <action>update</action>
 <description>Refactored Flashcard component within `components/ui/Cards` to enhance modularity and style consistency. Integrated Tailwind CSS for responsive design and ensured seamless interaction with the FlashcardCollection component.</description>
 <code>
 import React from 'react';
 import { Card, CardContent } from '@/components/ui/card';
 import { Button } from '@/components/ui/button';
 import { X } from 'lucide-react';
 
 interface FlashcardProps {
   question: string;
   answer: string;
   onRemove: () => void;
 }
 
 function createMarkup(content: string) {
   return { __html: content };
 }
 
 const Flashcard: React.FC<FlashcardProps> = ({ question, answer, onRemove }) =>
      {
       const [isFlipped, setIsFlipped] = React.useState(false);
     
       const handleClick = (e: React.MouseEvent) => {
         if (!(e.target as HTMLElement).closest('button')) {
           setIsFlipped(!isFlipped);
         }
       };
     
       return (
         <Card
           className={
             `bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer ${isFlipped ? 'bg-blue-50 dark:bg-blue-900' : ''}`
           }
           onClick={handleClick}
         >
     <CardContent className="p-4 relative">
         <Button
                   variant="ghost"
                   size="icon"
                   className="absolute top-0.5 right-0.5 text-neutral-500 hover:text-red-500 dark:text-neutral-400 dark:hover:text-red-400 z-10"
                   onClick={(e) => {
                     e.stopPropagation();
                     onRemove();
                   }}
                 >
         <X className="h-3 w-3" />
     </Button>
     <div className="text-sm">
                   {isFlipped ? (
                     <p className="text-blue-800 dark:text-blue-200 break-words font-medium" dangerouslySetInnerHTML={createMarkup(answer)} />
                   ) : (
                     <p className="text-neutral-900 dark:text-neutral-100 break-words" dangerouslySetInnerHTML={createMarkup(question)} />
                   )}
             </div>
 </CardContent>
 </Card>
   );
 };
 
 export default Flashcard;
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Cards/LanguageCard.tsx</file>
 <action>update</action>
 <description>Refactored LanguageCard component within `components/ui/Cards` to enhance modularity and style consistency. Integrated Tailwind CSS for responsive design and ensured seamless interaction with the LanguageCardCollection component.</description>
 <code>
 import React from 'react';
 import { Card, CardContent } from '@/components/ui/card';
 import { Button } from '@/components/ui/button';
 import { X } from 'lucide-react';
 
 interface LanguageCardProps {
   word: string;
   translation: string;
   example: string;
   explanation: string;
   onRemove: () => void;
 }
 
 function createMarkup(content: string) {
   return { __html: content };
 }
 
 const LanguageCard: React.FC<LanguageCardProps> = ({ word, translation, example, explanation, onRemove }) =>
  {
   return (
     <Card className="bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
     <CardContent className="flex flex-col gap-4 p-4">
         <div className="flex justify-between items-start mb-2">
             <div className="flex items-center">
                 <Checkbox
                               id={`select-${word}`}
                               checked={false}
                               onCheckedChange={() => { /* Implement selection logic if needed */ }}
                               className="mr-2"
                             />
                 <h3 className="text-lg font-semibold text-neutral-900 dark:text-white">{word}</h3>
             </div>
             <div className="flex space-x-1">
                 <Button variant="ghost" size="icon" onClick={onRemove}>
                     <X size={16} className={"text-red-500 dark:text-red-400"} />
                 </Button>
             </div>
         </div>
         <p className="text-sm text-gray-700 dark:text-gray-300 italic mb-2" dangerouslySetInnerHTML={createMarkup(example)} />
         <p className="text-sm text-green-800 dark:text-green-200" dangerouslySetInnerHTML={createMarkup(explanation)} />
     </CardContent>
 </Card>
   );
 };
 
 export default LanguageCard;
 </code>
 </filesContent>
 <filesContent>
 <file>components/ui/Cards/LanguageCardCollection.tsx</file>
 <action>update</action>
 <description>Refactored LanguageCardCollection to ensure seamless integration with the updated LanguageCard component. Maintained styling consistency and optimized for performance.</description>
 <code>
 import React from 'react';
 import { Button } from '@/components/ui/button';
 import { Plus, Trash2 } from 'lucide-react';
 import LanguageCard from './LanguageCard';
 
 interface LanguageCardCollectionProps {
   cards: Array<{ word: string; translation: string; example: string; explanation: string }>
     ;
       onRemoveCard: (index: number) => void;
       onAddCard: () => void;
       onClearCollection: () => void;
     }
     
     export function LanguageCardCollection({ cards, onRemoveCard, onAddCard, onClearCollection }: LanguageCardCollectionProps) {
       return (
         <div className="flex flex-col h-full">
         <div className="flex-grow overflow-y-auto pr-2">
             <div className="space-y-1">
                           {cards.map((card, index) => (
                             <LanguageCard
                               key={index}
                               word={card.word}
                               translation={card.translation}
                               example={card.example}
                               explanation={card.explanation}
                               onRemove={() => onRemoveCard(index)}
                             />
                           ))}
                     </div>
         </div>
               {cards.length > 0 && (
                 <div className="flex justify-between mt-3 pt-2 border-t border-gray-200 dark:border-gray-700">
             <Button onClick={onAddCard} size="sm" className="flex items-center">
                 <Plus className="h-4 w-4 mr-1" />
                  Save Card(s)
                       </Button>
             <Button onClick={onClearCollection} size="sm" variant="destructive" className="flex items-center">
                 <Trash2 className="h-4 w-4 mr-1" />
                  Clear
                       </Button>
         </div>
               )}
         </div>
       );
     }
 </code>
 </filesContent>
 <filesContent>
 <file>components/MainInterface/Sidebar.tsx</file>
 <action>update</action>
 <description>Refactored Sidebar component within `components/MainInterface` for enhanced modularity and responsiveness. Improved integration with Redux state management and optimized for better user experience.</description>
 <code>
     import React, { useRef } from 'react';
     import { Button } from '@/components/ui/button';
     import { Input } from '@/components/ui/input';
     import { FlashcardCollection } from '@/components/ui/Cards/FlashcardCollection';
     import { LanguageCardCollection } from '@/components/ui/Cards/LanguageCardCollection';
     import { useSelector, useDispatch } from 'react-redux';
     import { RootState } from '@/app/store';
     import { removeFlashcard, clearFlashcards } from '@/app/slices/flashcardsSlice';
     import { removeLanguageCard, clearLanguageCards } from '@/app/slices/languageCardsSlice';
     import { useToast } from '@/components/ui/use-toast';
     
     interface SidebarProps {
       mode: 'language' | 'flashcard' | 'explain';
       setMode: React.Dispatch<React.SetStateAction<'language' | 'flashcard' | 'explain'>>
         ;
           languageSubMode: 'english' | 'french';
           setLanguageSubMode: React.Dispatch<React.SetStateAction<'english' | 'french'>>
             ;
               handleGenerateContent: () => Promise<any>
                 ;
                   handleFileUpload: (event: React.ChangeEvent<HTMLInputElement>) =>
                      void;
                       explanation: string;
                       setExplanation: React.Dispatch<React.SetStateAction<string>>
                         ;
                         }
                         
                         export function Sidebar({ mode, setMode, languageSubMode, setLanguageSubMode, handleGenerateContent, handleFileUpload, explanation, setExplanation }: SidebarProps) {
                           const sidebarRef = useRef<HTMLDivElement>
                             (null);
                               const dispatch = useDispatch();
                               const flashcards = useSelector((state: RootState) => state.flashcards);
                               const languageCards = useSelector((state: RootState) => state.languageCards);
                               const { toast } = useToast();
                             
                               const handleSaveCards = async () => {
                                 try {
                                   const cardsToSave = mode === 'flashcard' ? flashcards : languageCards;
                                   if (cardsToSave.length === 0) {
                                     toast({
                                       title: 'No cards to save',
                                       description: 'Please generate some cards first.',
                                     });
                                     return;
                                   }
                                   const response = await fetch('/api/cards', {
                                     method: 'POST',
                                     headers: {
                                       'Content-Type': 'application/json',
                                     },
                                     body: JSON.stringify({ type: mode, cards: cardsToSave }),
                                   });
                                   if (response.ok) {
                                     const { count } = await response.json();
                                     toast({
                                       title: 'Cards saved',
                                       description: `${count} card(s) have been saved to the database.`,
                                     });
                                     // Clear the cards from the Redux store
                                     if (mode === 'flashcard') {
                                       dispatch(clearFlashcards());
                                     } else if (mode === 'language') {
                                       dispatch(clearLanguageCards());
                                     }
                                   } else {
                                     throw new Error(`Failed to save cards (${cardsToSave.length})`);
                                   }
                                 } catch (error: any) {
                                   console.error('Error saving cards:', error);
                                   toast({
                                     title: 'Error',
                                     description: 'Failed to save the cards. Please try again.',
                                     variant: 'destructive',
                                   });
                                 }
                               };
                             
                               const handleMouseDown = (e: React.MouseEvent) => {
                                 e.preventDefault();
                                 document.addEventListener('mousemove', handleMouseMove);
                                 document.addEventListener('mouseup', handleMouseUp);
                               };
                             
                               const handleMouseMove = (e: MouseEvent) => {
                                 if (sidebarRef.current && resizeHandleRef.current) {
                                   const containerRect = sidebarRef.current.parentElement?.getBoundingClientRect();
                                   if (containerRect) {
                                     const newWidth = containerRect.right - e.clientX;
                                     const newWidthPercentage = (newWidth / containerRect.width) * 100;
                                     setSidebarWidth(Math.min(Math.max(newWidthPercentage, 20), 80));
                                   }
                                 }
                               };
                             
                               const handleMouseUp = () => {
                                 document.removeEventListener('mousemove', handleMouseMove);
                                 document.removeEventListener('mouseup', handleMouseUp);
                               };
                             
                               const [sidebarWidth, setSidebarWidth] = useState(30);
                               const resizeHandleRef = useRef<HTMLDivElement>
                                 (null);
                                 
                                   return (
                                     <div
                                       ref={sidebarRef}
                                       className={cn('flex flex-col bg-gray-50 overflow-hidden relative')}
                                       style={{ width: `${sidebarWidth}%`, minWidth: '200px', maxWidth: '80%' }}
                                     >
                                 <div className="flex-grow overflow-y-auto p-4">
                                     <div className="space-y-4">
                                         <div className="grid grid-cols-3 gap-2">
                                             <Button
                                                           variant={mode === 'language' ? 'default' : 'outline'}
                                                           onClick={() => setMode('language')}
                                                         >
                                                           Language
                                                     </Button>
                                         <Button
                                                       variant={mode === 'flashcard' ? 'default' : 'outline'}
                                                       onClick={() => setMode('flashcard')}
                                                     >
                                                       Flashcard
                                                 </Button>
                                     <Button
                                                   variant={mode === 'explain' ? 'default' : 'outline'}
                                                   onClick={() => setMode('explain')}
                                                 >
                                                   Explain
                                             </Button>
                             </div>
                                       {mode === 'language' && (
                                         <LanguageCardCollection
                                           cards={languageCards}
                                           onRemoveCard={(index) => dispatch(removeLanguageCard(index))}
                                           onAddCard={handleSaveCards}
                                           onClearCollection={() => dispatch(clearLanguageCards())}
                                         />
                                       )}
                                       {mode === 'flashcard' && (
                                         <FlashcardCollection
                                           cards={flashcards}
                                           onRemoveCard={(index) => dispatch(removeFlashcard(index))}
                                           onAddCard={handleSaveCards}
                                           onClearCollection={() => dispatch(clearFlashcards())}
                                         />
                                       )}
                                 </div>
                                 {mode === 'explain' && explanation && (
                                   <div className="mt-4 bg-white p-4 rounded-lg shadow-md text-blue-800 text-lg">
                                         {explanation}
                                   </div>
                                 )}
                           </div>
                     <div className="p-4 border-t">
                         <Button onClick={handleSaveCards} className="w-full">
                                       {mode === 'flashcard' ? 'Generate Flashcards' : mode === 'explain' ? 'Generate Explanation' : 'Translate'}
                                 </Button>
                     </div>
                     <div
                             ref={resizeHandleRef}
                             className="w-2 bg-gray-300 hover:bg-gray-400 cursor-ew-resize absolute top-0 left-0 bottom-0 transition-colors"
                             onMouseDown={handleMouseDown}
                           />
                     <Input
                             type="file"
                             onChange={onFileUpload}
                             className="hidden"
                             id="file-upload"
                             accept=".pdf,.txt,.epub"
                           />
                 </div>
                   );
                 }
             </code>
         </filesContent>
         <filesContent>
             <file>components/MainInterface/ClientMainInterface.tsx</file>
             <action>create</action>
             <description>Created ClientMainInterface component to encapsulate the MainInterface component, ensuring client-side rendering and separation of concerns.</description>
             <code>
                 'use client';
                 import { MainInterface } from './MainInterface';
                 
                 export default function ClientMainInterface() {
                   return <MainInterface />
                 ;
                 }
             </code>
         </filesContent>
         <filesContent>
             <file>components/MainInterface/MainInterface.tsx</file>
             <action>update</action>
             <description>Refactored MainInterface component for improved modularity, enhanced state management, and optimized performance. Integrated new UI components and ensured consistency with the updated file structure.</description>
             <code>
                 'use client';
                 import React, { useState, useEffect, useCallback, useRef, Suspense, lazy } from 'react';
                 import { Settings } from 'lucide-react';
                 import { Button } from '@/components/ui/button';
                 import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
                 import { useToast } from '@/components/ui/use-toast';
                 import { Sidebar } from './Sidebar';
                 import { TopSidebar } from './TopSidebar';
                 import { SettingsDialog } from './SettingsDialog';
                 import { useRouter } from 'next/navigation';
                 import { useSelector, useDispatch } from 'react-redux';
                 import { RootState } from '@/app/store';
                 import { setCurrentFile, addRecentFile } from '@/app/slices/fileSlice';
                 import { setApiKey, setSelectedModel, setCustomPrompts, SettingsState } from '@/app/slices/settingsSlice';
                 import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
                 import SignOutButton from '@/components/common/SignOutButton';
                 import { handleGenerateContent } from '@/utils/contentUtils';
                 
                 const LazyPDFViewer = lazy(() => import('./PDFViewer'));
                 const LazyEpubViewer = lazy(() => import('./EpubViewer'));
                 
                 const MainInterface = () => {
                   const [mode, setMode] = useState<'language' | 'flashcard' | 'explain'>
                     ('language');
                       const [languageSubMode, setLanguageSubMode] = useState<'english' | 'french'>
                         ('english');
                           const [settingsOpen, setSettingsOpen] = useState(false);
                           const [explanation, setExplanation] = useState('');
                           const [selectedText, setSelectedText] = useState('');
                           const fileViewerRef = useRef<HTMLDivElement>
                             (null);
                               const dispatch = useDispatch();
                               const { currentFile, recentFiles } = useSelector((state: RootState) => state.file);
                               const { apiKey, selectedModel, customPrompts } = useSelector((state: RootState) => state.settings);
                               const { toast } = useToast();
                               const router = useRouter();
                             
                               useEffect(() => {
                                 const storedApiKey = localStorage.getItem('apiKey');
                                 if (storedApiKey) dispatch(setApiKey(storedApiKey));
                             
                                 const handleSelectionChange = () => {
                                   const selection = window.getSelection();
                                   if (selection) {
                                     const newSelectedText = selection.toString().trim();
                                     if (newSelectedText)
                                       setSelectedText(newSelectedText);
                                   }
                                 };
                             
                                 document.addEventListener('selectionchange', handleSelectionChange);
                                 return () => {
                                   document.removeEventListener('selectionchange', handleSelectionChange);
                                 };
                               }, [dispatch]);
                             
                               const handleContentGeneration = useCallback(async (text: string) => {
                                 return handleGenerateContent(text, mode, customPrompts, languageSubMode, apiKey, selectedModel, dispatch, setExplanation);
                               }, [mode, customPrompts, languageSubMode, apiKey, selectedModel, dispatch, setExplanation]);
                             
                               const handleWordDoubleClick = useCallback((word: string) => {
                                 if (mode === 'language')
                                   handleContentGeneration(word);
                               }, [mode, handleContentGeneration]);
                             
                               const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) =>
                                  {
                                     const file = event.target.files?.[0];
                                     if (file) {
                                       dispatch(setCurrentFile(file));
                                       dispatch(addRecentFile({ name: file.name, progress: 0 }));
                                     }
                                   };
                                 
                                   const handleRecentFileClick = useCallback((fileName: string) => {
                                     // Logic to load the selected recent file
                                     const file = new File([''], fileName, { type: 'application/octet-stream' });
                                     dispatch(setCurrentFile(file));
                                     toast({
                                       title: 'Recent file selected',
                                       description: `Loading ${fileName}...`,
                                     });
                                     // Additional logic to load file content can be added here
                                   }, [dispatch, toast]);
                                 
                                   const handleSettingsClick = () => setSettingsOpen(true);
                                   const handleDashboardClick = () => router.push('/dashboard');
                                 
                                   return (
                                     <div className="flex flex-col h-screen">
                                     <div className="flex flex-1 overflow-hidden">
                                         <div className="flex-grow overflow-auto mr-4" ref={fileViewerRef}><Suspense fallback={<div>Loading Viewer...</div>
                                         }>
                                                     {currentFile && currentFile.type === 'application/pdf' && (
                                                       <LazyPDFViewer
                                                         file={URL.createObjectURL(currentFile)}
                                                         onLoadSuccess={(numPages) => console.log(`Loaded ${numPages} pages`)}
                                                       />
                                                     )}
                                                     {currentFile && currentFile.type === 'application/epub+zip' && (
                                                       <LazyEpubViewer
                                                         url={URL.createObjectURL(currentFile)}
                                                         location=""
                                                         setLocation={(location: string) => console.log(`Current location: ${location}`)}
                                                       />
                                                     )}
                                               </Suspense>
                                 </div>
                                 <Sidebar
                                           mode={mode}
                                           setMode={setMode}
                                           languageSubMode={languageSubMode}
                                           setLanguageSubMode={setLanguageSubMode}
                                           handleGenerateContent={handleGenerateContent}
                                           handleFileUpload={handleFileUpload}
                                           explanation={explanation}
                                           setExplanation={setExplanation}
                                         />
                                 <TopSidebar />
                             </div>
                             <DropdownMenu>
                                 <DropdownMenuTrigger asChild>
                                     <Button
                                                 className="absolute bottom-4 right-4 bg-white text-black border border-gray-300"
                                                 size="icon"
                                               >
                                     <Settings className="h-4 w-4" />
                                 </Button>
                             </DropdownMenuTrigger>
                             <DropdownMenuContent align="end" className="w-auto min-w-[8rem] bg-white border border-gray-300">
                                 <DropdownMenuItem className="w-full text-black hover:bg-gray-100">
                                     <SignOutButton />
                                 </DropdownMenuItem>
                                 <DropdownMenuItem className="w-full text-black hover:bg-gray-100" onClick={handleDashboardClick}>
                                                 Dashboard
                                           </DropdownMenuItem>
                                 <DropdownMenuItem className="w-full text-black hover:bg-gray-100" onClick={handleSettingsClick}>
                                                 Settings
                                           </DropdownMenuItem>
                             </DropdownMenuContent>
                         </DropdownMenu>
                         <SettingsDialog
                                 open={settingsOpen}
                                 onOpenChange={setSettingsOpen}
                                 setApiKey={(value: string) => dispatch(setApiKey(value))}
                                 selectedModel={selectedModel}
                                 setSelectedModel={(value: string) => dispatch(setSelectedModel(value))}
                                 customPrompts={customPrompts}
                                 setCustomPrompts={(value: SettingsState['customPrompts']) => dispatch(setCustomPrompts(value))}
                               />
                         
                               {explanation && (
                                 <Dialog open={!!explanation} onOpenChange={() =>
                              setExplanation('')}>
                             <DialogContent className="sm:max-w-[425px]">
                                 <DialogHeader>
                                     <DialogTitle>Explanation</DialogTitle>
                                 </DialogHeader>
                                 <div className="mt-4" dangerouslySetInnerHTML={{ __html: explanation }} />
                             </DialogContent>
                         </Dialog>
                               )}
                         </div>
                       );
                     };
                     
                     export default MainInterface;
                 </code>
             </filesContent>
             <filesContent>
                 <file>components/MainInterface/PDFViewer.tsx</file>
                 <action>update</action>
                 <description>Refactored PDFViewer component within `components/MainInterface` for enhanced performance and modularity. Integrated lazy loading and optimized styling with Tailwind CSS.</description>
                 <code>
                     'use client';
                     import * as React from 'react';
                     import { Viewer, Worker, SpecialZoomLevel } from '@react-pdf-viewer/core';
                     import { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';
                     import '@react-pdf-viewer/core/lib/styles/index.css';
                     import '@react-pdf-viewer/default-layout/lib/styles/index.css';
                     
                     interface PDFViewerProps {
                       file: string | null;
                       onLoadSuccess: (numPages: number) => void;
                     }
                     
                     const PDFViewer: React.FC<PDFViewerProps> = ({ file, onLoadSuccess }) =>
                          {
                           const defaultLayoutPluginInstance = defaultLayoutPlugin({ sidebarTabs: (defaultTabs) => [defaultTabs[0]] });
                         
                           if (!file) {
                         return <div className="flex items-center justify-center h-full">No PDF file selected</div>
                     ;
                       }
                     
                       return (
                         <Worker workerUrl={`https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js`}>
                         <Viewer
                                 fileUrl={file}
                                 plugins={[defaultLayoutPluginInstance]}
                                 onDocumentLoad={(e) => onLoadSuccess(e.doc.numPages)}
                                 defaultScale={SpecialZoomLevel.PageFit}
                                 onDocumentError={(error) => {
                                   console.error('Error loading PDF:', error);
                               return <div className="flex items-center justify-center h-full">Error loading PDF</div>
                     ;
                             }}
                           />
                 </Worker>
                   );
                 };
                 
                 export default PDFViewer;
             </code>
         </filesContent>
         <filesContent>
             <file>components/MainInterface/SettingsDialog.tsx</file>
             <action>update</action>
             <description>Refactored SettingsDialog component within `components/MainInterface` for better state management and styling. Ensured seamless integration with Redux for state updates and enhanced user experience.</description>
             <code>
                 import React from 'react';
                 import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
                 import { Input } from '@/components/ui/input';
                 import { Textarea } from '@/components/ui/textarea';
                 import { useSelector, useDispatch } from 'react-redux';
                 import { RootState } from '@/app/store';
                 import { setApiKey, setSelectedModel, setCustomPrompts } from '@/app/slices/settingsSlice';
                 
                 interface SettingsDialogProps {
                   open: boolean;
                   onOpenChange: (open: boolean) => void;
                 }
                 
                 export function SettingsDialog({ open, onOpenChange }: SettingsDialogProps) {
                   const dispatch = useDispatch();
                   const { apiKey, selectedModel, customPrompts } = useSelector((state: RootState) => state.settings);
                 
                   return (
                     <Dialog open={open} onOpenChange={onOpenChange}>
                     <DialogContent className={"sm:max-w-[800px] w-[95vw] max-h-[95vh] h-[800px] flex flex-col dark:bg-gray-800 text-white"}>
                         <DialogHeader>
                             <DialogTitle>Settings</DialogTitle>
                         </DialogHeader>
                         <div className="flex flex-col space-y-4 p-4 overflow-auto">
                             <div className="flex flex-col space-y-4">
                                 <div className="flex items-center justify-between">
                                     <label htmlFor="api-key" className="text-sm font-medium">API Key</label>
                                     <Input
                                                     id="api-key"
                                                     name="api-key"
                                                     value={apiKey}
                                                     onChange={(e) => {
                                                       dispatch(setApiKey(e.target.value));
                                                       localStorage.setItem('apiKey', e.target.value);
                                                     }}
                                                     className="w-2/3"
                                                   />
                                 </div>
                                 <div className="flex items-center justify-between">
                                     <label htmlFor="model" className="text-sm font-medium">Model</label>
                                     <Select value={selectedModel} onValueChange={(value) =>
                                          dispatch(setSelectedModel(value))}>
                                         <Select.Trigger className="w-2/3">
                                             <Select.Value placeholder="Select model" />
                                         </Select.Trigger>
                                         <Select.Content>
                                             <Select.Item value="claude-3-5-sonnet-20240620">Claude 3.5 Sonnet</Select.Item>
                                             <Select.Item value="claude-3-haiku">Claude 3 Haiku</Select.Item>
                                         </Select.Content>
                                     </Select>
                                 </div>
                                 <div className="flex flex-col">
                                     <label htmlFor="flashcard-prompt" className="text-sm font-medium mb-1">Flashcard Prompt</label>
                                     <Textarea
                                                     id="flashcard-prompt"
                                                     name="flashcard-prompt"
                                                     value={customPrompts.flashcard}
                                                     onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, flashcard: e.target.value }))}
                                                     className="h-32"
                                                   />
                                 </div>
                                 <div className="flex flex-col">
                                     <label htmlFor="explain-prompt" className="text-sm font-medium mb-1">Explain Prompt</label>
                                     <Textarea
                                                     id="explain-prompt"
                                                     name="explain-prompt"
                                                     value={customPrompts.explain}
                                                     onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, explain: e.target.value }))}
                                                     className="h-32"
                                                   />
                                 </div>
                                 <div className="flex flex-col">
                                     <label htmlFor="language-prompt" className="text-sm font-medium mb-1">Language Prompt</label>
                                     <Textarea
                                                     id="language-prompt"
                                                     name="language-prompt"
                                                     value={customPrompts.language}
                                                     onChange={(e) => dispatch(setCustomPrompts({ ...customPrompts, language: e.target.value }))}
                                                     className="h-32"
                                                   />
                                 </div>
                             </div>
                         </div>
                     </DialogContent>
                 </Dialog>
                   );
                 }
             </code>
         </filesContent>
         <filesContent>
             <file>app/store.ts</file>
             <action>update</action>
             <description>Optimized Redux store configuration in `app/store.ts` by including all relevant slices and ensuring middleware is properly configured for enhanced state management and performance.</description>
             <code>
                 import { configureStore } from '@reduxjs/toolkit';
                 import flashcardsReducer from './slices/flashcardsSlice';
                 import languageCardsReducer from './slices/languageCardsSlice';
                 import settingsReducer from './slices/settingsSlice';
                 import fileReducer from './slices/fileSlice';
                 
                 export const store = configureStore({
                   reducer: {
                     flashcards: flashcardsReducer,
                     languageCards: languageCardsReducer,
                     settings: settingsReducer,
                     file: fileReducer,
                   },
                   middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false }),
                 });
                 
                 export type RootState = ReturnType<typeof store.getState>
                     ;
                     export type AppDispatch = typeof store.dispatch;
                     export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>
                         ;
                     </code>
                 </filesContent>
                 <filesContent>
                     <file>app/slices/fileSlice.ts</file>
                     <action>create</action>
                     <description>Created fileSlice to manage file-related state within the Redux store. This slice handles current file selection and recent files management.</description>
                     <code>
                         import { createSlice, PayloadAction } from '@reduxjs/toolkit';
                         
                         interface RecentFile {
                           name: string;
                           progress: number;
                         }
                         
                         interface FileState {
                           currentFile: File | null;
                           recentFiles: RecentFile[];
                         }
                         
                         const initialState: FileState = {
                           currentFile: null,
                           recentFiles: [],
                         };
                         
                         const fileSlice = createSlice({
                           name: 'file',
                           initialState,
                           reducers: {
                             setCurrentFile: (state, action: PayloadAction<File | null>) =>
                              {
                                   state.currentFile = action.payload;
                                 },
                                 addRecentFile: (state, action: PayloadAction<RecentFile>) =>
                                  {
                                       state.recentFiles = [action.payload, ...state.recentFiles.filter(f => f.name !== action.payload.name)].slice(0, 5);
                                     },
                                   },
                                 });
                                 
                                 export const { setCurrentFile, addRecentFile } = fileSlice.actions;
                                 export default fileSlice.reducer;
                             </code>
                         </filesContent>
                         <filesContent>
                             <file>app/slices/flashcardsSlice.ts</file>
                             <action>create</action>
                             <description>Created flashcardsSlice to manage flashcard state within the Redux store. This slice handles adding, removing, and clearing flashcards.</description>
                             <code>
                                 import { createSlice, PayloadAction } from '@reduxjs/toolkit';
                                 
                                 interface Flashcard {
                                   id: number;
                                   question: string;
                                   answer: string;
                                 }
                                 
                                 const initialState: Flashcard[] = [];
                                 
                                 const flashcardsSlice = createSlice({
                                   name: 'flashcards',
                                   initialState,
                                   reducers: {
                                     addFlashcard: (state, action: PayloadAction<Flashcard>) =>
                                      {
                                           state.push(action.payload);
                                         },
                                         removeFlashcard: (state, action: PayloadAction<number>) =>
                                          {
                                               state.splice(action.payload, 1);
                                             },
                                             clearFlashcards: (state) => {
                                               return [];
                                             },
                                           },
                                         });
                                         
                                         export const { addFlashcard, removeFlashcard, clearFlashcards } = flashcardsSlice.actions;
                                         export default flashcardsSlice.reducer;
                                     </code>
                                 </filesContent>
                                 <filesContent>
                                     <file>app/slices/languageCardsSlice.ts</file>
                                     <action>create</action>
                                     <description>Created languageCardsSlice to manage language-specific flashcards within the Redux store. This slice handles adding, removing, and clearing language cards.</description>
                                     <code>
                                         import { createSlice, PayloadAction } from '@reduxjs/toolkit';
                                         
                                         interface LanguageCard {
                                           id: number;
                                           word: string;
                                           translation: string;
                                           example: string;
                                           explanation: string;
                                         }
                                         
                                         const initialState: LanguageCard[] = [];
                                         
                                         const languageCardsSlice = createSlice({
                                           name: 'languageCards',
                                           initialState,
                                           reducers: {
                                             addLanguageCard: (state, action: PayloadAction<LanguageCard>) =>
                                              {
                                                   state.push(action.payload);
                                                 },
                                                 removeLanguageCard: (state, action: PayloadAction<number>) =>
                                                  {
                                                       state.splice(action.payload, 1);
                                                     },
                                                     clearLanguageCards: (state) => {
                                                       return [];
                                                     },
                                                   },
                                                 });
                                                 
                                                 export const { addLanguageCard, removeLanguageCard, clearLanguageCards } = languageCardsSlice.actions;
                                                 export default languageCardsSlice.reducer;
                                             </code>
                                         </filesContent>
                                         <filesContent>
                                             <file>app/slices/settingsSlice.ts</file>
                                             <action>create</action>
                                             <description>Created settingsSlice to manage application settings within the Redux store. This slice handles API key management, model selection, and custom prompt configurations.</description>
                                             <code>
                                                 import { createSlice, PayloadAction } from '@reduxjs/toolkit';
                                                 import { DEFAULT_PROMPTS, DEFAULT_MODEL } from '@/components/config';
                                                 
                                                 interface CustomPrompts {
                                                   flashcard: string;
                                                   explain: string;
                                                   language: string;
                                                 }
                                                 
                                                 export interface SettingsState {
                                                   apiKey: string;
                                                   selectedModel: string;
                                                   customPrompts: CustomPrompts;
                                                 }
                                                 
                                                 const initialState: SettingsState = {
                                                   apiKey: '',
                                                   selectedModel: DEFAULT_MODEL,
                                                   customPrompts: DEFAULT_PROMPTS,
                                                 };
                                                 
                                                 const settingsSlice = createSlice({
                                                   name: 'settings',
                                                   initialState,
                                                   reducers: {
                                                     setApiKey: (state, action: PayloadAction<string>) =>
                                                      {
                                                           state.apiKey = action.payload;
                                                         },
                                                         setSelectedModel: (state, action: PayloadAction<string>) =>
                                                          {
                                                               state.selectedModel = action.payload;
                                                             },
                                                             setCustomPrompts: (state, action: PayloadAction<CustomPrompts>) =>
                                                              {
                                                                   state.customPrompts = action.payload;
                                                                 },
                                                               },
                                                             });
                                                             
                                                             export const { setApiKey, setSelectedModel, setCustomPrompts } = settingsSlice.actions;
                                                             export default settingsSlice.reducer;
                                                         </code>
                                                     </filesContent>
                                                     <filesContent>
                                                         <file>components/ui/Cards/PieChart.tsx</file>
                                                         <action>create</action>
                                                         <description>Introduced PieChart component within `components/ui/Cards` leveraging Recharts library for data visualization. This component provides a reusable pie chart with customizable data and styling.</description>
                                                         <code>
                                                             import React from 'react';
                                                             import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';
                                                             import { cn } from '@/lib/utils';
                                                             
                                                             interface PieChartProps {
                                                             data: Array<{ name: string; value: number }>
                                                                 ;
                                                                   colors: string[];
                                                                 }
                                                                 
                                                                 const PieChartComponent: React.FC<PieChartProps> = ({ data, colors }) =>
                                                                      {
                                                                       return (
                                                                         <ResponsiveContainer width="100%" height={300}>
                                                                         <PieChart>
                                                                             <Pie data={data} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} label>
                                                                                           {data.map((entry, index) => (
                                                                                             <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
                                                                                           ))}
                                                                                     </Pie>
                                                                             <Tooltip />
                                                                         </PieChart>
                                                                     </ResponsiveContainer>
                                                                       );
                                                                     };
                                                                     
                                                                     export default PieChartComponent;
                                                                 </code>
                                                             </filesContent>
                                                             <filesContent>
                                                                 <file>prisma/schema.prisma</file>
                                                                 <action>update</action>
                                                                 <description>Ensured Prisma schema is optimized for Next.js 14+ compatibility. Validated model relationships and indexing for improved database performance and scalability.</description>
                                                                 <code>
                                                                     // This is your Prisma schema file,
                                                                     // learn more about it in the docs: https://pris.ly/d/prisma-schema
                                                                     
                                                                     datasource db {
                                                                       provider = "mongodb"
                                                                       url      = env("DATABASE_URL")
                                                                     }
                                                                     
                                                                     generator client {
                                                                       provider = "prisma-client-js"
                                                                     }
                                                                     
                                                                     model User {
                                                                       id             String         @id @default(auto()) @map("_id") @db.ObjectId
                                                                       email          String         @unique
                                                                       name           String?
                                                                       emailVerified  DateTime?
                                                                       image          String?
                                                                       createdAt      DateTime       @default(now())
                                                                       updatedAt      DateTime       @updatedAt
                                                                       documents      Document[]
                                                                       flashcards     Flashcard[]
                                                                       learningStats  LearningStats?
                                                                       accounts       Account[]
                                                                       sessions       Session[]
                                                                     }
                                                                     
                                                                     model Account {
                                                                       id                 String  @id @default(auto()) @map("_id") @db.ObjectId
                                                                       userId             String  @db.ObjectId
                                                                       type               String
                                                                       provider           String
                                                                       providerAccountId  String
                                                                       refresh_token      String?
                                                                       access_token       String?
                                                                       expires_at         Int?
                                                                       token_type         String?
                                                                       scope              String?
                                                                       id_token           String?
                                                                       session_state      String?
                                                                     
                                                                       user User @relation(fields: [userId], references: [id], onDelete: Cascade)
                                                                       @@unique([provider, providerAccountId])
                                                                     }
                                                                     
                                                                     model Session {
                                                                       id           String   @id @default(auto()) @map("_id") @db.ObjectId
                                                                       sessionToken String   @unique
                                                                       userId       String   @db.ObjectId
                                                                       expires      DateTime
                                                                     
                                                                       user User @relation(fields: [userId], references: [id], onDelete: Cascade)
                                                                     }
                                                                     
                                                                     model VerificationToken {
                                                                       id         String   @id @default(auto()) @map("_id") @db.ObjectId
                                                                       identifier String
                                                                       token      String   @unique
                                                                       expires    DateTime
                                                                     
                                                                       @@unique([identifier, token])
                                                                     }
                                                                     
                                                                     model Document {
                                                                       id        String     @id @default(auto()) @map("_id") @db.ObjectId
                                                                       title     String
                                                                       fileType  String
                                                                       fileUrl   String
                                                                       createdAt DateTime   @default(now())
                                                                       updatedAt DateTime   @updatedAt
                                                                       userId    String     @db.ObjectId
                                                                     
                                                                       user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
                                                                       flashcards Flashcard[]
                                                                     }
                                                                     
                                                                     model Flashcard {
                                                                       id            String         @id @default(auto()) @map("_id") @db.ObjectId
                                                                       type          String         // "flashcard" or "language"
                                                                       question      String?
                                                                       answer        String?
                                                                       example       String?
                                                                       explanation   String?
                                                                       createdAt     DateTime       @default(now())
                                                                       updatedAt     DateTime       @updatedAt
                                                                       lastReviewed  DateTime?
                                                                       nextReview    DateTime?
                                                                       userId        String         @db.ObjectId
                                                                       documentId    String?        @db.ObjectId
                                                                     
                                                                       user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
                                                                       document  Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
                                                                     }
                                                                     
                                                                     model LearningStats {
                                                                       id              String   @id @default(auto()) @map("_id") @db.ObjectId
                                                                       totalFlashcards Int      @default(0)
                                                                       lastStudySession DateTime?
                                                                       createdAt       DateTime @default(now())
                                                                       updatedAt       DateTime @updatedAt
                                                                       userId          String   @unique @db.ObjectId
                                                                     
                                                                       user User @relation(fields: [userId], references: [id], onDelete: Cascade)
                                                                     }
                                                                 </code>
                                                             </filesContent>
                                                             <filesContent>
                                                                 <file>app/api/route.ts</file>
                                                                 <action>create</action>
                                                                 <description>Created centralized API route handler to manage authentication and other API functionalities efficiently.</description>
                                                                 <code>
                                                                     // app/api/route.ts
                                                                     import { NextResponse } from 'next/server';
                                                                     
                                                                     export async function GET() {
                                                                       return NextResponse.json({ message: 'API is working!' });
                                                                     }
                                                                 </code>
                                                             </filesContent>
                                                             <filesContent>
                                                                 <file>components/ui/ThemeToggle.tsx</file>
                                                                 <action>update</action>
                                                                 <description>Refactored ThemeToggle component within `components/ui` to enhance modularity and styling consistency. Integrated with the centralized theme management using Tailwind CSS.</description>
                                                                 <code>
                                                                     'use client';
                                                                     import { useDarkMode } from '@/hooks/useDarkMode';
                                                                     import { Sun, Moon } from 'lucide-react';
                                                                     import { Button } from '@/components/ui/button';
                                                                     
                                                                     const ThemeToggle = () => {
                                                                       const { theme, toggleTheme } = useDarkMode();
                                                                       return (
                                                                         <Button onClick={toggleTheme} variant="ghost" size="icon" aria-label="Toggle Theme">
                                                                               {theme === 'light' ? <Moon className="h-4 w-4" /> : <Sun className="h-4 w-4" />
                                                                         }
                                                                         </Button>
                                                                       );
                                                                     };
                                                                     
                                                                     export default ThemeToggle;
                                                                 </code>
                                                             </filesContent>
                                                             <filesContent>
                                                                 <file>components/ui/Cards/Card.tsx</file>
                                                                 <action>create</action>
                                                                 <description>Created a standardized Card component within `components/ui/Cards` to encapsulate common card styles and behaviors. This promotes reusability and consistent styling across different card types.</description>
                                                                 <code>
                                                                     import React from 'react';
                                                                     import { cn } from '@/lib/utils';
                                                                     
                                                                     interface CardProps extends React.HTMLAttributes<HTMLDivElement>
                                                                          {}
                                                                         
                                                                         const Card: React.FC<CardProps> = ({ className, children, ...props }) =>
                                                                              {
                                                                               return (
                                                                                 <div className={cn('rounded-lg border border-neutral-200 bg-white shadow-sm dark:border-neutral-800 dark:bg-neutral-950 text-neutral-900 dark:text-neutral-100', className)} {...props}>
                                                                                       {children}
                                                                                 </div>
                                                                               );
                                                                             };
                                                                             
                                                                             interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement>
                                                                                  {}
                                                                                 
                                                                                 const CardHeader: React.FC<CardHeaderProps> = ({ className, children, ...props }) =>
                                                                                      (
                                                                                       <div className={cn('flex flex-col space-y-1.5 p-6', className)} {...props}>
                                                                                             {children}
                                                                                       </div>
                                                                                     );
                                                                                     
                                                                                     interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement>
                                                                                          {}
                                                                                         
                                                                                         const CardTitle: React.FC<CardTitleProps> = ({ className, children, ...props }) =>
                                                                                              (
                                                                                               <h3 className={cn('text-2xl font-semibold leading-none tracking-tight', className)} {...props}>
                                                                                                     {children}
                                                                                               </h3>
                                                                                             );
                                                                                             
                                                                                             interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement>
                                                                                                  {}
                                                                                                 
                                                                                                 const CardDescription: React.FC<CardDescriptionProps> = ({ className, children, ...props }) =>
                                                                                                      (
                                                                                                       <p className={cn('text-sm text-neutral-500 dark:text-neutral-400', className)} {...props}>
                                                                                                             {children}
                                                                                                       </p>
                                                                                                     );
                                                                                                     
                                                                                                     interface CardContentProps extends React.HTMLAttributes<HTMLDivElement>
                                                                                                          {}
                                                                                                         
                                                                                                         const CardContent: React.FC<CardContentProps> = ({ className, children, ...props }) =>
                                                                                                              (
                                                                                                               <div className={cn('p-6 pt-0', className)} {...props}>
                                                                                                                     {children}
                                                                                                               </div>
                                                                                                             );
                                                                                                             
                                                                                                             interface CardFooterProps extends React.HTMLAttributes<HTMLDivElement>
                                                                                                                  {}
                                                                                                                 
                                                                                                                 const CardFooter: React.FC<CardFooterProps> = ({ className, children, ...props }) =>
                                                                                                                      (
                                                                                                                       <div className={cn('flex items-center p-6 pt-0', className)} {...props}>
                                                                                                                             {children}
                                                                                                                       </div>
                                                                                                                     );
                                                                                                                     
                                                                                                                     export { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter };
                                                                                                                 </code>
                                                                                                             </filesContent>
                                                                                                             <filesContent>
                                                                                                                 <file>app/hooks/useDarkMode.ts</file>
                                                                                                                 <action>update</action>
                                                                                                                 <description>Optimized useDarkMode hook for better responsiveness and state management. Ensured consistent theme toggling aligned with Tailwind CSS configurations.</description>
                                                                                                                 <code>
                                                                                                                     'use client';
                                                                                                                     import { useState, useEffect } from 'react';
                                                                                                                     
                                                                                                                     export function useDarkMode() {
                                                                                                                       const [theme, setTheme] = useState<'light' | 'dark'>
                                                                                                                         ('light');
                                                                                                                         
                                                                                                                           useEffect(() => {
                                                                                                                             const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
                                                                                                                             if (savedTheme) {
                                                                                                                               setTheme(savedTheme);
                                                                                                                               document.documentElement.classList.add(savedTheme);
                                                                                                                             } else {
                                                                                                                               const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                                                                                                                               const defaultTheme = prefersDark ? 'dark' : 'light';
                                                                                                                               setTheme(defaultTheme);
                                                                                                                               document.documentElement.classList.add(defaultTheme);
                                                                                                                             }
                                                                                                                           }, []);
                                                                                                                         
                                                                                                                           const toggleTheme = () => {
                                                                                                                             const newTheme: 'light' | 'dark' = theme === 'light' ? 'dark' : 'light';
                                                                                                                             document.documentElement.classList.remove(theme);
                                                                                                                             document.documentElement.classList.add(newTheme);
                                                                                                                             setTheme(newTheme);
                                                                                                                             localStorage.setItem('theme', newTheme);
                                                                                                                           };
                                                                                                                         
                                                                                                                           return { theme, toggleTheme };
                                                                                                                         }
                                                                                                                     </code>
                                                                                                                 </filesContent>
                                                                                                                 <filesContent>
                                                                                                                     <file>app/manager/page.tsx</file>
                                                                                                                     <action>update</action>
                                                                                                                     <description>Refactored manager page for improved learning management functionalities. Integrated enhanced filtering, sorting, and export/import capabilities to streamline flashcard management.</description>
                                                                                                                     <code>
                                                                                                                         'use client';
                                                                                                                         import { useState, useEffect, useMemo, useCallback } from 'react';
                                                                                                                         import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
                                                                                                                         import { Button } from '@/components/ui/button';
                                                                                                                         import { Progress } from '@/components/ui/progress';
                                                                                                                         import { Calendar } from '@/components/ui/calendar';
                                                                                                                         import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip as RechartsTooltip, PieChart, Pie, Cell, LineChart, Line } from 'recharts';
                                                                                                                         import { motion, AnimatePresence } from 'framer-motion';
                                                                                                                         import confetti from 'canvas-confetti';
                                                                                                                         import { Flame, Brain, Zap, Trophy, TrendingUp, Quote, Calendar as CalendarIcon, Info, ChevronLeft, ChevronRight, Clock, PieChart as PieChartIcon, Target, Award, Sparkles, BookOpen, Lightbulb, Hexagon, ChevronUp, ChevronDown, Swords } from 'lucide-react';
                                                                                                                         import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
                                                                                                                         import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
                                                                                                                         import { format, subMonths, addMonths, isSameMonth, isSameYear, startOfYear, endOfYear, addDays } from 'date-fns';
                                                                                                                         import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
                                                                                                                         import { Badge } from '@/components/ui/badge';
                                                                                                                         import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
                                                                                                                         import { Slider } from '@/components/ui/slider';
                                                                                                                         
                                                                                                                         // Utility functions
                                                                                                                         const generateActivityData = () => {
                                                                                                                           const startDate = startOfYear(new Date());
                                                                                                                           const endDate = endOfYear(new Date());
                                                                                                                           const days = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 3600 * 24));
                                                                                                                           return Array.from({ length: days }, (_, i) => {
                                                                                                                             const date = addDays(startDate, i);
                                                                                                                             return { date: format(date, 'yyyy-MM-dd'), count: Math.floor(Math.random() * 10) };
                                                                                                                           });
                                                                                                                         };
                                                                                                                         
                                                                                                                         const weeklyProgress = [
                                                                                                                           { name: 'Mon', cards: 12 },
                                                                                                                           { name: 'Tue', cards: 18 },
                                                                                                                           { name: 'Wed', cards: 15 },
                                                                                                                           { name: 'Thu', cards: 25 },
                                                                                                                           { name: 'Fri', cards: 20 },
                                                                                                                           { name: 'Sat', cards: 30 },
                                                                                                                           { name: 'Sun', cards: 22 },
                                                                                                                         ];
                                                                                                                         
                                                                                                                         const studyTimeData = [
                                                                                                                           { name: 'Morning', value: 30 },
                                                                                                                           { name: 'Afternoon', value: 45 },
                                                                                                                           { name: 'Evening', value: 25 },
                                                                                                                         ];
                                                                                                                         
                                                                                                                         const retentionData = [
                                                                                                                           { day: 1, retention: 95 },
                                                                                                                           { day: 7, retention: 80 },
                                                                                                                           { day: 30, retention: 70 },
                                                                                                                           { day: 90, retention: 60 },
                                                                                                                         ];
                                                                                                                         
                                                                                                                         const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];
                                                                                                                         
                                                                                                                         // Component for stat cards
                                                                                                                         const StatCard = ({ title, icon: Icon, value, subtext, color, onClick }) => (
                                                                                                                           <Card className="overflow-hidden">
                                                                                                                             <CardHeader className="flex flex-row items-center justify-between pb-2">
                                                                                                                                 <CardTitle className="text-sm font-medium">{title}</CardTitle>
                                                                                                                                 <Icon className={`h-4 w-4 text-${color}-500`} aria-hidden="true" />
                                                                                                                             </CardHeader>
                                                                                                                             <CardContent>
                                                                                                                                 <div className="flex items-center justify-between">
                                                                                                                                     <motion.div
                                                                                                                                               className={`text-3xl font-bold text-${color}-500`}
                                                                                                                                               initial={{ scale: 0 }}
                                                                                                                                               animate={{ scale: 1 }}
                                                                                                                                               transition={{ type: 'spring', stiffness: 260, damping: 20 }}
                                                                                                                                             >
                                                                                                                                               {value}
                                                                                                                                         </motion.div>
                                                                                                                                         {onClick && (
                                                                                                                                           <Button size="sm" onClick={onClick}>
                                                                                                                                                 +1 (Demo)
                                                                                                                                           </Button>
                                                                                                                                         )}
                                                                                                                                   </div>
                                                                                                                             <p className="text-xs text-muted-foreground">{subtext}</p>
                                                                                                                         </CardContent>
                                                                                                                     </Card>
                                                                                                                     );
                                                                                                                     
                                                                                                                     // Daily Challenge component
                                                                                                                     type Flashcard = { id: number, word: string, translation: string, example: string, explanation: string };
                                                                                                                     interface DailyChallengeProps {
                                                                                                                       onComplete: () => void;
                                                                                                                     }
                                                                                                                     
                                                                                                                     const DailyChallenge: React.FC<DailyChallengeProps> = ({ onComplete }) =>
                                                                                                                          {
                                                                                                                           const [completed, setCompleted] = useState(false);
                                                                                                                         
                                                                                                                           const handleComplete = useCallback(() => {
                                                                                                                             setCompleted(true);
                                                                                                                             onComplete();
                                                                                                                           }, [onComplete]);
                                                                                                                         
                                                                                                                           return (
                                                                                                                             <Card>
                                                                                                                             <CardHeader>
                                                                                                                                 <CardTitle className="flex items-center gap-2">
                                                                                                                                     <Sparkles className="h-5 w-5 text-yellow-500" />
                                                                                                                                      Daily Challenge
                                                                                                                                         </CardTitle>
                                                                                                                             </CardHeader>
                                                                                                                             <CardContent>
                                                                                                                                 <p className="mb-4">Review 20 cards in under 10 minutes</p>
                                                                                                                                         {!completed ? (
                                                                                                                                           <Button onClick={handleComplete} className="w-full">
                                                                                                                                                 Complete Challenge
                                                                                                                                           </Button>
                                                                                                                                         ) : (
                                                                                                                                           <Badge variant="success">Completed</Badge>
                                                                                                                                         )}
                                                                                                                                   </CardContent>
                                                                                                                         </Card>
                                                                                                                           );
                                                                                                                         };
                                                                                                                         
                                                                                                                         // Learning Path Progress component
                                                                                                                         const LearningPathProgress = () => {
                                                                                                                           const [currentLevel, setCurrentLevel] = useState(3);
                                                                                                                           const totalLevels = 10;
                                                                                                                         
                                                                                                                           return (
                                                                                                                             <Card>
                                                                                                                             <CardHeader>
                                                                                                                                 <CardTitle className="flex items-center gap-2">
                                                                                                                                     <TrendingUp className="h-5 w-5 text-green-500" />
                                                                                                                                      Learning Path Progress
                                                                                                                                         </CardTitle>
                                                                                                                             </CardHeader>
                                                                                                                             <CardContent>
                                                                                                                                 <div className="space-y-2">
                                                                                                                                     <div className="flex justify-between">
                                                                                                                                         <span>Level {currentLevel}</span>
                                                                                                                                         <span>{currentLevel}/{totalLevels}</span>
                                                                                                                                     </div>
                                                                                                                                     <Progress value={(currentLevel / totalLevels) * 100} className="w-full" />
                                                                                                                                 </div>
                                                                                                                             </CardContent>
                                                                                                                         </Card>
                                                                                                                           );
                                                                                                                         };
                                                                                                                         
                                                                                                                         // Study Reminder component
                                                                                                                         const StudyReminder = () => {
                                                                                                                           const [reminderTime, setReminderTime] = useState(20);
                                                                                                                         
                                                                                                                           const handleSetReminder = useCallback(() => {
                                                                                                                             // Implement reminder logic here
                                                                                                                             alert(`Reminder set for ${reminderTime}:00`);
                                                                                                                           }, [reminderTime]);
                                                                                                                         
                                                                                                                           return (
                                                                                                                             <Card>
                                                                                                                             <CardHeader>
                                                                                                                                 <CardTitle className="flex items-center gap-2">
                                                                                                                                     <Clock className="h-5 w-5 text-indigo-500" />
                                                                                                                                      Study Reminder
                                                                                                                                         </CardTitle>
                                                                                                                             </CardHeader>
                                                                                                                             <CardContent>
                                                                                                                                 <div className="space-y-4">
                                                                                                                                     <div className="flex items-center space-x-4">
                                                                                                                                         <Switch
                                                                                                                                                       id="shuffle"
                                                                                                                                                       checked={reminderTime > 0}
                                                                                                                                                       onCheckedChange={() => setReminderTime(prev => (prev > 0 ? 0 : 20))}
                                                                                                                                                     />
                                                                                                                                         <Label htmlFor="shuffle" className="text-lg text-gray-700">Toggle Reminder</Label>
                                                                                                                                     </div>
                                                                                                                                     <div className="flex items-center space-x-2">
                                                                                                                                         <Slider
                                                                                                                                                       value={[reminderTime]}
                                                                                                                                                       onValueChange={(value) => setReminderTime(value[0])}
                                                                                                                                                       max={23}
                                                                                                                                                       step={1}
                                                                                                                                                     />
                                                                                                                                         <span>{reminderTime}:00</span>
                                                                                                                                     </div>
                                                                                                                                     <Button onClick={handleSetReminder}>Set Reminder</Button>
                                                                                                                                 </div>
                                                                                                                             </CardContent>
                                                                                                                         </Card>
                                                                                                                           );
                                                                                                                         };
                                                                                                                         
                                                                                                                         // Main UserDashboard component
                                                                                                                         export default function UserDashboard() {
                                                                                                                           const [progress, setProgress] = useState(0);
                                                                                                                           const [streakDays, setStreakDays] = useState(0);
                                                                                                                           const [heatmapView, setHeatmapView] = useState('month');
                                                                                                                           const [currentMonth, setCurrentMonth] = useState(new Date());
                                                                                                                           const [activeTab, setActiveTab] = useState('progress');
                                                                                                                           const [showAchievement, setShowAchievement] = useState(false);
                                                                                                                           const [xp, setXp] = useState(0);
                                                                                                                           const userName = 'Alice'; // Replace with actual user name
                                                                                                                           const activityData = useMemo(() => generateActivityData(), []);
                                                                                                                         
                                                                                                                           useEffect(() => {
                                                                                                                             const timer = setTimeout(() => setProgress(78), 500);
                                                                                                                             return () => clearTimeout(timer);
                                                                                                                           }, []);
                                                                                                                         
                                                                                                                           useEffect(() => {
                                                                                                                             setStreakDays(5);
                                                                                                                         
                                                                                                                             if (streakDays === 5) {
                                                                                                                               confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } });
                                                                                                                               setShowAchievement(true);
                                                                                                                             }
                                                                                                                           }, [streakDays]);
                                                                                                                         
                                                                                                                           const getHeatmapData = useCallback(() => {
                                                                                                                             const today = new Date();
                                                                                                                             const oneYearAgo = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate());
                                                                                                                             return activityData.filter(d => {
                                                                                                                               const date = new Date(d.date);
                                                                                                                               return date >= oneYearAgo && date <= today &&
                                                                                                                                 (heatmapView === 'year' || (heatmapView === 'month' && isSameMonth(date, currentMonth) && isSameYear(date, currentMonth)));
                                                                                                                             });
                                                                                                                           }, [activityData, heatmapView, currentMonth]);
                                                                                                                         
                                                                                                                           const handlePrevMonth = useCallback(() => {
                                                                                                                             setCurrentMonth(prevMonth => subMonths(prevMonth, 1));
                                                                                                                           }, []);
                                                                                                                         
                                                                                                                           const handleNextMonth = useCallback(() => {
                                                                                                                             setCurrentMonth(prevMonth => addMonths(prevMonth, 1));
                                                                                                                           }, []);
                                                                                                                         
                                                                                                                           const handleStreakIncrement = useCallback(() => {
                                                                                                                             setStreakDays(s => s + 1);
                                                                                                                           }, []);
                                                                                                                         
                                                                                                                           const handleChallengeComplete = useCallback(() => {
                                                                                                                             setXp(prevXp => prevXp + 50);
                                                                                                                             confetti({ particleCount: 50, spread: 60, origin: { y: 0.8 } });
                                                                                                                           }, []);
                                                                                                                         
                                                                                                                           const renderHeaderSection = () => (
                                                                                                                             <motion.div
                                                                                                                               className="flex items-center justify-between"
                                                                                                                               initial={{ opacity: 0, y: -20 }}
                                                                                                                               animate={{ opacity: 1, y: 0 }}
                                                                                                                               transition={{ duration: 0.5 }}
                                                                                                                             >
                                                                                                                         <h1 className="text-3xl font-bold flex items-center gap-2">
                                                                                                                             <Brain className="w-8 h-8 text-primary" aria-hidden="true" />
                                                                                                                              Welcome back, {userName}!
                                                                                                                               </h1>
                                                                                                                         <div className="flex items-center gap-4">
                                                                                                                             <Badge variant="outline" className="px-3 py-1">
                                                                                                                                 <Target className="w-4 h-4 mr-2" />
                                                                                                                                  Level 5 Learner
                                                                                                                                     </Badge>
                                                                                                                             <Badge variant="secondary" className="px-3 py-1">
                                                                                                                                 <Sparkles className="w-4 h-4 mr-2" />
                                                                                                                                  {xp} XP
                                                                                                                                     </Badge>
                                                                                                                             <Avatar>
                                                                                                                                 <AvatarImage src="/placeholder.svg?height=40&width=40" alt={userName} />
                                                                                                                                 <AvatarFallback>{userName.charAt(0)}</AvatarFallback>
                                                                                                                             </Avatar>
                                                                                                                         </div>
                                                                                                                     </motion.div>
                                                                                                                       );
                                                                                                                     
                                                                                                                       const renderAchievementNotification = () => (
                                                                                                                         <AnimatePresence mode="wait">
                                                                                                                               {showAchievement && (
                                                                                                                                 <motion.div
                                                                                                                                   initial={{ opacity: 0, y: -50 }}
                                                                                                                                   animate={{ opacity: 1, y: 0 }}
                                                                                                                                   exit={{ opacity: 0, y: -50 }}
                                                                                                                                   className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded"
                                                                                                                                   role="alert"
                                                                                                                                 >
                                                                                                                         <div className="flex items-center">
                                                                                                                             <Award className="h-6 w-6 text-yellow-500" />
                                                                                                                             <p className="font-semibold">Achievement Unlocked: 5-Day Streak!</p>
                                                                                                                         </div>
                                                                                                                         <p className="text-sm">Keep up the great work! You're on fire!</p>
                                                                                                                         <button
                                                                                                                                     onClick={() => setShowAchievement(false)}
                                                                                                                                     className="absolute top-0 right-0 mt-2 mr-2 text-green-700 hover:text-green-900"
                                                                                                                                   >
                                                                                                                                     &times;
                                                                                                                               </button>
                                                                                                                 </motion.div>
                                                                                                                       )}
                                                                                                                 </AnimatePresence>
                                                                                                               );
                                                                                                             
                                                                                                               const renderStatCards = () => (
                                                                                                                 <motion.div
                                                                                                                   className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4"
                                                                                                                   initial={{ opacity: 0 }}
                                                                                                                   animate={{ opacity: 1 }}
                                                                                                                   transition={{ duration: 0.5, delay: 0.2 }}
                                                                                                                 >
                                                                                                             <Card>
                                                                                                                 <CardHeader className="flex flex-row items-center justify-between pb-2">
                                                                                                                     <CardTitle className="text-sm font-medium">Weekly Goal</CardTitle>
                                                                                                                     <Trophy className="h-4 w-4 text-yellow-500" aria-hidden="true" />
                                                                                                                 </CardHeader>
                                                                                                                 <CardContent>
                                                                                                                     <div className="space-y-2">
                                                                                                                         <Progress value={progress} className="w-full" />
                                                                                                                         <div className="flex items-center justify-between">
                                                                                                                             <p className="text-2xl font-bold">{progress}%</p>
                                                                                                                             <p className="text-xs text-muted-foreground">78 of 100 cards</p>
                                                                                                                         </div>
                                                                                                                     </div>
                                                                                                                 </CardContent>
                                                                                                             </Card>
                                                                                                             <StatCard
                                                                                                                     title="Streak"
                                                                                                                     icon={Flame}
                                                                                                                     value={`${streakDays} days`}
                                                                                                                     color="orange"
                                                                                                                     onClick={handleStreakIncrement}
                                                                                                                   />
                                                                                                             <StatCard
                                                                                                                     title="Cards Created"
                                                                                                                     icon={Brain}
                                                                                                                     value="142"
                                                                                                                     subtext="total cards"
                                                                                                                     color="purple"
                                                                                                                   />
                                                                                                             <StatCard
                                                                                                                     title="Learning Speed"
                                                                                                                     icon={Zap}
                                                                                                                     value="Fast"
                                                                                                                     subtext="10 cards/day avg"
                                                                                                                     color="yellow"
                                                                                                                   />
                                                                                                         </motion.div>
                                                                                                           );
                                                                                                         
                                                                                                           const renderLearningAnalytics = () => (
                                                                                                             <Card className="md:col-span-2">
                                                                                                             <CardHeader>
                                                                                                                 <CardTitle>Learning Analytics</CardTitle>
                                                                                                             </CardHeader>
                                                                                                             <CardContent>
                                                                                                                 <Tabs value={activeTab} onValueChange={setActiveTab}>
                                                                                                                     <TabsList>
                                                                                                                         <TabsTrigger value="progress">Weekly Progress</TabsTrigger>
                                                                                                                         <TabsTrigger value="time">Study Time</TabsTrigger>
                                                                                                                         <TabsTrigger value="retention">Retention</TabsTrigger>
                                                                                                                     </TabsList>
                                                                                                                     <TabsContent value="progress">
                                                                                                                         <div className="h-[300px]">
                                                                                                                             <ResponsiveContainer width="100%" height="100%">
                                                                                                                                 <BarChart data={weeklyProgress}>
                                                                                                                                     <XAxis dataKey="name" />
                                                                                                                                     <YAxis />
                                                                                                                                     <RechartsTooltip />
                                                                                                                                     <Bar dataKey="cards" fill="#3b82f6" radius={[4, 4, 0, 0]} label={{ position: 'top', fill: '#6b7280', fontSize: 12 }} />
                                                                                                                                 </BarChart>
                                                                                                                             </ResponsiveContainer>
                                                                                                                         </div>
                                                                                                                     </TabsContent>
                                                                                                                     <TabsContent value="time">
                                                                                                                         <div className="h-[300px]">
                                                                                                                             <ResponsiveContainer width="100%" height="100%">
                                                                                                                                 <PieChart>
                                                                                                                                     <Pie
                                                                                                                                                         data={studyTimeData}
                                                                                                                                                         cx="50%"
                                                                                                                                                         cy="50%"
                                                                                                                                                         labelLine={false}
                                                                                                                                                         outerRadius={80}
                                                                                                                                                         fill="#8884d8"
                                                                                                                                                         dataKey="value"
                                                                                                                                                         label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                                                                                                                                                       >
                                                                                                                                                         {studyTimeData.map((entry, index) => (
                                                                                                                                                           <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                                                                                                                                         ))}
                                                                                                                                                   </Pie>
                                                                                                                                 <RechartsTooltip />
                                                                                                                             </PieChart>
                                                                                                                         </ResponsiveContainer>
                                                                                                                     </div>
                                                                                                                 </TabsContent>
                                                                                                                 <TabsContent value="retention">
                                                                                                                     <div className="h-[300px]">
                                                                                                                         <ResponsiveContainer width="100%" height="100%">
                                                                                                                             <LineChart data={retentionData}>
                                                                                                                                 <XAxis dataKey="day" />
                                                                                                                                 <YAxis />
                                                                                                                                 <RechartsTooltip />
                                                                                                                                 <Line type="monotone" dataKey="retention" stroke="#8884d8" />
                                                                                                                             </LineChart>
                                                                                                                         </ResponsiveContainer>
                                                                                                                     </div>
                                                                                                                 </TabsContent>
                                                                                                             </Tabs>
                                                                                                         </CardContent>
                                                                                                     </Card>
                                                                                                       );
                                                                                                     
                                                                                                       const renderActivityHeatmap = () => (
                                                                                                         <Card className="md:col-span-2">
                                                                                                         <CardHeader>
                                                                                                             <div className="flex items-center justify-between">
                                                                                                                 <CardTitle className="flex items-center gap-2">
                                                                                                                     <CalendarIcon className="h-6 w-6" aria-hidden="true" />
                                                                                                                      Activity Heatmap
                                                                                                                           </CardTitle>
                                                                                                                 <div className="flex items-center gap-2">
                                                                                                                     <Select value={heatmapView} onValueChange={setHeatmapView}>
                                                                                                                         <SelectTrigger className={`w-[180px] ${heatmapView === 'dark' ? 'bg-gray-700 dark:bg-gray-700 text-white' : ''}`}>
                                                                                                                             <SelectValue placeholder="Select view" />
                                                                                                                         </SelectTrigger>
                                                                                                                         <SelectContent>
                                                                                                                             <SelectItem value="month">Month View</SelectItem>
                                                                                                                             <SelectItem value="year">Year View</SelectItem>
                                                                                                                         </SelectContent>
                                                                                                                     </Select>
                                                                                                                     <TooltipProvider>
                                                                                                                         <Tooltip>
                                                                                                                             <TooltipTrigger asChild>
                                                                                                                                 <Button variant="ghost" size="icon" aria-label="Heatmap Info">
                                                                                                                                     <Info className="h-4 w-4" />
                                                                                                                                 </Button>
                                                                                                                             </TooltipTrigger>
                                                                                                                             <TooltipContent>
                                                                                                                                 <p>Colors indicate activity level:</p>
                                                                                                                                 <ul className="list-disc list-inside">
                                                                                                                                     <li>Green: High (8-10 cards)</li>
                                                                                                                                     <li>Yellow: Medium (4-7 cards)</li>
                                                                                                                                     <li>Orange: Low (1-3 cards)</li>
                                                                                                                                 </ul>
                                                                                                                             </TooltipContent>
                                                                                                                         </Tooltip>
                                                                                                                     </TooltipProvider>
                                                                                                                 </div>
                                                                                                             </div>
                                                                                                         </CardHeader>
                                                                                                         <CardContent>
                                                                                                             <div className="h-[240px] overflow-y-auto">
                                                                                                                 <div className="flex items-center justify-between mb-4">
                                                                                                                     <Button onClick={handlePrevMonth} variant="outline" size="icon" aria-label="Previous month">
                                                                                                                         <ChevronLeft className="h-4 w-4" />
                                                                                                                     </Button>
                                                                                                                     <h2 className="text-lg font-semibold">{format(currentMonth, 'MMMM yyyy')}</h2>
                                                                                                                     <Button onClick={handleNextMonth} variant="outline" size="icon" aria-label="Next month">
                                                                                                                         <ChevronRight className="h-4 w-4" />
                                                                                                                     </Button>
                                                                                                                 </div>
                                                                                                                 <AnimatePresence mode="wait">
                                                                                                                     <motion.div
                                                                                                                                   key={currentMonth.toISOString()}
                                                                                                                                   initial={{ opacity: 0 }}
                                                                                                                                   animate={{ opacity: 1 }}
                                                                                                                                   exit={{ opacity: 0 }}
                                                                                                                                   transition={{ duration: 0.3 }}
                                                                                                                                 >
                                                                                                                     <Calendar
                                                                                                                                     mode="multiple"
                                                                                                                                     selected={getHeatmapData().map(d => new Date(d.date))}
                                                                                                                                     month={currentMonth}
                                                                                                                                     className="rounded-md border"
                                                                                                                                     modifiers={{
                                                                                                                                       high: (date) => {
                                                                                                                                         const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));
                                                                                                                                         return activity ? activity.count > 7 : false;
                                                                                                                                       },
                                                                                                                                       medium: (date) => {
                                                                                                                                         const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));
                                                                                                                                         return activity ? activity.count > 3 && activity.count <= 7 : false;
                                                                                                                                       },
                                                                                                                                       low: (date) => {
                                                                                                                                         const activity = activityData.find(d => d.date === format(date, 'yyyy-MM-dd'));
                                                                                                                                         return activity ? activity.count > 0 && activity.count <= 3 : false;
                                                                                                                                       },
                                                                                                                                     }}
                                                                                                                                     modifiersStyles={{
                                                                                                                                       high: { backgroundColor: 'rgba(34, 197, 94, 0.9)' },
                                                                                                                                       medium: { backgroundColor: 'rgba(234, 179, 8, 0.9)' },
                                                                                                                                       low: { backgroundColor: 'rgba(249, 115, 22, 0.9)' },
                                                                                                                                     }}
                                                                                                                                   />
                                                                                                                 </motion.div>
                                                                                                             </AnimatePresence>
                                                                                                         </div>
                                                                                                     </CardContent>
                                                                                                 </Card>
                                                                                                   );
                                                                                                 
                                                                                                   const renderDailyInspiration = () => (
                                                                                                     <Card className="mt-8">
                                                                                                     <CardHeader>
                                                                                                         <CardTitle className="flex items-center gap-2">
                                                                                                             <Quote className="h-6 w-6 text-purple-500" />
                                                                                                              Daily Inspiration
                                                                                                                 </CardTitle>
                                                                                                     </CardHeader>
                                                                                                     <CardContent>
                                                                                                         <motion.p
                                                                                                                   className="text-lg font-semibold text-center"
                                                                                                                   initial={{ opacity: 0 }}
                                                                                                                   animate={{ opacity: 1 }}
                                                                                                                   transition={{ delay: 0.5 }}
                                                                                                                 >
                                                                                                                   "The capacity to learn is a gift; the ability to learn is a skill; the willingness to learn is a choice." - Brian Herbert
                                                                                                             </motion.p>
                                                                                                 </CardContent>
                                                                                             </Card>
                                                                                               );
                                                                                             
                                                                                               const renderUpcomingReviews = () => (
                                                                                                 <Card className="mt-8">
                                                                                                 <CardHeader>
                                                                                                     <CardTitle className="flex items-center gap-2">
                                                                                                         <BookOpen className="h-5 w-5 text-green-500" />
                                                                                                          Upcoming Reviews
                                                                                                             </CardTitle>
                                                                                                 </CardHeader>
                                                                                                 <CardContent>
                                                                                                     <ul className="space-y-2">
                                                                                                                   {Array.from({ length: 5 }, (_, index) => (
                                                                                                                     <li key={index} className="flex items-center justify-between">
                                                                                                             <span>{format(addDays(new Date(), index + 1), 'MMM dd')}</span>
                                                                                                             <Badge>{Math.floor(Math.random() * 20) + 5} cards</Badge>
                                                                                                         </li>
                                                                                                                   ))}
                                                                                                             </ul>
                                                                                                 </CardContent>
                                                                                             </Card>
                                                                                               );
                                                                                             
                                                                                               const renderStudyTips = () => (
                                                                                                 <Card className="mt-8">
                                                                                                 <CardHeader>
                                                                                                     <CardTitle className="flex items-center gap-2">
                                                                                                         <Lightbulb className="h-5 w-5 text-yellow-500" />
                                                                                                          Study Tips
                                                                                                             </CardTitle>
                                                                                                 </CardHeader>
                                                                                                 <CardContent>
                                                                                                     <ul className="list-disc list-inside space-y-2 text-sm">
                                                                                                         <li>Review cards regularly to reinforce learning</li>
                                                                                                         <li>Use mnemonics for difficult concepts</li>
                                                                                                         <li>Take short breaks to improve focus</li>
                                                                                                         <li>Explain concepts to others to solidify understanding</li>
                                                                                                     </ul>
                                                                                                 </CardContent>
                                                                                             </Card>
                                                                                               );
                                                                                             
                                                                                               const renderUserProgress = () => (
                                                                                                 <Card className="mt-8">
                                                                                                 <CardHeader>
                                                                                                     <CardTitle className="flex items-center gap-2">
                                                                                                         <Rocket className="h-6 w-6 text-blue-500" />
                                                                                                          Your Progress
                                                                                                             </CardTitle>
                                                                                                 </CardHeader>
                                                                                                 <CardContent>
                                                                                                     <div className="flex justify-between items-center space-x-6">
                                                                                                         <div>
                                                                                                             <h3 className="text-xl font-semibold">Current Rank: {userRank}</h3>
                                                                                                             <p className="text-muted-foreground">Keep going! You're doing great!</p>
                                                                                                         </div>
                                                                                                         <Button variant="outline">View Detailed Stats</Button>
                                                                                                     </div>
                                                                                                     <div className="space-y-4 mt-4">
                                                                                                         <div>
                                                                                                             <div className="flex justify-between text-sm mb-1">
                                                                                                                 <span>XP to next level</span>
                                                                                                                 <span>750 / 1000</span>
                                                                                                             </div>
                                                                                                             <Progress value={75} className="w-full h-2" />
                                                                                                         </div>
                                                                                                         <div>
                                                                                                             <div className="flex justify-between text-sm mb-1">
                                                                                                                 <span>Daily goal progress</span>
                                                                                                                 <span>4 / 5 sessions</span>
                                                                                                             </div>
                                                                                                             <Progress value={80} className="w-full h-2" />
                                                                                                         </div>
                                                                                                     </div>
                                                                                                 </CardContent>
                                                                                             </Card>
                                                                                               );
                                                                                             
                                                                                               const renderDuelModal = () => (
                                                                                                 showDuelModal && duelOpponent && (
                                                                                                   <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                                                                                                 <Card className="w-96">
                                                                                                     <CardHeader>
                                                                                                         <CardTitle className="flex items-center gap-2">
                                                                                                             <Swords className="h-6 w-6 text-red-500" />
                                                                                                              Learning Duel
                                                                                                                     </CardTitle>
                                                                                                     </CardHeader>
                                                                                                     <CardContent>
                                                                                                         <p className="mb-4">Challenge {duelOpponent.name} to a learning duel!</p>
                                                                                                         <div className="flex items-center justify-between mb-4">
                                                                                                             <Avatar>
                                                                                                                 <AvatarImage src="/placeholder.svg?height=40&width=40" alt="Your Avatar" />
                                                                                                                 <AvatarFallback>You</AvatarFallback>
                                                                                                             </Avatar>
                                                                                                             <Swords className="h-8 w-8 text-red-500" />
                                                                                                             <Avatar>
                                                                                                                 <AvatarImage src={duelOpponent.avatar} alt={duelOpponent.name} />
                                                                                                                 <AvatarFallback>{duelOpponent.name.charAt(0)}</AvatarFallback>
                                                                                                             </Avatar>
                                                                                                         </div>
                                                                                                         <div className="space-y-2">
                                                                                                             <Button className="w-full" onClick={() =>
                                                                                                                  setShowDuelModal(false)}>
                                                                                                                                 Start Duel
                                                                                                                           </Button>
                                                                                                             <Button className="w-full" variant="outline" onClick={() =>
                                                                                                                  setShowDuelModal(false)}>
                                                                                                                                 Cancel
                                                                                                                           </Button>
                                                                                                         </div>
                                                                                                     </CardContent>
                                                                                                 </Card>
                                                                                             </div>
                                                                                                 )
                                                                                               );
                                                                                             
                                                                                               return (
                                                                                                 <div className="container mx-auto p-4 space-y-6">
                                                                                                       {renderHeaderSection()}
                                                                                                       {renderAchievementNotification()}
                                                                                                       {renderStatCards()}
                                                                                                       <motion.div
                                                                                                         className="grid gap-4 md:grid-cols-3"
                                                                                                         initial={{ opacity: 0 }}
                                                                                                         animate={{ opacity: 1 }}
                                                                                                         transition={{ duration: 0.5, delay: 0.4 }}
                                                                                                       >
                                                                                                         {renderLearningAnalytics()}
                                                                                                         <div className="space-y-4">
                                                                                                     <DailyChallenge onComplete={handleChallengeComplete} />
                                                                                                     <LearningPathProgress />
                                                                                                     <StudyReminder />
                                                                                                 </div>
                                                                                                         {renderDailyInspiration()}
                                                                                                         {renderUpcomingReviews()}
                                                                                                         {renderStudyTips()}
                                                                                                         {renderCommunityStats()}
                                                                                                         {renderCommunityChallenge()}
                                                                                                         {renderTrendingTopics()}
                                                                                                         {renderUserProgress()}
                                                                                                         {renderDuelModal()}
                                                                                                   </motion.div>
                                                                                         </div>
                                                                                           );
                                                                                         }
                                                                                     </code>
                                                                                 </filesContent>
                                                                                 <filesContent>
                                                                                     <file>app/slices/toastSlice.ts</file>
                                                                                     <action>create</action>
                                                                                     <description>Created toastSlice to manage toast notifications within the Redux store. This slice handles adding and removing toasts, enabling centralized toast management and improved user feedback mechanisms.</description>
                                                                                     <code>
                                                                                         import { createSlice, PayloadAction } from '@reduxjs/toolkit';
                                                                                         
                                                                                         interface ToastProps {
                                                                                           id: string;
                                                                                           title: string;
                                                                                           description?: string;
                                                                                           variant?: 'default' | 'destructive' | 'success';
                                                                                         }
                                                                                         
                                                                                         interface ToastState {
                                                                                           toasts: ToastProps[];
                                                                                         }
                                                                                         
                                                                                         const initialState: ToastState = {
                                                                                           toasts: [],
                                                                                         };
                                                                                         
                                                                                         const toastSlice = createSlice({
                                                                                           name: 'toast',
                                                                                           initialState,
                                                                                           reducers: {
                                                                                             addToast: (state, action: PayloadAction<ToastProps>) =>
                                                                                              {
                                                                                                   state.toasts.push(action.payload);
                                                                                                 },
                                                                                                 removeToast: (state, action: PayloadAction<string>) =>
                                                                                                  {
                                                                                                       state.toasts = state.toasts.filter(toast => toast.id !== action.payload);
                                                                                                     },
                                                                                                     clearToasts: (state) => {
                                                                                                       state.toasts = [];
                                                                                                     },
                                                                                                   },
                                                                                                 });
                                                                                                 
                                                                                                 export const { addToast, removeToast, clearToasts } = toastSlice.actions;
                                                                                                 export default toastSlice.reducer;
                                                                                             </code>
                                                                                         </filesContent>
                                                                                     </root>
